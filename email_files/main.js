/**
 * Very basic console wrapper...
 * ... handy for debugging and whatnot....
 *
 */

var konsole = function(){};

konsole.timerArray = new Array();

konsole.log = function (input, optionalExplanation)
{
    if (typeof console === 'undefined')
    {

    }
    else
    {
    	var output = '';
    	if (optionalExplanation != undefined)
    	{
    		console.log(optionalExplanation);
    	}
        console.log(input);
    }
    return;
};

konsole.markTime = function(timerName, timerAction)
{
	if (konsole.timerArray[timerName] == undefined)
	{
		konsole.timerArray[timerName] = Date.now();
		konsole.log('starting timer ' + timerName);
	}
	else
	{
		if (timerAction == undefined)
		{
			timerAction = '';
		}
		var ellapsedTime = (Date.now() - konsole.timerArray[timerName])/1000;
		konsole.log('timer ' + timerName + ' ellapsed=' + ellapsedTime + ' action=' + timerAction);
	}
	
}




/* 
 * Uhh... Did I Err?
 * ... an error tracking tool 
 * 
 * by jon roig (jroig@godaddy.com)
 *  
 */

var WCC = WCC || {};

WCC.errorTracker = (function()
{
    var errorCount = 0;
    var lastErrorReportId = null;
    
    // settings
    var appId = null;
    var errorLimit = 5;
    var additionalInfo = null;
    
    
    var getBrowserInfo = function()
    {
        var returnObj = {};
        for(var x in navigator)
        {
            if (typeof(navigator[x]) != "object" && typeof(navigator[x]) != 'function')
            {
                returnObj[x] = navigator[x];
            }
        }
        
        return returnObj;
    }
   
    
    return{
        
        
        // log
        log: function(errorMsg, url, lineNumber)
        {
            
       
            
            var url = window.location.href;
            konsole.log('errorMsg=' + errorMsg);
            konsole.log('url=' + url);
            konsole.log('lineNumber=' + lineNumber);
            konsole.log('appId=' + appId);
            
            // increment the count
            errorCount = errorCount + 1;
            
             // if we go over the error count, we just wanna error out
            if (errorCount > errorLimit)
            {
            	return false;
            }
            
            // is this something we already know to handle?
            // check the cookie
            // @todo
            
            // gather the browser info
            var browserInfo = getBrowserInfo();
            konsole.log('browserInfo');konsole.log(browserInfo);
            
            var parser = new UAParser();
            var browserObj = parser.getBrowser();
            konsole.log('browserObj');konsole.log(browserObj);
            
            // gather a stack trace
            //var stackTrace = returnTrace();
            //konsole.log('stackTrace');konsole.log(stackTrace);
            
            // send the info back to the server
            // synchronously
            var sendObj = {};
            sendObj.browserInfo = browserInfo;
            sendObj.browserObj = browserObj;
            //sendObj.stackTrace = stackTrace;
            sendObj.errorMsg = errorMsg;
            sendObj.errorUrl = url;
            sendObj.errorLineNumber = lineNumber;
            sendObj.appId = appId;
            sendObj.additionalInfo = additionalInfo;
            
            
            konsole.log('sendObj');konsole.log(sendObj);
            
            var remote = $.ajax({
                type: "POST",
                url: 'ajax/errortracker',
                async: true,
                dataType: 'json',
                data: {'sendObj':sendObj, postToken: Globals.POST_TOKEN},
                error: WCC.utils.handleError
            });
        
            // otherwise... continue!!!
            return true;
        },
        
       
        // return the error count
        returnErrorCount: function()
        {
            return errorCount;
        },
        
        
        // init functions... you can feed it stuff so it does stuff
        init: function(inputObj)
        {
            if (inputObj.appId != undefined)
            {
                appId = inputObj.appId;
            }
            
            if (inputObj.additionalInfo != undefined)
            {
                additionalInfo = inputObj.additionalInfo;
            }
        }
         
        
        
        
    };
}());









// UAParser.js v0.5.27
// Lightweight JavaScript-based User-Agent string parser
// https://github.com/faisalman/ua-parser-js
//
// Copyright √Ç¬© 2012-2013 Faisalman <fyzlman@gmail.com>
// Dual licensed under GPLv2 & MIT
(function(e,t){"use strict";var n="",r="?",i="function",s="undefined",o="object",u="major",a="model",f="name",l="type",c="vendor",h="version",p="console",d="mobile",v="tablet",m={has:function(e,t){return t.toLowerCase().indexOf(e.toLowerCase())!==-1}},g={rgx:function(){for(var e,n=0,r,u,a,f,l,c,h=arguments;n<h.length;n+=2){var p=h[n],d=h[n+1];if(typeof e===s){e={};for(a in d)f=d[a],typeof f===o?e[f[0]]=t:e[f]=t}for(r=u=0;r<p.length;r++){l=p[r].exec(this.getUA());if(!!l){for(a in d)c=l[++u],f=d[a],typeof f===o&&f.length>0?f.length==2?e[f[0]]=f[1]:f.length==3&&(typeof f[1]===i&&(!f[1].exec||!f[1].test)?e[f[0]]=c?f[1].call(this,c,f[2]):t:e[f[0]]=c?c.replace(f[1],f[2]):t):e[f]=c?c:t;break}}if(!!l)break}return e},str:function(e,n){for(var i in n)if(typeof n[i]===o&&n[i].length>0){for(var s in n[i])if(m.has(n[i][s],e))return i===r?t:i}else if(m.has(n[i],e))return i===r?t:i;return e}},y={browser:{oldsafari:{major:{1:["/8","/1","/3"],2:"/4","?":"/"},version:{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}}},device:{sprint:{model:{"Evo Shift 4G":"7373KT"},vendor:{HTC:"APA",Sprint:"Sprint"}}},os:{windows:{version:{ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",RT:"ARM"}}}},b={browser:[[/(opera\smini)\/((\d+)?[\w\.-]+)/i,/(opera\s[mobiletab]+).+version\/((\d+)?[\w\.-]+)/i,/(opera).+version\/((\d+)?[\w\.]+)/i,/(opera)[\/\s]+((\d+)?[\w\.]+)/i],[f,h,u],[/\s(opr)\/((\d+)?[\w\.]+)/i],[[f,"Opera"],h,u],[/(kindle)\/((\d+)?[\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?((\d+)?[\w\.]+)*/i,/(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?((\d+)?[\w\.]*)/i,/(?:ms|\()(ie)\s((\d+)?[\w\.]+)/i,/(rekonq)((?:\/)[\w\.]+)*/i,/(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt)\/((\d+)?[\w\.-]+)/i],[f,h,u],[/(yabrowser)\/((\d+)?[\w\.]+)/i],[[f,"Yandex"],h,u],[/(comodo_dragon)\/((\d+)?[\w\.]+)/i],[[f,/_/g," "],h,u],[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?((\d+)?[\w\.]+)/i],[f,h,u],[/(dolfin)\/((\d+)?[\w\.]+)/i],[[f,"Dolphin"],h,u],[/((?:android.+)crmo|crios)\/((\d+)?[\w\.]+)/i],[[f,"Chrome"],h,u],[/version\/((\d+)?[\w\.]+).+?mobile\/\w+\s(safari)/i],[h,u,[f,"Mobile Safari"]],[/version\/((\d+)?[\w\.]+).+?(mobile\s?safari|safari)/i],[h,u,f],[/webkit.+?(mobile\s?safari|safari)((\/[\w\.]+))/i],[f,[u,g.str,y.browser.oldsafari.major],[h,g.str,y.browser.oldsafari.version]],[/(konqueror)\/((\d+)?[\w\.]+)/i,/(webkit|khtml)\/((\d+)?[\w\.]+)/i],[f,h,u],[/(navigator|netscape)\/((\d+)?[\w\.-]+)/i],[[f,"Netscape"],h,u],[/(swiftfox)/i,/(iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?((\d+)?[\w\.\+]+)/i,/(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix)\/((\d+)?[\w\.-]+)/i,/(mozilla)\/((\d+)?[\w\.]+).+rv\:.+gecko\/\d+/i,/(uc\s?browser|polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf)[\/\s]?((\d+)?[\w\.]+)/i,/(links)\s\(((\d+)?[\w\.]+)/i,/(gobrowser)\/?((\d+)?[\w\.]+)*/i,/(ice\s?browser)\/v?((\d+)?[\w\._]+)/i,/(mosaic)[\/\s]((\d+)?[\w\.]+)/i],[f,h,u]],device:[[/\((ipad|playbook);[\w\s\);-]+(rim|apple)/i],[a,c,[l,v]],[/(hp).+(touchpad)/i,/(kindle)\/([\w\.]+)/i,/\s(nook)[\w\s]+build\/(\w+)/i,/(dell)\s(strea[kpr\s\d]*[\dko])/i],[c,a,[l,v]],[/\((ip[honed]+);.+(apple)/i],[a,c,[l,d]],[/(blackberry)[\s-]?(\w+)/i,/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|huawei|meizu|motorola)[\s_-]?([\w-]+)*/i,/(hp)\s([\w\s]+\w)/i,/(asus)-?(\w+)/i],[c,a,[l,d]],[/\((bb10);\s(\w+)/i],[[c,"BlackBerry"],a,[l,d]],[/android.+((transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+))/i],[[c,"Asus"],a,[l,v]],[/(sony)\s(tablet\s[ps])/i],[c,a,[l,v]],[/(nintendo)\s([wids3u]+)/i],[c,a,[l,p]],[/((playstation)\s[3portablevi]+)/i],[[c,"Sony"],a,[l,p]],[/(sprint\s(\w+))/i],[[c,g.str,y.device.sprint.vendor],[a,g.str,y.device.sprint.model],[l,d]],[/(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,/(zte)-(\w+)*/i,/(alcatel|geeksphone|huawei|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]+)*/i],[c,[a,/_/g," "],[l,d]],[/\s((milestone|droid[2x]?))[globa\s]*\sbuild\//i,/(mot)[\s-]?(\w+)*/i],[[c,"Motorola"],a,[l,d]],[/android.+\s((mz60\d|xoom[\s2]{0,2}))\sbuild\//i],[[c,"Motorola"],a,[l,v]],[/android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n8000|sgh-t8[56]9))/i],[[c,"Samsung"],a,[l,v]],[/((s[cgp]h-\w+|gt-\w+|galaxy\snexus))/i,/(sam[sung]*)[\s-]*(\w+-?[\w-]*)*/i,/sec-((sgh\w+))/i],[[c,"Samsung"],a,[l,d]],[/(sie)-(\w+)*/i],[[c,"Siemens"],a,[l,d]],[/(maemo|nokia).*(n900|lumia\s\d+)/i,/(nokia)[\s_-]?([\w-]+)*/i],[[c,"Nokia"],a,[l,d]],[/android\s3\.[\s\w-;]{10}((a\d{3}))/i],[[c,"Acer"],a,[l,v]],[/android\s3\.[\s\w-;]{10}(lg?)-([06cv9]{3,4})/i],[[c,"LG"],a,[l,v]],[/((nexus\s4))/i,/(lg)[e;\s-\/]+(\w+)*/i],[[c,"LG"],a,[l,d]],[/(mobile|tablet);.+rv\:.+gecko\//i],[l,c,a]],engine:[[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,/(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,/(icab)[\/\s]([23]\.[\d\.]+)/i],[f,h],[/rv\:([\w\.]+).*(gecko)/i],[h,f]],os:[[/(windows)\snt\s6\.2;\s(arm)/i,/(windows\sphone(?:\sos)*|windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i],[f,[h,g.str,y.os.windows.version]],[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],[[f,"Windows"],[h,g.str,y.os.windows.version]],[/\((bb)(10);/i],[[f,"BlackBerry"],h],[/(blackberry)\w*\/?([\w\.]+)*/i,/(tizen)\/([\w\.]+)/i,/(android|webos|palm\os|qnx|bada|rim\stablet\sos|meego)[\/\s-]?([\w\.]+)*/i],[f,h],[/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]+)*/i],[[f,"Symbian"],h],[/mozilla.+\(mobile;.+gecko.+firefox/i],[[f,"Firefox OS"],h],[/(nintendo|playstation)\s([wids3portablevu]+)/i,/(mint)[\/\s\(]?(\w+)*/i,/(joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk)[\/\s-]?([\w\.-]+)*/i,/(hurd|linux)\s?([\w\.]+)*/i,/(gnu)\s?([\w\.]+)*/i],[f,h],[/(cros)\s[\w]+\s([\w\.]+\w)/i],[[f,"Chromium OS"],h],[/(sunos)\s?([\w\.]+\d)*/i],[[f,"Solaris"],h],[/\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]+)*/i],[f,h],[/(ip[honead]+)(?:.*os\s*([\w]+)*\slike\smac|;\sopera)/i],[[f,"iOS"],[h,/_/g,"."]],[/(mac\sos\sx)\s?([\w\s\.]+\w)*/i],[f,[h,/_/g,"."]],[/(haiku)\s(\w+)/i,/(aix)\s((\d)(?=\.|\)|\s)[\w\.]*)*/i,/(macintosh|mac(?=_powerpc)|plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos)/i,/(unix)\s?([\w\.]+)*/i],[f,h]]},w=function(t){var r=t||(e&&e.navigator&&e.navigator.userAgent?e.navigator.userAgent:n);if(!(this instanceof w))return(new w(t)).getResult();this.getBrowser=function(){return g.rgx.apply(this,b.browser)},this.getDevice=function(){return g.rgx.apply(this,b.device)},this.getEngine=function(){return g.rgx.apply(this,b.engine)},this.getOS=function(){return g.rgx.apply(this,b.os)},this.getResult=function(){return{browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice()}},this.getUA=function(){return r},this.setUA=function(e){return r=e,this},this.setUA(r)};if(typeof exports!==s)typeof module!==s&&module.exports&&(exports=module.exports=w),exports.UAParser=w;else{e.UAParser=w,typeof define===i&&define.amd&&define(function(){return w});if(typeof e.jQuery!==s){var E=e.jQuery,S=new w;E.ua=S.getResult(),E.ua.get=function(){return S.getUA()},E.ua.set=function(e){S.setUA(e);var t=S.getResult();for(var n in t)E.ua[n]=t[n]}}}})(this);


/**
 * Random utils... kind of a dumping ground for stuff...
 *
 *... by Jon Roig - jroig@godaddy.com
 */

var WCC = WCC || {};

WCC.utils = (function(){

    var alertCountArray = 0;
    var emailAddressExists = false;
    var crmStatus = null;

    var currentMigrateAccount = null;

    var syncAccountsSuccess = function(data)
    {
        WCC.components.componentErrorDisplay.open('Cache Clear Success!', 'The internal application cache has been cleared.<br/><br/>Refresh your browser to reload.', function(){location.reload(false)});
    }

    return {

        syncAccount: function()
        {
            var that = this;
            $.ajax({
                type: "POST",
                url: 'ajaxemail/resyncaccount/',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success: function(data) {syncAccountsSuccess.call(that, data)},
                error: WCC.utils.handleError
            });
        },

        returnCookieWidth: function()
        {
            if ($.cookie('emailUserNameHeaderWidth'))
            {
                return $.cookie('emailUserNameHeaderWidth');
            }

            return false;
        },

        planViewEllipser: function(inputText)
        {

            var maxWidth = $('.table-top').width() - 550;
            var numChars = Math.ceil(maxWidth/5);

            if (numChars > inputText.length)
            {
                return inputText;
            }

            return inputText.substr(0, numChars) + '...';
        },

        planViewMaxWidth: function()
        {
            var maxWidth = $('.table-top').width() - 550;
            return maxWidth;
        },


        isMac: function()
        {
            var blah = navigator.userAgent.indexOf('Macintosh');
            if (blah >= 0)
            {
                return true;
            }

            return false;
        },


        isIE: function()
        {
            var blah = navigator.userAgent.indexOf('MSIE');
            if (blah >= 0)
            {
                return true;
            }

            return false;
        },

        getIEVersion: function()
        {
            return navigator.appVersion.match(/MSIE ([\d.]+)/)[1];
        },


        showPleaseWait: function()
        {
             // create the div
            if ( $('#showPleaseWait').length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = 'showPleaseWait';
                $(document.body).append(newDiv);
            }

            var mainWrapper = $('.main-content-container');
            var showPleaseWait = $('#showPleaseWait');

            var renderedOutput = $("#infoTableLoading").tmpl();
            showPleaseWait.html(renderedOutput);
        },


        showLoading: function(divId, loadingTextInput)
        {
            if (loadingTextInput != undefined)
            {
                loadingText = loadingTextInput;
            }
            else
            {
                loadingText = BRAVO.Translate._("WCC_MAIN_Loading_");
            }

            var theDiv = $('#' + divId);
            var theHtml = "<div id='loading' style='text-align: center;'>";
            theHtml += "<img src='https://img1.wsimg.com/starfield/sf.core/v0.3/images/sf-spinner.gif' style='margin: 10px;'><br/><span style='color: #ADAAAA'>" + loadingText + "</span></div>";

            theDiv.html(theHtml);

        },

        hidePleaseWait: function()
        {
            $('#showPleaseWait').remove();
        },


        truncateAfterXChars: function(inputString, numberOfCharsAllowed)
        {
            if (inputString.length < numberOfCharsAllowed)
            {
                return inputString;
            }

            var outputString = inputString.substring(0, numberOfCharsAllowed) + '...';
            return outputString;
        },

        generateRandomString: function(numberOfChars)
        {
            if (numberOfChars == undefined)
            {
                numberOfChars = 5;
            }
            var output = "";
            var possibleString = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

            for( var i=0; i < numberOfChars; i++ )
                output += possibleString.charAt(Math.floor(Math.random() * possibleString.length));

            return output;
        },

        /**
         * Deal with the incoming string of bulk ids...
         * takes strings. spits out an array. like your mom.
         */
        processPastedBulkInputIntoArray: function(bulkInputString)
        {

            // we're gonna convert all the linebreaks and tabs to commas!
            // in yo face, more complicated methods!
            var output = bulkInputString.replace(new RegExp("\\r\\n", "gi"), ",");
            output = output.replace(new RegExp("\\n", "gi"), ",");
            output = output.replace(/\t/g, ',');
            var tempThing = '';
            var outputArray = output.split(',');

            // now go through each item, make sure there's no at signs
            for (var k in outputArray)
            {
                if (outputArray[k].indexOf('@') != -1)
                {
                    outputArray[k] = outputArray[k].substr(0, outputArray[k].indexOf('@'));
                }
                tempThing = jQuery.trim(outputArray[k]);
                if (tempThing != '')
                {
                    outputArray[k] = tempThing;
                }
            }

            outputArray.sort();
            outputArray.reverse();

            return outputArray;

        },


        /**
         * Get the first element of an object
         *
         */
        getFirstElement: function (inputObject)
        {
            var firstKey = Object.keys(inputObject)[0];
            return inputObject[firstKey];
        },


        /**
         * Get the length of an object
         *
         */
        objectLength: function (inputObject)
        {
            var count = 0;
            for (var e in inputObject)
                {count++;}

            return count;
        },


        /**
         * Convert bytes to human readable words
         *
         * @param int bytes
         * @return string
         */
        bytesToReadable: function (bytes, doRound)
        {
            if(bytes === undefined || bytes===null) {
                    return '0   kb';
            }

            // we'll try and use the cache if we can...
            // saves a whole bunch of cycles if we just store it
            var cacheKey = 'bytes-'+ bytes + '-' + doRound;
            if (WCC.tmpObjCache.get(cacheKey) != null)
            {
                return WCC.tmpObjCache.get(cacheKey);
            }

            var sizes = ['b', 'kb', 'MB', 'GB', 'TB', 'PB'];
            var sizeIndex = 0;
            if (bytes == 0)
            {
                return '0 kb';
            }

            // parse int...
            bytes = parseInt(bytes);

            while( bytes >= 1024 )
            {
                sizeIndex++;
                if (sizeIndex > 2)
                {
                    bytes = bytes / 1000;
                }
                else
                {
                    bytes = bytes / 1024;
                }

            }


            //bytes = Math.round(bytes/10) * 10;
            if (doRound == true)
            {
                var output = bytes.toFixed(0) + "   " + sizes[sizeIndex];
                WCC.tmpObjCache.set(cacheKey, output);
                return output;
            }

            var output = bytes.toFixed(1) + "   " + sizes[sizeIndex];
            WCC.tmpObjCache.set(cacheKey, output);
            return output;
        },


        /**
         * Convert two values to a common denomimator with kb or MB or whatever
         *
         */
        bytesToCommonReadable: function (xBytes, yBytes)
        {
            var outputObj = {};
            if (xBytes == 0 && yBytes == 0)
            {
                outputObj.xBytes = 0;
                outputObj.yBytes = 0;
                outputObj.units = 'kb';
                return outputObj;
            }

            var cacheKey = 'bytesToCommonReadable-'+ xBytes + '-' + yBytes;
            if (WCC.tmpObjCache.get(cacheKey) != null)
            {
                return WCC.tmpObjCache.get(cacheKey);
            }


            var txt = ['bytes', 'kb', 'MB', 'GB', 'TB', 'PB'];
            var xSizeIndex = 0;
            var ySizeIndex = 0;

            while( yBytes >= 1024 )
            {
                ySizeIndex++;
                yBytes = yBytes / 1024;
            }
            while( xSizeIndex < ySizeIndex )
            {

                xSizeIndex++;
                xBytes = xBytes / 1024;
            }

            /**
             outputObj.xBytes = Math.round(xBytes/10) * 10;
            if (yBytes >1)
            {
                outputObj.yBytes = Math.round(yBytes/10) * 10;
            }
            else
            {

            }
            */
            outputObj.yBytes = yBytes;

            outputObj.units =  txt[ySizeIndex];

            WCC.tmpObjCache.set(cacheKey, outputObj);
            return outputObj;
        },


        /**
         * Little tool to handle the address width
         *
         */
        handleUserAddressWidth: function(widthMod, userNameContainerMod)
        {

           if (widthMod == undefined || widthMod == null)
           {
               widthMod = 550;
           }

           if (userNameContainerMod == undefined || userNameContainerMod == null)
           {
               userNameContainerMod = 40;
           }

           var userAddressWidth = $('.main-content-container').width() - widthMod;
           if (userAddressWidth < 125)
           {
               userAddressWidth = 125;
           }

           $('.user-name').width(userAddressWidth);
           $('#userNameHeader').width(userAddressWidth);

           $('.user-name-container').width(userAddressWidth-userNameContainerMod).css('text-overflow','ellipsis').css('overflow','hidden').height(20);
           var moreWidth = 1;
           if(undefined != $.browser.msie && $.browser.msie) {
        	   moreWidth = 2;
           }
           $('#infoTable').width($('.table-top').width() + moreWidth);
        },


        /**
         * FORM STUFF!
         */


        /**
         * Should we show the "Selected all" thing?
         *
         */
        decideWhetherToShowAllSelectedThing: function(fullDataArray)
        {
            if (fullDataArray.length == 0)
            {
                return false;
            }

            var infoTable = $("#infoTable");
            var checkedCount = WCC.utils.getCheckedCountForDiv(infoTable);

            var alertHuntSortArray = WCC.sortAndSearch.returnAlertHuntSortArray();
            var searchTerm = WCC.sortAndSearch.returnSearchTerm();
            var cacheObjCount = WCC.cache.returnItemCount();

            // get a check of all possible things

            var currentlyCheckedCount = 0;
            for (var k in fullDataArray)
            {
                if (fullDataArray[k]['checked'] != undefined && fullDataArray[k]['checked'] == true)
                {
                    currentlyCheckedCount++;
                }
            }

            var checkedObj = WCC.utils.getCheckedCountForDiv($('#infoTable'));
            if (checkedObj.checkedCount == checkedObj.totalCount &&  checkedObj.checkedCount < cacheObjCount)
            {
                var renderedOutput = $("#selectAllRow").tmpl({'selectedCount':checkedCount.checkedCount, 'possible':checkedCount.totalCount , 'totalChecked': currentlyCheckedCount, 'accountsTotal':fullDataArray.length});
                return renderedOutput;
            }
            /**
            if (
            		currentlyCheckedCount !=0
            		//|| checkedCount.totalCount == checkedCount.checkedCount
            		//&& checkedCount.checkedCount < fullDataArray.length
            		&& alertHuntSortArray == null
            		&& searchTerm == null
            		&& cacheObjCount != 0
        		)
            {
                var renderedOutput = $("#selectAllRow").tmpl({'selectedCount':checkedCount.checkedCount, 'possible':checkedCount.totalCount , 'totalChecked': currentlyCheckedCount, 'accountsTotal':fullDataArray.length});
                return renderedOutput;
            }
            **/
            return false;
        },



        /**
         * Return an array of all the currently checked boxes...
         *
         * @param obj inputDiv jQuery obj
         * @return array of jQuery obj checked boxes
         */
        returnAllCheckedBoxes: function (inputDiv)
        {
            var outputArray = new Array();
            // get all the boxes
            var checkBoxArray = inputDiv.find('input[type="checkbox"]');

            for (var x = 0; x < checkBoxArray.length; x++)
            {
                 if (checkBoxArray[x].checked == true)
                 {
                     outputArray[outputArray.length] = checkBoxArray[x].parent;
                 }
            }

            return outputArray;
        },


        /**
         * Handle the box check...
         * ... trigger the infoRowRefresh
         */
        handleBoxCheck : function(inputThing)
        {
            var currentlyChecked = inputThing.checked;
            if (currentlyChecked == true)
            {
                this.checkTheBox(inputThing);
            }
            else
            {
                this.uncheckTheBox(inputThing);
            }

            $(document).trigger('showSelectedAll');
        },


        /**
         * Set the box as checked in the cache...
         *
         */
        checkTheBox: function (inputDiv)
        {
            try
            {
                var parentData = $(inputDiv).parent().parent().data();
            }
            catch(err)
            {
                return;
            }

            if (parentData['infoData'] == undefined)
            {
                return;
            }

            WCC.cache.setAttribute(parentData['infoData']['realName'], 'checked', true);
        },


        /***
         * Uncheck the box in the cache and stuff
         *
         */
        uncheckTheBox: function (inputDiv)
        {
            try
            {
                var parentData = $(inputDiv).parent().parent().data();
            }
            catch(err)
            {
                return;
            }

            if (parentData['infoData'] == undefined)
            {
                return;
            }

            WCC.cache.setAttribute(parentData['infoData']['realName'], 'checked', false);
        },


        /**
         * Check all the boxes within a div
         *
         * @param obj inputDiv jQuery obj
         * @return obj inputDiv jQuery obj
         */
        checkAllBoxes: function (inputDiv)
        {
            var checkBoxArray = inputDiv.find('input[type="checkbox"]');

            for (var x = 0; x < checkBoxArray.length; x++)
            {
                checkBoxArray[x].checked = true;
                this.checkTheBox(checkBoxArray[x]);
            }

            return inputDiv;
        },


        /**
         * Uncheck all the boxes within a div
         *
         * @param obj inputDiv jQuery obj
         * @return obj inputDiv jQuery obj
         */
        uncheckAllBoxes: function (inputDiv)
        {
            var checkBoxArray = inputDiv.find('input[type="checkbox"]');
            for (var x = 0; x < checkBoxArray.length; x++)
            {
                checkBoxArray[x].checked = false;
                this.uncheckTheBox(checkBoxArray[x]);
            }

            return inputDiv;
        },


        /**
         * Check all the boxes in a cache object
         *
         */
        checkAllThePossibleBoxes: function()
        {
            if (WCC.sortAndSearch.returnFilterField() != null)
            {
                var cache = WCC.sortAndSearch.generateOutput();
                for (var k in cache)
                {
                    WCC.cache.setAttribute(cache[k].realName, 'checked', true);
                }
            }
            else
            {
                var cache = WCC.cache.returnCacheObject();
                for (var k in cache)
                {
                    WCC.cache.setAttribute(k, 'checked', true);
                }
            }

            $(document).trigger('infoRowRefresh');
            $(document).trigger('showSelectedAll');
        },


        /**
         * Uncheck all the boxes in the cache
         *
         */
        uncheckAllThePossibleBoxes: function()
        {
            if (WCC.sortAndSearch.returnFilterField() != null)
            {
                var cache = WCC.sortAndSearch.generateOutput();
                for (var k in cache)
                {
                    WCC.cache.setAttribute(cache[k].realName, 'checked', false);
                }
            }
            else
            {
                var cache = WCC.cache.returnCacheObject();
                for (var k in cache)
                {
                    WCC.cache.setAttribute(k, 'checked', false);
                }
            }

            $(document).trigger('infoRowRefresh');
            $(document).trigger('showSelectedAll');
        },


        /**
         * Get the number of checked boxes within a div
         *
         * @param obj inputDiv jQuery obj
         * @return array of jquery objects
         */
        getCheckedCountForDiv: function(inputDiv)
        {
            var outputObj = {};
            outputObj.totalCount = 0;
            outputObj.checkedCount = 0;

            var checkBoxArray = inputDiv.find('input[type="checkbox"]');
            for (var x = 0; x < checkBoxArray.length; x++)
            {
                outputObj.totalCount++;
                if (checkBoxArray[x].checked == true)
                {
                    outputObj.checkedCount++;
                }
            }

            return outputObj;
        },


        /**
         * Check specific boxes within a div
         *
         * @param obj inputDiv jQuery obj
         * @param array of jquery objects
         * @return boolean
         */
        checkSpecificBoxesByData: function (inputDiv, checkedBoxesDataArray)
        {
            var checkBoxArray = inputDiv.find('input[type="checkbox"]');

            for (var x = 0; x < checkBoxArray.length; x++)
            {
                var realName = $(checkBoxArray[x]).parent().parent().data('infoData').realName;
                if (jQuery.inArray(realName, checkedBoxesDataArray) !== -1)
                 {
                     checkBoxArray[x].checked = true;
                     WCC.utils.handleBoxCheck(checkBoxArray[x]);
                 }
            }

            return true;
        },


        /**
         * Check the box related to the current flyout
         *
         */
        checkboxFromFlyout: function ()
        {
            var flyoutData = $('#flyoutArea').data('infoData');
            var infoTableData = $('#infoTable').data('infoData');
            WCC.utils.checkSpecificBoxesByData( $('#infoTable'), [flyoutData.realName]);

        },


        /**
         * Switch... usually attached ot the layout / check all things box
         *
         * @return boolean
         */
        checkAllRows: function()
        {
            //var renderedOutput = $("#selectAllRow").tmpl();
            //renderedOutput.insertBefore( "#infoRowHeader" );
            var infoTable = $("#infoTable");
            var checkedCount = WCC.utils.getCheckedCountForDiv(infoTable);

            if (checkedCount.totalCount == checkedCount.checkedCount )
            {
                WCC.utils.uncheckAllBoxes(infoTable);
                WCC.utils.uncheckAllThePossibleBoxes();
            }
            else
            {
                WCC.utils.checkAllBoxes(infoTable);
            }

            $(document).trigger('infoRowRefresh');
            $(document).trigger('showSelectedAll');
            return true;
        },


        checkPlanRows: function(pack_id)
        {
            // get the total count
            var counter = 0;
            var checkedCount = 0;
            var cache = WCC.cache.returnCacheObject();

            for (var k in cache)
            {
                if (cache[k]['pack_id'] == pack_id)
                {
                     counter++;
                     if (cache[k]['checked'] == true)
                     {
                         checkedCount++;
                     }
                }
            }

            if (checkedCount > 0 && checkedCount == counter)
            {
                for (var k in cache)
                {
                    if (cache[k]['pack_id'] == pack_id)
                    {
                         WCC.cache.setAttribute(cache[k].realName, 'checked', false);
                    }
                }
            }
            else
            {
                for (var k in cache)
                {
                    if (cache[k]['pack_id'] == pack_id)
                    {
                         WCC.cache.setAttribute(cache[k].realName, 'checked', true);
                    }
                }
            }

            $(document).trigger('infoRowRefresh');
        },



        /**
         * LAYOUT ALERT HANDLING STUFF!!!
         */



        /**
         * Start a new alert counter
         *
         * @return int 0
         */
        newAlertCount: function()
        {
            alertCountArray = [];
            return 0;
        },


        /**
         * Increment the alert count
         *
         * @param string thing
         * @return int numbetr of alerts
         */
        incrementAlertCount: function(thing)
        {
            if (jQuery.inArray(thing, alertCountArray) === -1)
            {
                alertCountArray[alertCountArray.length] = thing;
            }

            return alertCountArray.length;
        },


        /**
         * Get the alert count
         *
         * @return int number of alerts
         */
        getAlertCount: function()
        {
            return alertCountArray.length;
        },


        /**
         * OTHER STUFF!
         */

        /**
         * Check to see whether the mouse is currently within the confines of
         * something else...
         *
         * @param object event
         * @param obj thingToCheck in jQuery obj format
         * @return boolean yes or no?
         */
        checkWithinConfines: function(event, thingToCheck)
        {
            var thingToCheckOffset = thingToCheck.offset();

            if (event.pageY <  thingToCheckOffset.top)
            {
                return false;
            }

            if (event.pageY > (thingToCheckOffset.top + thingToCheck.height()) )
            {
                return false;
            }


            if (event.pageX <  thingToCheckOffset.left)
            {
                return false;
            }

            if (event.pageX >  thingToCheckOffset.left + thingToCheck.width() )
            {
                return false;
            }

            return true;
        },


        /**
         * Position the no account stuff in the right place
         * ... now it's just an alias of positionMiniNoAccountsArea
         *
         */
        positionNoAccountsArea: function(leaveHeader)
        {
            this.positionMiniNoAccountsArea();

            /**
            if (leaveHeader == true)
            {
                 $('#no-account-owned').height(310);
                 $('#no-account-owned').css('top', '68px');
            }**/
        },

        sizeToUxHeader: function()
        {
        	var htmlWidth = $("html").width();
            var containerWidth = $(".container").width();
//            $(".main-container").css('width',containerWidth);
//            $(".main-container").css('left', (htmlWidth-containerWidth)/2 );
//            $(".main-container").css('padding-left', 15 );
//            $(".main-container").css('padding-right', 32 );
        },

        /**
         * This is the real deal
         */
        positionMiniNoAccountsArea: function()
        {
            var mainContainer =  $('#main-container');
            var infoWidth = $('#infoTable').width();
            var infoHeight = $('#infoTable').height() + 3;

            var mainContainerHeight = mainContainer.height();
            var mainContainerOffset = mainContainer.offset();

            //$('#no-account-owned').css('top', '75px');
            //$('#no-account-owned').css('left', '1px');
            //$('#no-account-owned').width(infoWidth-1);
            //$('#no-account-owned').height(infoHeight -9 );

            var obj = {};
            obj.top = mainContainerOffset.top + 200;
            obj.left = (infoWidth/2) - 318 + 40;

            //$('#no-account-owned-message').offset(obj);
        },


        /**
         * Basic incoming ajax data sanity check
         *
         * @param data object data
         * @return boolean
         */
        checkData: function (data)
        {

            if (data.error !== undefined)
            {
                return false;
            }

            //if you got a session=='false' that means the predispatch says you aint logged in
            if (data.session && data.session == 'false') {
            	window.location.reload();
            }

            return true;
        },


        /**
         * Basic error handling for data stuff
         *
         * @param obj error data
         * @return boolean true
         */
        handleError: function (data)
        {

            return true;
        },


        /**
         * Validate password according to password rules
         *
         * @param string passwordInput1
         * @param string passwordInput2
         * @return string or boolean
         */
        validatePassword: function (passwordInput1, passwordInput2)
        {
            if (passwordInput1.length < 5)
            {
                return BRAVO.Translate._("WCC_MAIN_ePassword5Characters");
            }
            else if (passwordInput1.length > 32)
            {
                return BRAVO.Translate._("WCC_MAIN_ePassword32Characters");
            }
            else if (passwordInput1.indexOf('"') != -1)
            {
                return BRAVO.Translate._("WCC_MAIN_ePasswordNoQuotes");
            }
            else if (passwordInput1.indexOf("'") != -1)
            {
                return BRAVO.Translate._("WCC_MAIN_ePasswordNoQuotes");
            }
            else if (passwordInput1.indexOf(' ') != -1)
            {
                return BRAVO.Translate._("WCC_MAIN_ePasswordNoSpace");
            }
            else if (passwordInput1 != passwordInput2)
            {
                return BRAVO.Translate._("WCC_MAIN_ePasswordMustMatch");
            }

            return true;
        },


        /**
         * For bulk stuff, we just wanna see if the input is going to be right...
         *
         */
        validateEmailPrefix: function(emailPrefixInput)
        {
            var tmpAddress = emailPrefixInput + '@yourdomain.com';
            return WCC.utils.checkValidEmailAddress(tmpAddress, [], true);
        },


        /**
         * Just your run regular old run of the mill email address
         * validator. Returns true or false. Can validate against an
         * array of valid domains if that's the kinda thing you're into...
         *
         * @param string emailAddress
         * @param array validDomainArray optional...
         * @return boolean
         */
        checkValidEmailAddress: function (emailAddress, validDomainArray, skipDomainCheck)
        {

            if (emailAddress == '')
            {
                return false;
            }

            var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,128})?$/;
            var emailReg = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9\u0000-\uFFFF]+\.)+[a-zA-Z\-\u0000-\uFFFF]{2,}))$/;
            if (!emailReg.test(emailAddress))
            {
                return false;
            }

            if (validDomainArray != undefined && validDomainArray.length>0 && (undefined==skipDomainCheck || skipDomainCheck==false) )
            {
                var splitEmail = emailAddress.split('@');
                if (jQuery.inArray(splitEmail[1], validDomainArray) == -1)
                {
                    return false;
                }
            }

            if (WCC.cache.getByKey(emailAddress) != undefined) {
            	return false;
            } else {
            	return true;
            }

//            eaData = {};
//        	eaData.emailAddress=emailAddress;
//            $.ajax({
//                type: "POST",
//                url: 'ajax/emailexists/',
//                dataType : 'json',
//                data: eaData,
//                async: false,
//                success :  WCC.utils.handleEmailAddressExists,
//                error :  WCC.utils.handleError
//            }).complete(WCC.utils.getEmailAddressExists() );
//
//            if (WCC.utils.getEmailAddressExists()==false) {
//                return true;
//            } else {
//            	return false;
//            }
        },


        /**
         * Handle the situation where the email address exists
         *
         */
        handleEmailAddressExists: function(data) {
        	emailAddressExists = data.exists;
        },


        /**
         * Return the emailAddressExists obj
         */
        getEmailAddressExists: function(data) {
        	return emailAddressExists;
        },

        //attach the generic qtip tooltip handler
        attachToolTip: function(altTag) {
        	$(document).sfTipper({wireup: true,
            	context: self,
                displayContext: parent
        	});
//        	tag = (undefined !== altTag)? altTag : 'alt';
//            require('starfield/sf.tipper', function(){
//            	$('.gdc-tooltip').each(function(key, value){
//            		if($(value).hasClass('sf-tip-ico') ) {
//            			;
//            		} else {
//                		$(value).sfTipper({
//            				title: $(value).attr('title'),
//                			content: $(value).attr(tag),
//                			context:self
//                    	});
//
//            		}
//            	});
//            });
        },


        //close any tooltips
        detatchToolTip: function() {
            $('.sf-tipper-close').click();
        },


        setTrackingURLCode: function (isc, ci){
            if((isc != undefined && isc != null && isc != '') ||
               (ci != undefined && ci != null && ci != '')){

                var trackingurl = document.getElementById('trackingurl');
                var trackinghtml = codeval = codeprefix = codesuffix = '';
                var codestart = codestop = -1;
                if(trackingurl){
                    trackinghtml = trackingurl.innerHTML;
                    if(ci != undefined && ci != null && ci != ''){
                        trackinghtml = parseImageSrcSegment(trackinghtml, 'ci=', ci);
                    }

                    if(isc != undefined && isc != null && isc != ''){
                        trackinghtml = parseImageSrcSegment(trackinghtml, 'isc=', isc);
                    }
                    trackinghtml = parseImageSrcSegment(trackinghtml, 'imagerevision=', Math.floor((Math.random()*1000000) + 1));
                    trackingurl.innerHTML = trackinghtml;
                }
            }
        },

        parseImageSrcSegment: function(str, lookfor, val){
            var newstr = newsrc = srcval = codeval = codeprefix = codesuffix = '';
            var srcstart = srcend = codestart = codestop = -1;
            var lookforlen = lookfor.length;

            srcstart = str.indexOf('src=');
            if(srcstart > -1){
                srcval = str.slice(srcstart + 5);
            }
            srcend = srcval.indexOf('"');
            if(srcend > -1){
                srcval = srcval.slice(0, srcend);
            }

            if(srcval != ''){
                codestart = srcval.indexOf(lookfor);
                if(codestart > -1){
                    codeprefix = srcval.slice(0, codestart + lookforlen);
                    codeval = srcval.slice(codestart + lookforlen);
                    if(codeval != ''){
                        codestop = codeval.indexOf('&');
                    }
                    if(codestop > -1){
                        codesuffix = codeval.slice(codestop);
                    }
                    newsrc = codeprefix + val + codesuffix;
                }else{
                    newsrc = srcval + (srcval.indexOf('?') > -1 ? '&':'?') + lookfor + val;
                }
                newstr = str.replace(srcval, newsrc);
            }else{
                newstr = str;
            }
            return(newstr);
        },
        setCRM: function() {

        	crmStatus = $("#crmStatus").val() == "1" ? true : false ;

        },

        getCRM: function() {
        	if(crmStatus === null) {
        		WCC.utils.setCRM();
        	}
        	return crmStatus;
        },

        promptToMigrate: function(migrateAccount) {
            currentMigrateAccount = migrateAccount;

            WCC.utils.checkMigrate();

            var openLocation = window.location.protocol+ '//' + window.location.host + '/index/passmigrateuser?user='+migrateAccount;

            migrateWindow = window.open(openLocation, 'passMigrate', "location=yes,menubar=yes,toolbar=yes,resizable=yes");
        },

        checkMigrate: function()
        {
            if (currentMigrateAccount == null)
            {
                return false;
            }

            $.ajax({
                type: "POST",
                url: '/ajaxcallback/getmigrated/',
                data: {'emailAddress': currentMigrateAccount},
                dataType : 'json',
                success: WCC.utils.checkMigrateSuccess,
                error: function(){}
            });
        },

        checkMigrateSuccess: function(data)
        {
            if (currentMigrateAccount == null)
            {
                return false;
            }

            if (data.migrationStatus != undefined && data.migrationStatus == true)
            {
                $.ajax({
                    type: "POST",
                    url: '/ajaxcallback/clearmigrated/',
                    data: {'emailAddress': currentMigrateAccount},
                    dataType : 'json',
                    success: function(){},
                    error: function(){}
                });


                if ($('#componentEditAccountDiv').length > 0)
                {
                    WCC.cache.deleteAttribute(currentMigrateAccount, 'emailAccountDataObj');
                    WCC.cache.deleteAttribute(currentMigrateAccount, 'calAccountDataObj');
                    WCC.cache.deleteAttribute(currentMigrateAccount, 'offAccountDataObj');

                    WCC.components.editAccount.closeDialog();

                    setTimeout(function(){WCC.components.editAccount.openFromJSByDisplayName(currentMigrateAccount);currentMigrateAccount = null;}, 100);
                }

                return;
            }

            setTimeout(function(){WCC.utils.checkMigrate()}, 500);

        },


        addSpacesToCommas: function (inputText)
        {
            var outputText = inputText.replace(/,/g, ', ' );
            return outputText;
        },


        doGrowl: function (inputIcon, inputTitle, inputContent)
        {
            require("starfield/sf.growl", function() {
                $("<div />").sfGrowl({ fadetime: 10000, icon: inputIcon, title: inputTitle, content: inputContent  });
                    setTimeout(function(){
                    	var mainPosition = $("#main-container").position();
                    	var myPosition = $('#sf_growl').position();
                        if(mainPosition.top>myPosition.top) {
                            $('#sf_growl').offset({'top': mainPosition.top });
                        }

                        $('#sf_growl').css('z-index', 13013);
                        $('.sf_growl_content').css('word-wrap', 'break-word');
                    }, 100);

                });

        },

        centerThisDialog: function(dialogDivId)
        {
        	var mainPosition = $("#main-container").position();
        	var myPosition = $("#"+dialogDivId).parent().position();

            var parentWidth = $('#'+dialogDivId).parent().parent().width() ;
            var myWidth = $('#'+dialogDivId).parent().width() ;
            var unusedSpace = parentWidth - myWidth;
            var position = unusedSpace /2 ;
            if(!$('#'+dialogDivId).parent().is('body') ) {
                $('#'+dialogDivId).parent().offset({'left': position });
                if(undefined != mainPosition && undefined != myPosition && mainPosition.top>myPosition.top) {
                    $('#'+dialogDivId).parent().offset({'top': mainPosition.top });
                }
            }
            $('body').offset({'left': 0 });

        },

        utf8Address: function (inputString) {
        	var parts = inputString.split('@');
        	var redo = new Array();
        	$.each(parts, function(index,value) {
				redo.push(punycode.toUnicode(value));
        	});
        	var rString = redo.join('@');
        	return rString;
        },

        asciiAddress: function (inputString) {
        	var parts = inputString.split('@');
        	var redo = new Array();
        	$.each(parts, function(index,value) {
				redo.push(punycode.toASCII(value));
        	});
        	var rString = redo.join('@');
        	return rString;
        },

        utf8MultiAddress: function (inputString) {
        	try {
        		var rString = null;
	        	var parts = inputString.split(',');
	        	var redo = new Array();
	        	$.each(parts, function(index,value) {
					redo.push(WCC.utils.utf8Address(value));
	        	});
	        	rString = redo.join(',');
        	} catch (e) {
            	rString = inputString;
        	}

        	return rString;
        },

        toUtf8: function(value)
        {
        	return punycode.toUnicode(value);
        }







    };
}());

////////////////////////////
/**
 * Handle limiting text fields
 *
 */

(function($){
    $.fn.extend({
        limit: function(limit,element) {

			var interval, f;
			var self = $(this);

			$(this).focus(function(){
				interval = window.setInterval(substring,100);
			});

			$(this).blur(function(){
				clearInterval(interval);
				substring();
			});

			substringFunction = "function substring(){ var val = $(self).val();var length = val.length;if(length > limit){$(self).val($(self).val().substring(0,limit));}";
			if(typeof element != 'undefined')
				substringFunction += "if($(element).html() != limit-length){$(element).html((limit-length<=0)?'0':limit-length);}";

			substringFunction += "}";

			eval(substringFunction);



			substring();

       }
   });
})(jQuery);





///////////////////////////

(function($)
{

    jQuery.mlp = {x:0,y:0}; // Mouse Last Position
    $(document).mousemove(function(e)
    {
        jQuery.mlp = {x:e.pageX,y:e.pageY};
    });

    function checkNans(value)
    {
        if(isNaN(value)){
            return 0;
        } else {
            return value;
        }
    }

    $.fn.ismouseover = function(overThis)
    {
    var result;
    this.eq(0).each(function()
    {
        var offSet = $(this).offset();
        var w = Number($(this).width())
        + checkNans(Number($(this).css("padding-left").replace("px","")))
        + checkNans(Number($(this).css("padding-right").replace("px","")))
        + checkNans(Number($(this).css("border-right-width").replace("px","")))
        + checkNans(Number($(this).css("border-left-width").replace("px",""))) ;
        var h = Number($(this).height())
        + checkNans(Number($(this).css("padding-top").replace("px","")))
        + checkNans(Number($(this).css("padding-bottom").replace("px","")))
        + checkNans(Number($(this).css("border-top-width").replace("px","")))
        + checkNans(Number($(this).css("border-bottom-width").replace("px","")));
        if(offSet.left<jQuery.mlp.x && offSet.left + w > jQuery.mlp.x && offSet.top<jQuery.mlp.y &&  offSet.top + h > jQuery.mlp.y)
        {
            result = true;
        }
        else
        {
            result = false;
        }
    });

    return result;
    };


})(jQuery);



/**
 * jQuery JSON Plugin
 * version: 2.3 (2011-09-17)
 *
 * This document is licensed as free software under the terms of the
 * MIT License: http://www.opensource.org/licenses/mit-license.php
 *
 * Brantley Harris wrote this plugin. It is based somewhat on the JSON.org
 * website's http://www.json.org/json2.js, which proclaims:
 * "NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.", a sentiment that
 * I uphold.
 *
 * It is also influenced heavily by MochiKit's serializeJSON, which is
 * copyrighted 2005 by Bob Ippolito.
 */

(function( $ ) {

	var	escapeable = /["\\\x00-\x1f\x7f-\x9f]/g,
		meta = {
			'\b': '\\b',
			'\t': '\\t',
			'\n': '\\n',
			'\f': '\\f',
			'\r': '\\r',
			'"' : '\\"',
			'\\': '\\\\'
		};

	/**
	 * jQuery.toJSON
	 * Converts the given argument into a JSON respresentation.
	 *
	 * @param o {Mixed} The json-serializble *thing* to be converted
	 *
	 * If an object has a toJSON prototype, that will be used to get the representation.
	 * Non-integer/string keys are skipped in the object, as are keys that point to a
	 * function.
	 *
	 */
	$.toJSON = typeof JSON === 'object' && JSON.stringify
		? JSON.stringify
		: function( o ) {

		if ( o === null ) {
			return 'null';
		}

		var type = typeof o;

		if ( type === 'undefined' ) {
			return undefined;
		}
		if ( type === 'number' || type === 'boolean' ) {
			return '' + o;
		}
		if ( type === 'string') {
			return $.quoteString( o );
		}
		if ( type === 'object' ) {
			if ( typeof o.toJSON === 'function' ) {
				return $.toJSON( o.toJSON() );
			}
			if ( o.constructor === Date ) {
				var	month = o.getUTCMonth() + 1,
					day = o.getUTCDate(),
					year = o.getUTCFullYear(),
					hours = o.getUTCHours(),
					minutes = o.getUTCMinutes(),
					seconds = o.getUTCSeconds(),
					milli = o.getUTCMilliseconds();

				if ( month < 10 ) {
					month = '0' + month;
				}
				if ( day < 10 ) {
					day = '0' + day;
				}
				if ( hours < 10 ) {
					hours = '0' + hours;
				}
				if ( minutes < 10 ) {
					minutes = '0' + minutes;
				}
				if ( seconds < 10 ) {
					seconds = '0' + seconds;
				}
				if ( milli < 100 ) {
					milli = '0' + milli;
				}
				if ( milli < 10 ) {
					milli = '0' + milli;
				}
				return '"' + year + '-' + month + '-' + day + 'T' +
					hours + ':' + minutes + ':' + seconds +
					'.' + milli + 'Z"';
			}
			if ( o.constructor === Array ) {
				var ret = [];
				for ( var i = 0; i < o.length; i++ ) {
					ret.push( $.toJSON( o[i] ) || 'null' );
				}
				return '[' + ret.join(',') + ']';
			}
			var	name,
				val,
				pairs = [];
			for ( var k in o ) {
				type = typeof k;
				if ( type === 'number' ) {
					name = '"' + k + '"';
				} else if (type === 'string') {
					name = $.quoteString(k);
				} else {
					// Keys must be numerical or string. Skip others
					continue;
				}
				type = typeof o[k];

				if ( type === 'function' || type === 'undefined' ) {
					// Invalid values like these return undefined
					// from toJSON, however those object members
					// shouldn't be included in the JSON string at all.
					continue;
				}
				val = $.toJSON( o[k] );
				pairs.push( name + ':' + val );
			}
			return '{' + pairs.join( ',' ) + '}';
		}
	};

	/**
	 * jQuery.evalJSON
	 * Evaluates a given piece of json source.
	 *
	 * @param src {String}
	 */
	$.evalJSON = typeof JSON === 'object' && JSON.parse
		? JSON.parse
		: function( src ) {
		return eval('(' + src + ')');
	};

	/**
	 * jQuery.secureEvalJSON
	 * Evals JSON in a way that is *more* secure.
	 *
	 * @param src {String}
	 */
	$.secureEvalJSON = typeof JSON === 'object' && JSON.parse
		? JSON.parse
		: function( src ) {

		var filtered =
			src
			.replace( /\\["\\\/bfnrtu]/g, '@' )
			.replace( /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
			.replace( /(?:^|:|,)(?:\s*\[)+/g, '');

		if ( /^[\],:{}\s]*$/.test( filtered ) ) {
			return eval( '(' + src + ')' );
		} else {
			throw new SyntaxError( 'Error parsing JSON, source is not valid.' );
		}
	};

	/**
	 * jQuery.quoteString
	 * Returns a string-repr of a string, escaping quotes intelligently.
	 * Mostly a support function for toJSON.
	 * Examples:
	 * >>> jQuery.quoteString('apple')
	 * "apple"
	 *
	 * >>> jQuery.quoteString('"Where are we going?", she asked.')
	 * "\"Where are we going?\", she asked."
	 */
	$.quoteString = function( string ) {
		if ( string.match( escapeable ) ) {
			return '"' + string.replace( escapeable, function( a ) {
				var c = meta[a];
				if ( typeof c === 'string' ) {
					return c;
				}
				c = a.charCodeAt();
				return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
			}) + '"';
		}
		return '"' + string + '"';
	};

})( jQuery );



// keys shim for older IEs... thanks mozilla!
if(!Object.keys) Object.keys = function(o)
{
    if (o !== Object(o))
        throw new TypeError('Object.keys called on non-object');
    var ret=[],p;
    for(p in o) if(Object.prototype.hasOwnProperty.call(o,p)) ret.push(p);
    return ret;
};






/*!
 * jQuery throttle / debounce - v1.1 - 3/7/2010
 * http://benalman.com/projects/jquery-throttle-debounce-plugin/
 *
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */

// Script: jQuery throttle / debounce: Sometimes, less is more!
//
// *Version: 1.1, Last updated: 3/7/2010*
//
// Project Home - http://benalman.com/projects/jquery-throttle-debounce-plugin/
// GitHub       - http://github.com/cowboy/jquery-throttle-debounce/
// Source       - http://github.com/cowboy/jquery-throttle-debounce/raw/master/jquery.ba-throttle-debounce.js
// (Minified)   - http://github.com/cowboy/jquery-throttle-debounce/raw/master/jquery.ba-throttle-debounce.min.js (0.7kb)
//
// About: License
//
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
//
// About: Examples
//
// These working examples, complete with fully commented code, illustrate a few
// ways in which this plugin can be used.
//
// Throttle - http://benalman.com/code/projects/jquery-throttle-debounce/examples/throttle/
// Debounce - http://benalman.com/code/projects/jquery-throttle-debounce/examples/debounce/
//
// About: Support and Testing
//
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
//
// jQuery Versions - none, 1.3.2, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-3.6, Safari 3-4, Chrome 4-5, Opera 9.6-10.1.
// Unit Tests      - http://benalman.com/code/projects/jquery-throttle-debounce/unit/
//
// About: Release History
//
// 1.1 - (3/7/2010) Fixed a bug in <jQuery.throttle> where trailing callbacks
//       executed later than they should. Reworked a fair amount of internal
//       logic as well.
// 1.0 - (3/6/2010) Initial release as a stand-alone project. Migrated over
//       from jquery-misc repo v0.4 to jquery-throttle repo v1.0, added the
//       no_trailing throttle parameter and debounce functionality.
//
// Topic: Note for non-jQuery users
//
// jQuery isn't actually required for this plugin, because nothing internal
// uses any jQuery methods or properties. jQuery is just used as a namespace
// under which these methods can exist.
//
// Since jQuery isn't actually required for this plugin, if jQuery doesn't exist
// when this plugin is loaded, the method described below will be created in
// the `Cowboy` namespace. Usage will be exactly the same, but instead of
// $.method() or jQuery.method(), you'll need to use Cowboy.method().

(function(window,undefined){
  '$:nomunge'; // Used by YUI compressor.

  // Since jQuery really isn't required for this plugin, use `jQuery` as the
  // namespace only if it already exists, otherwise use the `Cowboy` namespace,
  // creating it if necessary.
  var $ = window.jQuery || window.Cowboy || ( window.Cowboy = {} ),

    // Internal method reference.
    jq_throttle;

  // Method: jQuery.throttle
  //
  // Throttle execution of a function. Especially useful for rate limiting
  // execution of handlers on events like resize and scroll. If you want to
  // rate-limit execution of a function to a single time, see the
  // <jQuery.debounce> method.
  //
  // In this visualization, | is a throttled-function call and X is the actual
  // callback execution:
  //
  // > Throttled with `no_trailing` specified as false or unspecified:
  // > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
  // > X    X    X    X    X    X        X    X    X    X    X    X
  // >
  // > Throttled with `no_trailing` specified as true:
  // > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
  // > X    X    X    X    X             X    X    X    X    X
  //
  // Usage:
  //
  // > var throttled = jQuery.throttle( delay, [ no_trailing, ] callback );
  // >
  // > jQuery('selector').bind( 'someevent', throttled );
  // > jQuery('selector').unbind( 'someevent', throttled );
  //
  // This also works in jQuery 1.4+:
  //
  // > jQuery('selector').bind( 'someevent', jQuery.throttle( delay, [ no_trailing, ] callback ) );
  // > jQuery('selector').unbind( 'someevent', callback );
  //
  // Arguments:
  //
  //  delay - (Number) A zero-or-greater delay in milliseconds. For event
  //    callbacks, values around 100 or 250 (or even higher) are most useful.
  //  no_trailing - (Boolean) Optional, defaults to false. If no_trailing is
  //    true, callback will only execute every `delay` milliseconds while the
  //    throttled-function is being called. If no_trailing is false or
  //    unspecified, callback will be executed one final time after the last
  //    throttled-function call. (After the throttled-function has not been
  //    called for `delay` milliseconds, the internal counter is reset)
  //  callback - (Function) A function to be executed after delay milliseconds.
  //    The `this` context and all arguments are passed through, as-is, to
  //    `callback` when the throttled-function is executed.
  //
  // Returns:
  //
  //  (Function) A new, throttled, function.

  $.throttle = jq_throttle = function( delay, no_trailing, callback, debounce_mode ) {
    // After wrapper has stopped being called, this timeout ensures that
    // `callback` is executed at the proper times in `throttle` and `end`
    // debounce modes.
    var timeout_id,

      // Keep track of the last time `callback` was executed.
      last_exec = 0;

    // `no_trailing` defaults to falsy.
    if ( typeof no_trailing !== 'boolean' ) {
      debounce_mode = callback;
      callback = no_trailing;
      no_trailing = undefined;
    }

    // The `wrapper` function encapsulates all of the throttling / debouncing
    // functionality and when executed will limit the rate at which `callback`
    // is executed.
    function wrapper() {
      var that = this,
        elapsed = +new Date() - last_exec,
        args = arguments;

      // Execute `callback` and update the `last_exec` timestamp.
      function exec() {
        last_exec = +new Date();
        callback.apply( that, args );
      };

      // If `debounce_mode` is true (at_begin) this is used to clear the flag
      // to allow future `callback` executions.
      function clear() {
        timeout_id = undefined;
      };

      if ( debounce_mode && !timeout_id ) {
        // Since `wrapper` is being called for the first time and
        // `debounce_mode` is true (at_begin), execute `callback`.
        exec();
      }

      // Clear any existing timeout.
      timeout_id && clearTimeout( timeout_id );

      if ( debounce_mode === undefined && elapsed > delay ) {
        // In throttle mode, if `delay` time has been exceeded, execute
        // `callback`.
        exec();

      } else if ( no_trailing !== true ) {
        // In trailing throttle mode, since `delay` time has not been
        // exceeded, schedule `callback` to execute `delay` ms after most
        // recent execution.
        //
        // If `debounce_mode` is true (at_begin), schedule `clear` to execute
        // after `delay` ms.
        //
        // If `debounce_mode` is false (at end), schedule `callback` to
        // execute after `delay` ms.
        timeout_id = setTimeout( debounce_mode ? clear : exec, debounce_mode === undefined ? delay - elapsed : delay );
      }
    };

    // Set the guid of `wrapper` function to the same of original callback, so
    // it can be removed in jQuery 1.4+ .unbind or .die by using the original
    // callback as a reference.
    if ( $.guid ) {
      wrapper.guid = callback.guid = callback.guid || $.guid++;
    }

    // Return the wrapper function.
    return wrapper;
  };

  // Method: jQuery.debounce
  //
  // Debounce execution of a function. Debouncing, unlike throttling,
  // guarantees that a function is only executed a single time, either at the
  // very beginning of a series of calls, or at the very end. If you want to
  // simply rate-limit execution of a function, see the <jQuery.throttle>
  // method.
  //
  // In this visualization, | is a debounced-function call and X is the actual
  // callback execution:
  //
  // > Debounced with `at_begin` specified as false or unspecified:
  // > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
  // >                          X                                 X
  // >
  // > Debounced with `at_begin` specified as true:
  // > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
  // > X                                 X
  //
  // Usage:
  //
  // > var debounced = jQuery.debounce( delay, [ at_begin, ] callback );
  // >
  // > jQuery('selector').bind( 'someevent', debounced );
  // > jQuery('selector').unbind( 'someevent', debounced );
  //
  // This also works in jQuery 1.4+:
  //
  // > jQuery('selector').bind( 'someevent', jQuery.debounce( delay, [ at_begin, ] callback ) );
  // > jQuery('selector').unbind( 'someevent', callback );
  //
  // Arguments:
  //
  //  delay - (Number) A zero-or-greater delay in milliseconds. For event
  //    callbacks, values around 100 or 250 (or even higher) are most useful.
  //  at_begin - (Boolean) Optional, defaults to false. If at_begin is false or
  //    unspecified, callback will only be executed `delay` milliseconds after
  //    the last debounced-function call. If at_begin is true, callback will be
  //    executed only at the first debounced-function call. (After the
  //    throttled-function has not been called for `delay` milliseconds, the
  //    internal counter is reset)
  //  callback - (Function) A function to be executed after delay milliseconds.
  //    The `this` context and all arguments are passed through, as-is, to
  //    `callback` when the debounced-function is executed.
  //
  // Returns:
  //
  //  (Function) A new, debounced, function.

  $.debounce = function( delay, at_begin, callback ) {
    return callback === undefined
      ? jq_throttle( delay, at_begin, false )
      : jq_throttle( delay, callback, at_begin !== false );
  };

})(this);




// -----------------------------------------------------------------------
// Eros Fratini - eros@recoding.it
// jqprint 0.3
//
// - 19/06/2009 - some new implementations, added Opera support
// - 11/05/2009 - first sketch
//
// Printing plug-in for jQuery, evolution of jPrintArea: http://plugins.jquery.com/project/jPrintArea
// requires jQuery 1.3.x
//
// Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//------------------------------------------------------------------------

(function($) {
    var opt;

    $.fn.jqprint = function (options) {
        opt = $.extend({}, $.fn.jqprint.defaults, options);

        var $element = (this instanceof jQuery) ? this : $(this);

        if (opt.operaSupport && $.browser.opera)
        {
            var tab = window.open("","jqPrint-preview");
            tab.document.open();

            var doc = tab.document;
        }
        else
        {
            var $iframe = $("<iframe  />");

            if (!opt.debug) { $iframe.css({ position: "absolute", width: "0px", height: "0px", left: "-600px", top: "-600px" }); }

            $iframe.appendTo("body");
            var doc = $iframe[0].contentWindow.document;
        }

        if (opt.importCSS)
        {
            if ($("link[media=print]").length > 0)
            {
                $("link[media=print]").each( function() {
                    doc.write("<link type='text/css' rel='stylesheet' href='" + $(this).attr("href") + "' media='print' />");
                });
            }
            else
            {
                $("link").each( function() {
                    doc.write("<link type='text/css' rel='stylesheet' href='" + $(this).attr("href") + "' />");
                });
            }
        }

        if (opt.printContainer) { doc.write($element.outer()); }
        else { $element.each( function() { doc.write($(this).html()); }); }

        doc.close();

        (opt.operaSupport && $.browser.opera ? tab : $iframe[0].contentWindow).focus();
        setTimeout( function() { (opt.operaSupport && $.browser.opera ? tab : $iframe[0].contentWindow).print(); if (tab) { tab.close(); } }, 1000);
    }

    $.fn.jqprint.defaults = {
        debug: false,
        importCSS: true,
        printContainer: true,
        operaSupport: true
    };

    // Thanks to 9__, found at http://users.livejournal.com/9__/380664.html
    jQuery.fn.outer = function() {
      return $($('<div></div>').html(this.clone())).html();
    }
})(jQuery);

// +LICENCE
/* 
 * Obtained from: http://jacwright.com/projects/javascript/date_format/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// Simulates PHP's date function
// -LICENCE
Date.prototype.format = function(format) {
    var returnStr = '';
    var replace = Date.replaceChars;
    for (var i = 0; i < format.length; i++) {       var curChar = format.charAt(i);         if (i - 1 >= 0 && format.charAt(i - 1) == "\\") {
            returnStr += curChar;
        }
        else if (replace[curChar]) {
            returnStr += replace[curChar].call(this);
        } else if (curChar != "\\"){
            returnStr += curChar;
        }
    }
    return returnStr;
};

Date.replaceChars = {
    shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    longMonths: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    longDays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],

    // Day
    d: function() { return (this.getDate() < 10 ? '0' : '') + this.getDate(); },
    D: function() { return Date.replaceChars.shortDays[this.getDay()]; },
    j: function() { return this.getDate(); },
    l: function() { return Date.replaceChars.longDays[this.getDay()]; },
    N: function() { return this.getDay() + 1; },
    S: function() { return (this.getDate() % 10 == 1 && this.getDate() != 11 ? 'st' : (this.getDate() % 10 == 2 && this.getDate() != 12 ? 'nd' : (this.getDate() % 10 == 3 && this.getDate() != 13 ? 'rd' : 'th'))); },
    w: function() { return this.getDay(); },
    z: function() { var d = new Date(this.getFullYear(),0,1); return Math.ceil((this - d) / 86400000); }, // Fixed now
    // Week
    W: function() { var d = new Date(this.getFullYear(), 0, 1); return Math.ceil((((this - d) / 86400000) + d.getDay() + 1) / 7); }, // Fixed now
    // Month
    F: function() { return Date.replaceChars.longMonths[this.getMonth()]; },
    m: function() { return (this.getMonth() < 9 ? '0' : '') + (this.getMonth() + 1); },
    M: function() { return Date.replaceChars.shortMonths[this.getMonth()]; },
    n: function() { return this.getMonth() + 1; },
    t: function() { var d = new Date(); return new Date(d.getFullYear(), d.getMonth(), 0).getDate(); }, // Fixed now, gets #days of date
    // Year
    L: function() { var year = this.getFullYear(); return (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)); },   // Fixed now
    o: function() { var d  = new Date(this.valueOf());  d.setDate(d.getDate() - ((this.getDay() + 6) % 7) + 3); return d.getFullYear();}, //Fixed now
    Y: function() { return this.getFullYear(); },
    y: function() { return ('' + this.getFullYear()).substr(2); },
    // Time
    a: function() { return this.getHours() < 12 ? 'am' : 'pm'; },
    A: function() { return this.getHours() < 12 ? 'AM' : 'PM'; },
    B: function() { return Math.floor((((this.getUTCHours() + 1) % 24) + this.getUTCMinutes() / 60 + this.getUTCSeconds() / 3600) * 1000 / 24); }, // Fixed now
    g: function() { return this.getHours() % 12 || 12; },
    G: function() { return this.getHours(); },
    h: function() { return ((this.getHours() % 12 || 12) < 10 ? '0' : '') + (this.getHours() % 12 || 12); },
    H: function() { return (this.getHours() < 10 ? '0' : '') + this.getHours(); },
    i: function() { return (this.getMinutes() < 10 ? '0' : '') + this.getMinutes(); },
    s: function() { return (this.getSeconds() < 10 ? '0' : '') + this.getSeconds(); },
    u: function() { var m = this.getMilliseconds(); return (m < 10 ? '00' : (m < 100 ?
'0' : '')) + m; },
    // Timezone
    e: function() { return "Not Yet Supported"; },
    I: function() { return "Not Yet Supported"; },
    O: function() { return (-this.getTimezoneOffset() < 0 ? '-' : '+') + (Math.abs(this.getTimezoneOffset() / 60) < 10 ? '0' : '') + (Math.abs(this.getTimezoneOffset() / 60)) + '00'; },
    P: function() { return (-this.getTimezoneOffset() < 0 ? '-' : '+') + (Math.abs(this.getTimezoneOffset() / 60) < 10 ? '0' : '') + (Math.abs(this.getTimezoneOffset() / 60)) + ':00'; }, // Fixed now
    T: function() { var m = this.getMonth(); this.setMonth(0); var result = this.toTimeString().replace(/^.+ \(?([^\)]+)\)?$/, '$1'); this.setMonth(m); return result;},
    Z: function() { return -this.getTimezoneOffset() * 60; },
    // Full Date/Time
    c: function() { return this.format("Y-m-d\\TH:i:sP"); }, // Fixed now
    r: function() { return this.toString(); },
    U: function() { return this.getTime() / 1000; }
};
// +LICENCE
/*!
 * jQuery UI @VERSION
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */
// -LICENCE
(function( $, undefined ) {

// prevent duplicate loading
// this is only a problem because we proxy existing functions
// and we don't want to double proxy them
$.ui = $.ui || {};
if ( $.ui.version ) {
  return;
}

$.extend( $.ui, {
  version: "@VERSION",

  keyCode: {
    ALT: 18,
    BACKSPACE: 8,
    CAPS_LOCK: 20,
    COMMA: 188,
    COMMAND: 91,
    COMMAND_LEFT: 91, // COMMAND
    COMMAND_RIGHT: 93,
    CONTROL: 17,
    DELETE: 46,
    DOWN: 40,
    END: 35,
    ENTER: 13,
    ESCAPE: 27,
    HOME: 36,
    INSERT: 45,
    LEFT: 37,
    MENU: 93, // COMMAND_RIGHT
    NUMPAD_ADD: 107,
    NUMPAD_DECIMAL: 110,
    NUMPAD_DIVIDE: 111,
    NUMPAD_ENTER: 108,
    NUMPAD_MULTIPLY: 106,
    NUMPAD_SUBTRACT: 109,
    PAGE_DOWN: 34,
    PAGE_UP: 33,
    PERIOD: 190,
    RIGHT: 39,
    SHIFT: 16,
    SPACE: 32,
    TAB: 9,
    UP: 38,
    WINDOWS: 91 // COMMAND
  }
});

// plugins
$.fn.extend({
  propAttr: $.fn.prop || $.fn.attr,

  _focus: $.fn.focus,
  focus: function( delay, fn ) {
    return typeof delay === "number" ?
      this.each(function() {
        var elem = this;
        setTimeout(function() {
          $( elem ).focus();
          if ( fn ) {
            fn.call( elem );
          }
        }, delay );
      }) :
      this._focus.apply( this, arguments );
  },

  scrollParent: function() {
    var scrollParent;
    if (($.browser.msie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
      scrollParent = this.parents().filter(function() {
        return (/(relative|absolute|fixed)/).test($.curCSS(this,'position',1)) && (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
      }).eq(0);
    } else {
      scrollParent = this.parents().filter(function() {
        return (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
      }).eq(0);
    }

    return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
  },

  zIndex: function( zIndex ) {
    if ( zIndex !== undefined ) {
      return this.css( "zIndex", zIndex );
    }

    if ( this.length ) {
      var elem = $( this[ 0 ] ), position, value;
      while ( elem.length && elem[ 0 ] !== document ) {
        // Ignore z-index if position is set to a value where z-index is ignored by the browser
        // This makes behavior of this function consistent across browsers
        // WebKit always returns auto if the element is positioned
        position = elem.css( "position" );
        if ( position === "absolute" || position === "relative" || position === "fixed" ) {
          // IE returns 0 when zIndex is not specified
          // other browsers return a string
          // we ignore the case of nested elements with an explicit value of 0
          // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
          value = parseInt( elem.css( "zIndex" ), 10 );
          if ( !isNaN( value ) && value !== 0 ) {
            return value;
          }
        }
        elem = elem.parent();
      }
    }

    return 0;
  },

  disableSelection: function() {
    return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
      ".ui-disableSelection", function( event ) {
        event.preventDefault();
      });
  },

  enableSelection: function() {
    return this.unbind( ".ui-disableSelection" );
  }
});

$.each( [ "Width", "Height" ], function( i, name ) {
  var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
    type = name.toLowerCase(),
    orig = {
      innerWidth: $.fn.innerWidth,
      innerHeight: $.fn.innerHeight,
      outerWidth: $.fn.outerWidth,
      outerHeight: $.fn.outerHeight
    };

  function reduce( elem, size, border, margin ) {
    $.each( side, function() {
      size -= parseFloat( $.curCSS( elem, "padding" + this, true) ) || 0;
      if ( border ) {
        size -= parseFloat( $.curCSS( elem, "border" + this + "Width", true) ) || 0;
      }
      if ( margin ) {
        size -= parseFloat( $.curCSS( elem, "margin" + this, true) ) || 0;
      }
    });
    return size;
  }

  $.fn[ "inner" + name ] = function( size ) {
    if ( size === undefined ) {
      return orig[ "inner" + name ].call( this );
    }

    return this.each(function() {
      $( this ).css( type, reduce( this, size ) + "px" );
    });
  };

  $.fn[ "outer" + name] = function( size, margin ) {
    if ( typeof size !== "number" ) {
      return orig[ "outer" + name ].call( this, size );
    }

    return this.each(function() {
      $( this).css( type, reduce( this, size, true, margin ) + "px" );
    });
  };
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
  var nodeName = element.nodeName.toLowerCase();
  if ( "area" === nodeName ) {
    var map = element.parentNode,
      mapName = map.name,
      img;
    if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
      return false;
    }
    img = $( "img[usemap=#" + mapName + "]" )[0];
    return !!img && visible( img );
  }
  return ( /input|select|textarea|button|object/.test( nodeName )
    ? !element.disabled
    : "a" == nodeName
      ? element.href || isTabIndexNotNaN
      : isTabIndexNotNaN)
    // the element and all of its ancestors must be visible
    && visible( element );
}

function visible( element ) {
  return !$( element ).parents().andSelf().filter(function() {
    return $.curCSS( this, "visibility" ) === "hidden" ||
      $.expr.filters.hidden( this );
  }).length;
}

$.extend( $.expr[ ":" ], {
  data: function( elem, i, match ) {
    return !!$.data( elem, match[ 3 ] );
  },

  focusable: function( element ) {
    return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
  },

  tabbable: function( element ) {
    var tabIndex = $.attr( element, "tabindex" ),
      isTabIndexNaN = isNaN( tabIndex );
    return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
  }
});

// support
$(function() {
  var body = document.body,
    div = body.appendChild( div = document.createElement( "div" ) );

  // access offsetHeight before setting the style to prevent a layout bug
  // in IE 9 which causes the elemnt to continue to take up space even
  // after it is removed from the DOM (#8026)
  div.offsetHeight;

  $.extend( div.style, {
    minHeight: "100px",
    height: "auto",
    padding: 0,
    borderWidth: 0
  });

  $.support.minHeight = div.offsetHeight === 100;
  $.support.selectstart = "onselectstart" in div;

  // set display to none to avoid a layout bug in IE
  // http://dev.jquery.com/ticket/4014
  body.removeChild( div ).style.display = "none";
});





// deprecated
$.extend( $.ui, {
  // $.ui.plugin is deprecated.  Use the proxy pattern instead.
  plugin: {
    add: function( module, option, set ) {
      var proto = $.ui[ module ].prototype;
      for ( var i in set ) {
        proto.plugins[ i ] = proto.plugins[ i ] || [];
        proto.plugins[ i ].push( [ option, set[ i ] ] );
      }
    },
    call: function( instance, name, args ) {
      var set = instance.plugins[ name ];
      if ( !set || !instance.element[ 0 ].parentNode ) {
        return;
      }
  
      for ( var i = 0; i < set.length; i++ ) {
        if ( instance.options[ set[ i ][ 0 ] ] ) {
          set[ i ][ 1 ].apply( instance.element, args );
        }
      }
    }
  },
  
  // will be deprecated when we switch to jQuery 1.4 - use jQuery.contains()
  contains: function( a, b ) {
    return document.compareDocumentPosition ?
      a.compareDocumentPosition( b ) & 16 :
      a !== b && a.contains( b );
  },
  
  // only used by resizable
  hasScroll: function( el, a ) {
  
    //If overflow is hidden, the element might have extra content, but the user wants to hide it
    if ( $( el ).css( "overflow" ) === "hidden") {
      return false;
    }
  
    var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
      has = false;
  
    if ( el[ scroll ] > 0 ) {
      return true;
    }
  
    // TODO: determine which cases actually cause this to happen
    // if the element doesn't have the scroll set, see if it's possible to
    // set the scroll
    el[ scroll ] = 1;
    has = ( el[ scroll ] > 0 );
    el[ scroll ] = 0;
    return has;
  },
  
  // these are odd functions, fix the API or move into individual plugins
  isOverAxis: function( x, reference, size ) {
    //Determines when x coordinate is over "b" element axis
    return ( x > reference ) && ( x < ( reference + size ) );
  },
  isOver: function( y, x, top, left, height, width ) {
    //Determines when x, y coordinates is over "b" element
    return $.ui.isOverAxis( y, top, height ) && $.ui.isOverAxis( x, left, width );
  }
});

})( jQuery );

// +LICENCE
/*!
 * jQuery UI Widget @VERSION
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */
// -LICENCE
(function( $, undefined ) {

// jQuery 1.4+
if ( $.cleanData ) {
  var _cleanData = $.cleanData;
  $.cleanData = function( elems ) {
    for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
      try {
        $( elem ).triggerHandler( "remove" );
      // http://bugs.jquery.com/ticket/8235
      } catch( e ) {}
    }
    _cleanData( elems );
  };
} else {
  var _remove = $.fn.remove;
  $.fn.remove = function( selector, keepData ) {
    return this.each(function() {
      if ( !keepData ) {
        if ( !selector || $.filter( selector, [ this ] ).length ) {
          $( "*", this ).add( [ this ] ).each(function() {
            try {
              $( this ).triggerHandler( "remove" );
            // http://bugs.jquery.com/ticket/8235
            } catch( e ) {}
          });
        }
      }
      return _remove.call( $(this), selector, keepData );
    });
  };
}

$.widget = function( name, base, prototype ) {
  var namespace = name.split( "." )[ 0 ],
    fullName;
  name = name.split( "." )[ 1 ];
  fullName = namespace + "-" + name;

  if ( !prototype ) {
    prototype = base;
    base = $.Widget;
  }

  // create selector for plugin
  $.expr[ ":" ][ fullName ] = function( elem ) {
    return !!$.data( elem, name );
  };

  $[ namespace ] = $[ namespace ] || {};
  $[ namespace ][ name ] = function( options, element ) {
    // allow instantiation without initializing for simple inheritance
    if ( arguments.length ) {
      this._createWidget( options, element );
    }
  };

  var basePrototype = new base();
  // we need to make the options hash a property directly on the new instance
  // otherwise we'll modify the options hash on the prototype that we're
  // inheriting from
//  $.each( basePrototype, function( key, val ) {
//    if ( $.isPlainObject(val) ) {
//      basePrototype[ key ] = $.extend( {}, val );
//    }
//  });
  basePrototype.options = $.extend( true, {}, basePrototype.options );
  $[ namespace ][ name ].prototype = $.extend( true, basePrototype, {
    namespace: namespace,
    widgetName: name,
    widgetEventPrefix: $[ namespace ][ name ].prototype.widgetEventPrefix || name,
    widgetBaseClass: fullName
  }, prototype );

  $.widget.bridge( name, $[ namespace ][ name ] );
};

$.widget.bridge = function( name, object ) {
  $.fn[ name ] = function( options ) {
    var isMethodCall = typeof options === "string",
      args = Array.prototype.slice.call( arguments, 1 ),
      returnValue = this;

    // allow multiple hashes to be passed on init
    options = !isMethodCall && args.length ?
      $.extend.apply( null, [ true, options ].concat(args) ) :
      options;

    // prevent calls to internal methods
    if ( isMethodCall && options.charAt( 0 ) === "_" ) {
      return returnValue;
    }

    if ( isMethodCall ) {
      this.each(function() {
        var instance = $.data( this, name ),
          methodValue = instance && $.isFunction( instance[options] ) ?
            instance[ options ].apply( instance, args ) :
            instance;
        // TODO: add this back in 1.9 and use $.error() (see #5972)
//        if ( !instance ) {
//          throw "cannot call methods on " + name + " prior to initialization; " +
//            "attempted to call method '" + options + "'";
//        }
//        if ( !$.isFunction( instance[options] ) ) {
//          throw "no such method '" + options + "' for " + name + " widget instance";
//        }
//        var methodValue = instance[ options ].apply( instance, args );
        if ( methodValue !== instance && methodValue !== undefined ) {
          returnValue = methodValue;
          return false;
        }
      });
    } else {
      this.each(function() {
        var instance = $.data( this, name );
        if ( instance ) {
          instance.option( options || {} )._init();
        } else {
          $.data( this, name, new object( options, this ) );
        }
      });
    }

    return returnValue;
  };
};

$.Widget = function( options, element ) {
  // allow instantiation without initializing for simple inheritance
  if ( arguments.length ) {
    this._createWidget( options, element );
  }
};

$.Widget.prototype = {
  widgetName: "widget",
  widgetEventPrefix: "",
  options: {
    disabled: false
  },
  _createWidget: function( options, element ) {
    // $.widget.bridge stores the plugin instance, but we do it anyway
    // so that it's stored even before the _create function runs
    $.data( element, this.widgetName, this );
    this.element = $( element );
    this.options = $.extend( true, {},
      this.options,
      this._getCreateOptions(),
      options );

    var self = this;
    this.element.bind( "remove." + this.widgetName, function() {
      self.destroy();
    });

    this._create();
    this._trigger( "create" );
    this._init();
  },
  _getCreateOptions: function() {
    return $.metadata && $.metadata.get( this.element[0] )[ this.widgetName ];
  },
  _create: function() {},
  _init: function() {},

  destroy: function() {
    this.element
      .unbind( "." + this.widgetName )
      .removeData( this.widgetName );
    this.widget()
      .unbind( "." + this.widgetName )
      .removeAttr( "aria-disabled" )
      .removeClass(
        this.widgetBaseClass + "-disabled " +
        "ui-state-disabled" );
  },

  widget: function() {
    return this.element;
  },

  option: function( key, value ) {
    var options = key;

    if ( arguments.length === 0 ) {
      // don't return a reference to the internal hash
      return $.extend( {}, this.options );
    }

    if  (typeof key === "string" ) {
      if ( value === undefined ) {
        return this.options[ key ];
      }
      options = {};
      options[ key ] = value;
    }

    this._setOptions( options );

    return this;
  },
  _setOptions: function( options ) {
    var self = this;
    $.each( options, function( key, value ) {
      self._setOption( key, value );
    });

    return this;
  },
  _setOption: function( key, value ) {
    this.options[ key ] = value;

    if ( key === "disabled" ) {
      this.widget()
        [ value ? "addClass" : "removeClass"](
          this.widgetBaseClass + "-disabled" + " " +
          "ui-state-disabled" )
        .attr( "aria-disabled", value );
    }

    return this;
  },

  enable: function() {
    return this._setOption( "disabled", false );
  },
  disable: function() {
    return this._setOption( "disabled", true );
  },

  _trigger: function( type, event, data ) {
    var prop, orig,
      callback = this.options[ type ];

    data = data || {};
    event = $.Event( event );
    event.type = ( type === this.widgetEventPrefix ?
      type :
      this.widgetEventPrefix + type ).toLowerCase();
    // the original event may come from any element
    // so we need to reset the target on the new event
    event.target = this.element[ 0 ];

    // copy original event properties over to the new event
    orig = event.originalEvent;
    if ( orig ) {
      for ( prop in orig ) {
        if ( !( prop in event ) ) {
          event[ prop ] = orig[ prop ];
        }
      }
    }

    this.element.trigger( event, data );

    return !( $.isFunction(callback) &&
      callback.call( this.element[0], event, data ) === false ||
      event.isDefaultPrevented() );
  }
};

})( jQuery );

// +LICENCE
/*!
 * jQuery UI Mouse @VERSION
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *  jquery.ui.widget.js
 */
// -LICENCE
(function( $, undefined ) {

var mouseHandled = false;
$( document ).mouseup( function( e ) {
  mouseHandled = false;
});

$.widget("ui.mouse", {
  options: {
    cancel: ':input,option',
    distance: 1,
    delay: 0
  },
  _mouseInit: function() {
    var self = this;

    this.element
      .bind('mousedown.'+this.widgetName, function(event) {
        return self._mouseDown(event);
      })
      .bind('click.'+this.widgetName, function(event) {
        if (true === $.data(event.target, self.widgetName + '.preventClickEvent')) {
            $.removeData(event.target, self.widgetName + '.preventClickEvent');
          event.stopImmediatePropagation();
          return false;
        }
      });

    this.started = false;
  },

  // TODO: make sure destroying one instance of mouse doesn't mess with
  // other instances of mouse
  _mouseDestroy: function() {
    this.element.unbind('.'+this.widgetName);
    $(document)
      .unbind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
      .unbind('mouseup.'+this.widgetName, this._mouseUpDelegate);
  },

  _mouseDown: function(event) {
    // don't let more than one widget handle mouseStart
    if( mouseHandled ) { return };

    // we may have missed mouseup (out of window)
    (this._mouseStarted && this._mouseUp(event));

    this._mouseDownEvent = event;

    var self = this,
      btnIsLeft = (event.which == 1),
      // event.target.nodeName works around a bug in IE 8 with
      // disabled inputs (#7620)
      elIsCancel = (typeof this.options.cancel == "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
    if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
      return true;
    }

    this.mouseDelayMet = !this.options.delay;
    if (!this.mouseDelayMet) {
      this._mouseDelayTimer = setTimeout(function() {
        self.mouseDelayMet = true;
      }, this.options.delay);
    }

    if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
      this._mouseStarted = (this._mouseStart(event) !== false);
      if (!this._mouseStarted) {
        event.preventDefault();
        return true;
      }
    }

    // Click event may never have fired (Gecko & Opera)
    if (true === $.data(event.target, this.widgetName + '.preventClickEvent')) {
      $.removeData(event.target, this.widgetName + '.preventClickEvent');
    }

    // these delegates are required to keep context
    this._mouseMoveDelegate = function(event) {
      return self._mouseMove(event);
    };
    this._mouseUpDelegate = function(event) {
      return self._mouseUp(event);
    };
    $(document)
      .bind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
      .bind('mouseup.'+this.widgetName, this._mouseUpDelegate);

    event.preventDefault();
    
    mouseHandled = true;
    return true;
  },

  _mouseMove: function(event) {
    // IE mouseup check - mouseup happened when mouse was out of window
    if ($.browser.msie && !(document.documentMode >= 9) && !event.button) {
      return this._mouseUp(event);
    }

    if (this._mouseStarted) {
      this._mouseDrag(event);
      return event.preventDefault();
    }

    if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
      this._mouseStarted =
        (this._mouseStart(this._mouseDownEvent, event) !== false);
      (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
    }

    return !this._mouseStarted;
  },

  _mouseUp: function(event) {
    $(document)
      .unbind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
      .unbind('mouseup.'+this.widgetName, this._mouseUpDelegate);

    if (this._mouseStarted) {
      this._mouseStarted = false;

      if (event.target == this._mouseDownEvent.target) {
          $.data(event.target, this.widgetName + '.preventClickEvent', true);
      }

      this._mouseStop(event);
    }

    return false;
  },

  _mouseDistanceMet: function(event) {
    return (Math.max(
        Math.abs(this._mouseDownEvent.pageX - event.pageX),
        Math.abs(this._mouseDownEvent.pageY - event.pageY)
      ) >= this.options.distance
    );
  },

  _mouseDelayMet: function(event) {
    return this.mouseDelayMet;
  },

  // These are placeholder methods, to be overriden by extending plugin
  _mouseStart: function(event) {},
  _mouseDrag: function(event) {},
  _mouseStop: function(event) {},
  _mouseCapture: function(event) { return true; }
});

})(jQuery);

// +LICENCE
/*!
 * jQuery UI Slider @VERSION
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Slider
 *
 * Depends:
 *  jquery.ui.core.js
 *  jquery.ui.mouse.js
 *  jquery.ui.widget.js
 */
// -LICENCE
(function( $, undefined ) {

// number of pages in a slider
// (how many times can you page up/down to go through the whole range)
var numPages = 5;

$.widget( "ui.slider", $.ui.mouse, {

  widgetEventPrefix: "slide",

  options: {
    animate: false,
    distance: 0,
    max: 100,
    min: 0,
    orientation: "horizontal",
    range: false,
    step: 1,
    value: 0,
    values: null
  },

  _create: function() {
    var self = this,
      o = this.options,
      existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
      handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",
      handleCount = ( o.values && o.values.length ) || 1,
      handles = [];

    this._keySliding = false;
    this._mouseSliding = false;
    this._animateOff = true;
    this._handleIndex = null;
    this._detectOrientation();
    this._mouseInit();

    this.element
      .addClass( "ui-slider" +
        " ui-slider-" + this.orientation +
        " ui-widget" +
        " ui-widget-content" +
        " ui-corner-all" +
        ( o.disabled ? " ui-slider-disabled ui-disabled" : "" ) );

    this.range = $([]);

    if ( o.range ) {
      if ( o.range === true ) {
        if ( !o.values ) {
          o.values = [ this._valueMin(), this._valueMin() ];
        }
        if ( o.values.length && o.values.length !== 2 ) {
          o.values = [ o.values[0], o.values[0] ];
        }
      }

      this.range = $( "<div></div>" )
        .appendTo( this.element )
        .addClass( "ui-slider-range" +
        // note: this isn't the most fittingly semantic framework class for this element,
        // but worked best visually with a variety of themes
        " ui-widget-header" + 
        ( ( o.range === "min" || o.range === "max" ) ? " ui-slider-range-" + o.range : "" ) );
    }

    for ( var i = existingHandles.length; i < handleCount; i += 1 ) {
      handles.push( handle );
    }

    this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( self.element ) );

    this.handle = this.handles.eq( 0 );

    this.handles.add( this.range ).filter( "a" )
      .click(function( event ) {
        event.preventDefault();
      })
      .hover(function() {
        if ( !o.disabled ) {
          $( this ).addClass( "ui-state-hover" );
        }
      }, function() {
        $( this ).removeClass( "ui-state-hover" );
      })
      .focus(function() {
        if ( !o.disabled ) {
          $( ".ui-slider .ui-state-focus" ).removeClass( "ui-state-focus" );
          $( this ).addClass( "ui-state-focus" );
        } else {
          $( this ).blur();
        }
      })
      .blur(function() {
        $( this ).removeClass( "ui-state-focus" );
      });

    this.handles.each(function( i ) {
      $( this ).data( "index.ui-slider-handle", i );
    });

    this.handles
      .keydown(function( event ) {
        var index = $( this ).data( "index.ui-slider-handle" ),
          allowed,
          curVal,
          newVal,
          step;
  
        if ( self.options.disabled ) {
          return;
        }
  
        switch ( event.keyCode ) {
          case $.ui.keyCode.HOME:
          case $.ui.keyCode.END:
          case $.ui.keyCode.PAGE_UP:
          case $.ui.keyCode.PAGE_DOWN:
          case $.ui.keyCode.UP:
          case $.ui.keyCode.RIGHT:
          case $.ui.keyCode.DOWN:
          case $.ui.keyCode.LEFT:
            event.preventDefault();
            if ( !self._keySliding ) {
              self._keySliding = true;
              $( this ).addClass( "ui-state-active" );
              allowed = self._start( event, index );
              if ( allowed === false ) {
                return;
              }
            }
            break;
        }
  
        step = self.options.step;
        if ( self.options.values && self.options.values.length ) {
          curVal = newVal = self.values( index );
        } else {
          curVal = newVal = self.value();
        }
  
        switch ( event.keyCode ) {
          case $.ui.keyCode.HOME:
            newVal = self._valueMin();
            break;
          case $.ui.keyCode.END:
            newVal = self._valueMax();
            break;
          case $.ui.keyCode.PAGE_UP:
            newVal = self._trimAlignValue( curVal + ( (self._valueMax() - self._valueMin()) / numPages ) );
            break;
          case $.ui.keyCode.PAGE_DOWN:
            newVal = self._trimAlignValue( curVal - ( (self._valueMax() - self._valueMin()) / numPages ) );
            break;
          case $.ui.keyCode.UP:
          case $.ui.keyCode.RIGHT:
            if ( curVal === self._valueMax() ) {
              return;
            }
            newVal = self._trimAlignValue( curVal + step );
            break;
          case $.ui.keyCode.DOWN:
          case $.ui.keyCode.LEFT:
            if ( curVal === self._valueMin() ) {
              return;
            }
            newVal = self._trimAlignValue( curVal - step );
            break;
        }
  
        self._slide( event, index, newVal );
      })
      .keyup(function( event ) {
        var index = $( this ).data( "index.ui-slider-handle" );
  
        if ( self._keySliding ) {
          self._keySliding = false;
          self._stop( event, index );
          self._change( event, index );
          $( this ).removeClass( "ui-state-active" );
        }
  
      });

    this._refreshValue();

    this._animateOff = false;
  },

  destroy: function() {
    this.handles.remove();
    this.range.remove();

    this.element
      .removeClass( "ui-slider" +
        " ui-slider-horizontal" +
        " ui-slider-vertical" +
        " ui-slider-disabled" +
        " ui-widget" +
        " ui-widget-content" +
        " ui-corner-all" )
      .removeData( "slider" )
      .unbind( ".slider" );

    this._mouseDestroy();

    return this;
  },

  _mouseCapture: function( event ) {
    var o = this.options,
      position,
      normValue,
      distance,
      closestHandle,
      self,
      index,
      allowed,
      offset,
      mouseOverHandle;

    if ( o.disabled ) {
      return false;
    }

    this.elementSize = {
      width: this.element.outerWidth(),
      height: this.element.outerHeight()
    };
    this.elementOffset = this.element.offset();

    position = { x: event.pageX, y: event.pageY };
    normValue = this._normValueFromMouse( position );
    distance = this._valueMax() - this._valueMin() + 1;
    self = this;
    this.handles.each(function( i ) {
      var thisDistance = Math.abs( normValue - self.values(i) );
      if ( distance > thisDistance ) {
        distance = thisDistance;
        closestHandle = $( this );
        index = i;
      }
    });

    // workaround for bug #3736 (if both handles of a range are at 0,
    // the first is always used as the one with least distance,
    // and moving it is obviously prevented by preventing negative ranges)
    if( o.range === true && this.values(1) === o.min ) {
      index += 1;
      closestHandle = $( this.handles[index] );
    }

    allowed = this._start( event, index );
    if ( allowed === false ) {
      return false;
    }
    this._mouseSliding = true;

    self._handleIndex = index;

    closestHandle
      .addClass( "ui-state-active" )
      .focus();
    
    offset = closestHandle.offset();
    mouseOverHandle = !$( event.target ).parents().andSelf().is( ".ui-slider-handle" );
    this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
      left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
      top: event.pageY - offset.top -
        ( closestHandle.height() / 2 ) -
        ( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
        ( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
        ( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
    };

    if ( !this.handles.hasClass( "ui-state-hover" ) ) {
      this._slide( event, index, normValue );
    }
    this._animateOff = true;
    return true;
  },

  _mouseStart: function( event ) {
    return true;
  },

  _mouseDrag: function( event ) {
    var position = { x: event.pageX, y: event.pageY },
      normValue = this._normValueFromMouse( position );
    
    this._slide( event, this._handleIndex, normValue );

    return false;
  },

  _mouseStop: function( event ) {
    this.handles.removeClass( "ui-state-active" );
    this._mouseSliding = false;

    this._stop( event, this._handleIndex );
    this._change( event, this._handleIndex );

    this._handleIndex = null;
    this._clickOffset = null;
    this._animateOff = false;

    return false;
  },
  
  _detectOrientation: function() {
    this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
  },

  _normValueFromMouse: function( position ) {
    var pixelTotal,
      pixelMouse,
      percentMouse,
      valueTotal,
      valueMouse;

    if ( this.orientation === "horizontal" ) {
      pixelTotal = this.elementSize.width;
      pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
    } else {
      pixelTotal = this.elementSize.height;
      pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
    }

    percentMouse = ( pixelMouse / pixelTotal );
    if ( percentMouse > 1 ) {
      percentMouse = 1;
    }
    if ( percentMouse < 0 ) {
      percentMouse = 0;
    }
    if ( this.orientation === "vertical" ) {
      percentMouse = 1 - percentMouse;
    }

    valueTotal = this._valueMax() - this._valueMin();
    valueMouse = this._valueMin() + percentMouse * valueTotal;

    return this._trimAlignValue( valueMouse );
  },

  _start: function( event, index ) {
    var uiHash = {
      handle: this.handles[ index ],
      value: this.value()
    };
    if ( this.options.values && this.options.values.length ) {
      uiHash.value = this.values( index );
      uiHash.values = this.values();
    }
    return this._trigger( "start", event, uiHash );
  },

  _slide: function( event, index, newVal ) {
    var otherVal,
      newValues,
      allowed;

    if ( this.options.values && this.options.values.length ) {
      otherVal = this.values( index ? 0 : 1 );

      if ( ( this.options.values.length === 2 && this.options.range === true ) && 
          ( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
        ) {
        newVal = otherVal;
      }

      if ( newVal !== this.values( index ) ) {
        newValues = this.values();
        newValues[ index ] = newVal;
        // A slide can be canceled by returning false from the slide callback
        allowed = this._trigger( "slide", event, {
          handle: this.handles[ index ],
          value: newVal,
          values: newValues
        } );
        otherVal = this.values( index ? 0 : 1 );
        if ( allowed !== false ) {
          this.values( index, newVal, true );
        }
      }
    } else {
      if ( newVal !== this.value() ) {
        // A slide can be canceled by returning false from the slide callback
        allowed = this._trigger( "slide", event, {
          handle: this.handles[ index ],
          value: newVal
        } );
        if ( allowed !== false ) {
          this.value( newVal );
        }
      }
    }
  },

  _stop: function( event, index ) {
    var uiHash = {
      handle: this.handles[ index ],
      value: this.value()
    };
    if ( this.options.values && this.options.values.length ) {
      uiHash.value = this.values( index );
      uiHash.values = this.values();
    }

    this._trigger( "stop", event, uiHash );
  },

  _change: function( event, index ) {
    if ( !this._keySliding && !this._mouseSliding ) {
      var uiHash = {
        handle: this.handles[ index ],
        value: this.value()
      };
      if ( this.options.values && this.options.values.length ) {
        uiHash.value = this.values( index );
        uiHash.values = this.values();
      }

      this._trigger( "change", event, uiHash );
    }
  },

  value: function( newValue ) {
    if ( arguments.length ) {
      this.options.value = this._trimAlignValue( newValue );
      this._refreshValue();
      this._change( null, 0 );
      return;
    }

    return this._value();
  },

  values: function( index, newValue ) {
    var vals,
      newValues,
      i;

    if ( arguments.length > 1 ) {
      this.options.values[ index ] = this._trimAlignValue( newValue );
      this._refreshValue();
      this._change( null, index );
      return;
    }

    if ( arguments.length ) {
      if ( $.isArray( arguments[ 0 ] ) ) {
        vals = this.options.values;
        newValues = arguments[ 0 ];
        for ( i = 0; i < vals.length; i += 1 ) {
          vals[ i ] = this._trimAlignValue( newValues[ i ] );
          this._change( null, i );
        }
        this._refreshValue();
      } else {
        if ( this.options.values && this.options.values.length ) {
          return this._values( index );
        } else {
          return this.value();
        }
      }
    } else {
      return this._values();
    }
  },

  _setOption: function( key, value ) {
    var i,
      valsLength = 0;

    if ( $.isArray( this.options.values ) ) {
      valsLength = this.options.values.length;
    }

    $.Widget.prototype._setOption.apply( this, arguments );

    switch ( key ) {
      case "disabled":
        if ( value ) {
          this.handles.filter( ".ui-state-focus" ).blur();
          this.handles.removeClass( "ui-state-hover" );
          this.handles.propAttr( "disabled", true );
          this.element.addClass( "ui-disabled" );
        } else {
          this.handles.propAttr( "disabled", false );
          this.element.removeClass( "ui-disabled" );
        }
        break;
      case "orientation":
        this._detectOrientation();
        this.element
          .removeClass( "ui-slider-horizontal ui-slider-vertical" )
          .addClass( "ui-slider-" + this.orientation );
        this._refreshValue();
        break;
      case "value":
        this._animateOff = true;
        this._refreshValue();
        this._change( null, 0 );
        this._animateOff = false;
        break;
      case "values":
        this._animateOff = true;
        this._refreshValue();
        for ( i = 0; i < valsLength; i += 1 ) {
          this._change( null, i );
        }
        this._animateOff = false;
        break;
    }
  },

  //internal value getter
  // _value() returns value trimmed by min and max, aligned by step
  _value: function() {
    var val = this.options.value;
    val = this._trimAlignValue( val );

    return val;
  },

  //internal values getter
  // _values() returns array of values trimmed by min and max, aligned by step
  // _values( index ) returns single value trimmed by min and max, aligned by step
  _values: function( index ) {
    var val,
      vals,
      i;

    if ( arguments.length ) {
      val = this.options.values[ index ];
      val = this._trimAlignValue( val );

      return val;
    } else {
      // .slice() creates a copy of the array
      // this copy gets trimmed by min and max and then returned
      vals = this.options.values.slice();
      for ( i = 0; i < vals.length; i+= 1) {
        vals[ i ] = this._trimAlignValue( vals[ i ] );
      }

      return vals;
    }
  },
  
  // returns the step-aligned value that val is closest to, between (inclusive) min and max
  _trimAlignValue: function( val ) {
    if ( val <= this._valueMin() ) {
      return this._valueMin();
    }
    if ( val >= this._valueMax() ) {
      return this._valueMax();
    }
    var step = ( this.options.step > 0 ) ? this.options.step : 1,
      valModStep = (val - this._valueMin()) % step,
      alignValue = val - valModStep;

    if ( Math.abs(valModStep) * 2 >= step ) {
      alignValue += ( valModStep > 0 ) ? step : ( -step );
    }

    // Since JavaScript has problems with large floats, round
    // the final value to 5 digits after the decimal point (see #4124)
    return parseFloat( alignValue.toFixed(5) );
  },

  _valueMin: function() {
    return this.options.min;
  },

  _valueMax: function() {
    return this.options.max;
  },
  
  _refreshValue: function() {
    var oRange = this.options.range,
      o = this.options,
      self = this,
      animate = ( !this._animateOff ) ? o.animate : false,
      valPercent,
      _set = {},
      lastValPercent,
      value,
      valueMin,
      valueMax;

    if ( this.options.values && this.options.values.length ) {
      this.handles.each(function( i, j ) {
        valPercent = ( self.values(i) - self._valueMin() ) / ( self._valueMax() - self._valueMin() ) * 100;
        _set[ self.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
        $( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
        if ( self.options.range === true ) {
          if ( self.orientation === "horizontal" ) {
            if ( i === 0 ) {
              self.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
            }
            if ( i === 1 ) {
              self.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
            }
          } else {
            if ( i === 0 ) {
              self.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
            }
            if ( i === 1 ) {
              self.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
            }
          }
        }
        lastValPercent = valPercent;
      });
    } else {
      value = this.value();
      valueMin = this._valueMin();
      valueMax = this._valueMax();
      valPercent = ( valueMax !== valueMin ) ?
          ( value - valueMin ) / ( valueMax - valueMin ) * 100 :
          0;
      _set[ self.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
      this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

      if ( oRange === "min" && this.orientation === "horizontal" ) {
        this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
      }
      if ( oRange === "max" && this.orientation === "horizontal" ) {
        this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
      }
      if ( oRange === "min" && this.orientation === "vertical" ) {
        this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
      }
      if ( oRange === "max" && this.orientation === "vertical" ) {
        this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
      }
    }
  }

});

$.extend( $.ui.slider, {
  version: "@VERSION"
});

}(jQuery));

// +LICENCE
/*!
 * jQuery UI Datepicker @VERSION
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Datepicker
 *
 * Depends:
 *  jquery.ui.core.js
 */
// -LICENCE
(function( $, undefined ) {

$.extend($.ui, { datepicker: { version: "@VERSION" } });

var PROP_NAME = 'datepicker';
var dpuuid = new Date().getTime();
var instActive;

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
  this.debug = false; // Change this to true to start debugging
  this._curInst = null; // The current instance in use
  this._keyEvent = false; // If the last event was a key event
  this._disabledInputs = []; // List of date picker inputs that have been disabled
  this._datepickerShowing = false; // True if the popup picker is showing , false if not
  this._inDialog = false; // True if showing within a "dialog", false if not
  this._mainDivId = 'ui-datepicker-div'; // The ID of the main datepicker division
  this._inlineClass = 'ui-datepicker-inline'; // The name of the inline marker class
  this._appendClass = 'ui-datepicker-append'; // The name of the append marker class
  this._triggerClass = 'ui-datepicker-trigger'; // The name of the trigger marker class
  this._dialogClass = 'ui-datepicker-dialog'; // The name of the dialog marker class
  this._disableClass = 'ui-datepicker-disabled'; // The name of the disabled covering marker class
  this._unselectableClass = 'ui-datepicker-unselectable'; // The name of the unselectable cell marker class
  this._currentClass = 'ui-datepicker-current-day'; // The name of the current day marker class
  this._dayOverClass = 'ui-datepicker-days-cell-over'; // The name of the day hover marker class
  this.regional = []; // Available regional settings, indexed by language code
  this.regional[''] = { // Default regional settings
    closeText: 'Done', // Display text for close link
    prevText: 'Prev', // Display text for previous month link
    nextText: 'Next', // Display text for next month link
    currentText: 'Today', // Display text for current month link
    monthNames: ['January','February','March','April','May','June',
      'July','August','September','October','November','December'], // Names of months for drop-down and formatting
    monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], // For formatting
    dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // For formatting
    dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], // For formatting
    dayNamesMin: ['Su','Mo','Tu','We','Th','Fr','Sa'], // Column headings for days starting at Sunday
    weekHeader: 'Wk', // Column header for week of the year
    dateFormat: 'mm/dd/yy', // See format options on parseDate
    firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
    isRTL: false, // True if right-to-left language, false if left-to-right
    showMonthAfterYear: false, // True if the year select precedes month, false for month then year
    yearSuffix: '' // Additional text to append to the year in the month headers
  };
  this._defaults = { // Global defaults for all the date picker instances
    showOn: 'focus', // 'focus' for popup on focus,
      // 'button' for trigger button, or 'both' for either
    showAnim: 'fadeIn', // Name of jQuery animation for popup
    showOptions: {}, // Options for enhanced animations
    defaultDate: null, // Used when field is blank: actual date,
      // +/-number for offset from today, null for today
    appendText: '', // Display text following the input box, e.g. showing the format
    buttonText: '...', // Text for trigger button
    buttonImage: '', // URL for trigger button image
    buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
    hideIfNoPrevNext: false, // True to hide next/previous month links
      // if not applicable, false to just disable them
    navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
    gotoCurrent: false, // True if today link goes back to current selection instead
    changeMonth: false, // True if month can be selected directly, false if only prev/next
    changeYear: false, // True if year can be selected directly, false if only prev/next
    yearRange: 'c-10:c+10', // Range of years to display in drop-down,
      // either relative to today's year (-nn:+nn), relative to currently displayed year
      // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
    showOtherMonths: false, // True to show dates in other months, false to leave blank
    selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
    showWeek: false, // True to show week of the year, false to not show it
    calculateWeek: this.iso8601Week, // How to calculate the week of the year,
      // takes a Date and returns the number of the week for it
    shortYearCutoff: '+10', // Short year values < this are in the current century,
      // > this are in the previous century,
      // string value starting with '+' for current year + value
    minDate: null, // The earliest selectable date, or null for no limit
    maxDate: null, // The latest selectable date, or null for no limit
    duration: 'fast', // Duration of display/closure
    beforeShowDay: null, // Function that takes a date and returns an array with
      // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or '',
      // [2] = cell title (optional), e.g. $.datepicker.noWeekends
    beforeShow: null, // Function that takes an input field and
      // returns a set of custom settings for the date picker
    onSelect: null, // Define a callback function when a date is selected
    onChangeMonthYear: null, // Define a callback function when the month or year is changed
    onClose: null, // Define a callback function when the datepicker is closed
    numberOfMonths: 1, // Number of months to show at a time
    showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
    stepMonths: 1, // Number of months to step back/forward
    stepBigMonths: 12, // Number of months to step back/forward for the big links
    altField: '', // Selector for an alternate field to store selected dates into
    altFormat: '', // The date format to use for the alternate field
    constrainInput: true, // The input is constrained by the current date format
    showButtonPanel: false, // True to show button panel, false to not show it
    autoSize: false, // True to size the input for the date format, false to leave as is
    disabled: false // The initial disabled state
  };
  $.extend(this._defaults, this.regional['']);
  this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'));
}

$.extend(Datepicker.prototype, {
  /* Class name added to elements to indicate already configured with a date picker. */
  markerClassName: 'hasDatepicker',
  
  //Keep track of the maximum number of rows displayed (see #7043)
  maxRows: 4,

  /* Debug logging (if enabled). */
  log: function () {
    if (this.debug)
      console.log.apply('', arguments);
  },
  
  // TODO rename to "widget" when switching to widget factory
  _widgetDatepicker: function() {
    return this.dpDiv;
  },

  /* Override the default settings for all instances of the date picker.
     @param  settings  object - the new settings to use as defaults (anonymous object)
     @return the manager object */
  setDefaults: function(settings) {
    extendRemove(this._defaults, settings || {});
    return this;
  },

  /* Attach the date picker to a jQuery selection.
     @param  target    element - the target input field or division or span
     @param  settings  object - the new settings to use for this date picker instance (anonymous) */
  _attachDatepicker: function(target, settings) {
    // check for settings on the control itself - in namespace 'date:'
    var inlineSettings = null;
    for (var attrName in this._defaults) {
      var attrValue = target.getAttribute('date:' + attrName);
      if (attrValue) {
        inlineSettings = inlineSettings || {};
        try {
          inlineSettings[attrName] = eval(attrValue);
        } catch (err) {
          inlineSettings[attrName] = attrValue;
        }
      }
    }
    var nodeName = target.nodeName.toLowerCase();
    var inline = (nodeName == 'div' || nodeName == 'span');
    if (!target.id) {
      this.uuid += 1;
      target.id = 'dp' + this.uuid;
    }
    var inst = this._newInst($(target), inline);
    inst.settings = $.extend({}, settings || {}, inlineSettings || {});
    if (nodeName == 'input') {
      this._connectDatepicker(target, inst);
    } else if (inline) {
      this._inlineDatepicker(target, inst);
    }
  },

  /* Create a new instance object. */
  _newInst: function(target, inline) {
    var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1'); // escape jQuery meta chars
    return {id: id, input: target, // associated target
      selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
      drawMonth: 0, drawYear: 0, // month being drawn
      inline: inline, // is datepicker inline or not
      dpDiv: (!inline ? this.dpDiv : // presentation div
      bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')))};
  },

  /* Attach the date picker to an input field. */
  _connectDatepicker: function(target, inst) {
    var input = $(target);
    inst.append = $([]);
    inst.trigger = $([]);
    if (input.hasClass(this.markerClassName))
      return;
    this._attachments(input, inst);
    input.addClass(this.markerClassName).keydown(this._doKeyDown).
      keypress(this._doKeyPress).keyup(this._doKeyUp).
      bind("setData.datepicker", function(event, key, value) {
        inst.settings[key] = value;
      }).bind("getData.datepicker", function(event, key) {
        return this._get(inst, key);
      });
    this._autoSize(inst);
    $.data(target, PROP_NAME, inst);
    //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
    if( inst.settings.disabled ) {
      this._disableDatepicker( target );
    }
  },

  /* Make attachments based on settings. */
  _attachments: function(input, inst) {
    var appendText = this._get(inst, 'appendText');
    var isRTL = this._get(inst, 'isRTL');
    if (inst.append)
      inst.append.remove();
    if (appendText) {
      inst.append = $('<span class="' + this._appendClass + '">' + appendText + '</span>');
      input[isRTL ? 'before' : 'after'](inst.append);
    }
    input.unbind('focus', this._showDatepicker);
    if (inst.trigger)
      inst.trigger.remove();
    var showOn = this._get(inst, 'showOn');
    if (showOn == 'focus' || showOn == 'both') // pop-up date picker when in the marked field
      input.focus(this._showDatepicker);
    if (showOn == 'button' || showOn == 'both') { // pop-up date picker when button clicked
      var buttonText = this._get(inst, 'buttonText');
      var buttonImage = this._get(inst, 'buttonImage');
      inst.trigger = $(this._get(inst, 'buttonImageOnly') ?
        $('<img/>').addClass(this._triggerClass).
          attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
        $('<button type="button"></button>').addClass(this._triggerClass).
          html(buttonImage == '' ? buttonText : $('<img/>').attr(
          { src:buttonImage, alt:buttonText, title:buttonText })));
      input[isRTL ? 'before' : 'after'](inst.trigger);
      inst.trigger.click(function() {
        if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0])
          $.datepicker._hideDatepicker();
        else if ($.datepicker._datepickerShowing && $.datepicker._lastInput != input[0]) {
          $.datepicker._hideDatepicker(); 
          $.datepicker._showDatepicker(input[0]);
        } else
          $.datepicker._showDatepicker(input[0]);
        return false;
      });
    }
  },

  /* Apply the maximum length for the date format. */
  _autoSize: function(inst) {
    if (this._get(inst, 'autoSize') && !inst.inline) {
      var date = new Date(2009, 12 - 1, 20); // Ensure double digits
      var dateFormat = this._get(inst, 'dateFormat');
      if (dateFormat.match(/[DM]/)) {
        var findMax = function(names) {
          var max = 0;
          var maxI = 0;
          for (var i = 0; i < names.length; i++) {
            if (names[i].length > max) {
              max = names[i].length;
              maxI = i;
            }
          }
          return maxI;
        };
        date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
          'monthNames' : 'monthNamesShort'))));
        date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
          'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());
      }
      inst.input.attr('size', this._formatDate(inst, date).length);
    }
  },

  /* Attach an inline date picker to a div. */
  _inlineDatepicker: function(target, inst) {
    var divSpan = $(target);
    if (divSpan.hasClass(this.markerClassName))
      return;
    divSpan.addClass(this.markerClassName).append(inst.dpDiv).
      bind("setData.datepicker", function(event, key, value){
        inst.settings[key] = value;
      }).bind("getData.datepicker", function(event, key){
        return this._get(inst, key);
      });
    $.data(target, PROP_NAME, inst);
    this._setDate(inst, this._getDefaultDate(inst), true);
    this._updateDatepicker(inst);
    this._updateAlternate(inst);
    //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
    if( inst.settings.disabled ) {
      this._disableDatepicker( target );
    }
    // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
    // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
    inst.dpDiv.css( "display", "block" );
  },

  /* Pop-up the date picker in a "dialog" box.
     @param  input     element - ignored
     @param  date      string or Date - the initial date to display
     @param  onSelect  function - the function to call when a date is selected
     @param  settings  object - update the dialog date picker instance's settings (anonymous object)
     @param  pos       int[2] - coordinates for the dialog's position within the screen or
                       event - with x/y coordinates or
                       leave empty for default (screen centre)
     @return the manager object */
  _dialogDatepicker: function(input, date, onSelect, settings, pos) {
    var inst = this._dialogInst; // internal instance
    if (!inst) {
      this.uuid += 1;
      var id = 'dp' + this.uuid;
      this._dialogInput = $('<input type="text" id="' + id +
        '" style="position: absolute; top: -100px; width: 0px; z-index: -10;"/>');
      this._dialogInput.keydown(this._doKeyDown);
      $('body').append(this._dialogInput);
      inst = this._dialogInst = this._newInst(this._dialogInput, false);
      inst.settings = {};
      $.data(this._dialogInput[0], PROP_NAME, inst);
    }
    extendRemove(inst.settings, settings || {});
    date = (date && date.constructor == Date ? this._formatDate(inst, date) : date);
    this._dialogInput.val(date);

    this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
    if (!this._pos) {
      var browserWidth = document.documentElement.clientWidth;
      var browserHeight = document.documentElement.clientHeight;
      var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
      var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
      this._pos = // should use actual width/height below
        [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
    }

    // move input on screen for focus, but hidden behind dialog
    this._dialogInput.css('left', (this._pos[0] + 20) + 'px').css('top', this._pos[1] + 'px');
    inst.settings.onSelect = onSelect;
    this._inDialog = true;
    this.dpDiv.addClass(this._dialogClass);
    this._showDatepicker(this._dialogInput[0]);
    if ($.blockUI)
      $.blockUI(this.dpDiv);
    $.data(this._dialogInput[0], PROP_NAME, inst);
    return this;
  },

  /* Detach a datepicker from its control.
     @param  target    element - the target input field or division or span */
  _destroyDatepicker: function(target) {
    var $target = $(target);
    var inst = $.data(target, PROP_NAME);
    if (!$target.hasClass(this.markerClassName)) {
      return;
    }
    var nodeName = target.nodeName.toLowerCase();
    $.removeData(target, PROP_NAME);
    if (nodeName == 'input') {
      inst.append.remove();
      inst.trigger.remove();
      $target.removeClass(this.markerClassName).
        unbind('focus', this._showDatepicker).
        unbind('keydown', this._doKeyDown).
        unbind('keypress', this._doKeyPress).
        unbind('keyup', this._doKeyUp);
    } else if (nodeName == 'div' || nodeName == 'span')
      $target.removeClass(this.markerClassName).empty();
  },

  /* Enable the date picker to a jQuery selection.
     @param  target    element - the target input field or division or span */
  _enableDatepicker: function(target) {
    var $target = $(target);
    var inst = $.data(target, PROP_NAME);
    if (!$target.hasClass(this.markerClassName)) {
      return;
    }
    var nodeName = target.nodeName.toLowerCase();
    if (nodeName == 'input') {
      target.disabled = false;
      inst.trigger.filter('button').
        each(function() { this.disabled = false; }).end().
        filter('img').css({opacity: '1.0', cursor: ''});
    }
    else if (nodeName == 'div' || nodeName == 'span') {
      var inline = $target.children('.' + this._inlineClass);
      inline.children().removeClass('ui-state-disabled');
      inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
        removeAttr("disabled");
    }
    this._disabledInputs = $.map(this._disabledInputs,
      function(value) { return (value == target ? null : value); }); // delete entry
  },

  /* Disable the date picker to a jQuery selection.
     @param  target    element - the target input field or division or span */
  _disableDatepicker: function(target) {
    var $target = $(target);
    var inst = $.data(target, PROP_NAME);
    if (!$target.hasClass(this.markerClassName)) {
      return;
    }
    var nodeName = target.nodeName.toLowerCase();
    if (nodeName == 'input') {
      target.disabled = true;
      inst.trigger.filter('button').
        each(function() { this.disabled = true; }).end().
        filter('img').css({opacity: '0.5', cursor: 'default'});
    }
    else if (nodeName == 'div' || nodeName == 'span') {
      var inline = $target.children('.' + this._inlineClass);
      inline.children().addClass('ui-state-disabled');
      inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
        attr("disabled", "disabled");
    }
    this._disabledInputs = $.map(this._disabledInputs,
      function(value) { return (value == target ? null : value); }); // delete entry
    this._disabledInputs[this._disabledInputs.length] = target;
  },

  /* Is the first field in a jQuery collection disabled as a datepicker?
     @param  target    element - the target input field or division or span
     @return boolean - true if disabled, false if enabled */
  _isDisabledDatepicker: function(target) {
    if (!target) {
      return false;
    }
    for (var i = 0; i < this._disabledInputs.length; i++) {
      if (this._disabledInputs[i] == target)
        return true;
    }
    return false;
  },

  /* Retrieve the instance data for the target control.
     @param  target  element - the target input field or division or span
     @return  object - the associated instance data
     @throws  error if a jQuery problem getting data */
  _getInst: function(target) {
    try {
      return $.data(target, PROP_NAME);
    }
    catch (err) {
      throw 'Missing instance data for this datepicker';
    }
  },

  /* Update or retrieve the settings for a date picker attached to an input field or division.
     @param  target  element - the target input field or division or span
     @param  name    object - the new settings to update or
                     string - the name of the setting to change or retrieve,
                     when retrieving also 'all' for all instance settings or
                     'defaults' for all global defaults
     @param  value   any - the new value for the setting
                     (omit if above is an object or to retrieve a value) */
  _optionDatepicker: function(target, name, value) {
    var inst = this._getInst(target);
    if (arguments.length == 2 && typeof name == 'string') {
      return (name == 'defaults' ? $.extend({}, $.datepicker._defaults) :
        (inst ? (name == 'all' ? $.extend({}, inst.settings) :
        this._get(inst, name)) : null));
    }
    var settings = name || {};
    if (typeof name == 'string') {
      settings = {};
      settings[name] = value;
    }
    if (inst) {
      if (this._curInst == inst) {
        this._hideDatepicker();
      }
      var date = this._getDateDatepicker(target, true);
      var minDate = this._getMinMaxDate(inst, 'min');
      var maxDate = this._getMinMaxDate(inst, 'max');
      extendRemove(inst.settings, settings);
      // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
      if (minDate !== null && settings['dateFormat'] !== undefined && settings['minDate'] === undefined)
        inst.settings.minDate = this._formatDate(inst, minDate);
      if (maxDate !== null && settings['dateFormat'] !== undefined && settings['maxDate'] === undefined)
        inst.settings.maxDate = this._formatDate(inst, maxDate);
      this._attachments($(target), inst);
      this._autoSize(inst);
      this._setDate(inst, date);
      this._updateAlternate(inst);
      this._updateDatepicker(inst);
    }
  },

  // change method deprecated
  _changeDatepicker: function(target, name, value) {
    this._optionDatepicker(target, name, value);
  },

  /* Redraw the date picker attached to an input field or division.
     @param  target  element - the target input field or division or span */
  _refreshDatepicker: function(target) {
    var inst = this._getInst(target);
    if (inst) {
      this._updateDatepicker(inst);
    }
  },

  /* Set the dates for a jQuery selection.
     @param  target   element - the target input field or division or span
     @param  date     Date - the new date */
  _setDateDatepicker: function(target, date) {
    var inst = this._getInst(target);
    if (inst) {
      this._setDate(inst, date);
      this._updateDatepicker(inst);
      this._updateAlternate(inst);
    }
  },

  /* Get the date(s) for the first entry in a jQuery selection.
     @param  target     element - the target input field or division or span
     @param  noDefault  boolean - true if no default date is to be used
     @return Date - the current date */
  _getDateDatepicker: function(target, noDefault) {
    var inst = this._getInst(target);
    if (inst && !inst.inline)
      this._setDateFromField(inst, noDefault);
    return (inst ? this._getDate(inst) : null);
  },

  /* Handle keystrokes. */
  _doKeyDown: function(event) {
    var inst = $.datepicker._getInst(event.target);
    var handled = true;
    var isRTL = inst.dpDiv.is('.ui-datepicker-rtl');
    inst._keyEvent = true;
    if ($.datepicker._datepickerShowing)
      switch (event.keyCode) {
        case 9: $.datepicker._hideDatepicker();
            handled = false;
            break; // hide on tab out
        case 13: var sel = $('td.' + $.datepicker._dayOverClass + ':not(.' + 
                  $.datepicker._currentClass + ')', inst.dpDiv);
            if (sel[0])
              $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
              var onSelect = $.datepicker._get(inst, 'onSelect');
              if (onSelect) {
                var dateStr = $.datepicker._formatDate(inst);

                // trigger custom callback
                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
              }
            else
              $.datepicker._hideDatepicker();
            return false; // don't submit the form
            break; // select the value on enter
        case 27: $.datepicker._hideDatepicker();
            break; // hide on escape
        case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
              -$.datepicker._get(inst, 'stepBigMonths') :
              -$.datepicker._get(inst, 'stepMonths')), 'M');
            break; // previous month/year on page up/+ ctrl
        case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
              +$.datepicker._get(inst, 'stepBigMonths') :
              +$.datepicker._get(inst, 'stepMonths')), 'M');
            break; // next month/year on page down/+ ctrl
        case 35: if (event.ctrlKey || event.metaKey) $.datepicker._clearDate(event.target);
            handled = event.ctrlKey || event.metaKey;
            break; // clear on ctrl or command +end
        case 36: if (event.ctrlKey || event.metaKey) $.datepicker._gotoToday(event.target);
            handled = event.ctrlKey || event.metaKey;
            break; // current on ctrl or command +home
        case 37: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');
            handled = event.ctrlKey || event.metaKey;
            // -1 day on ctrl or command +left
            if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                  -$.datepicker._get(inst, 'stepBigMonths') :
                  -$.datepicker._get(inst, 'stepMonths')), 'M');
            // next month/year on alt +left on Mac
            break;
        case 38: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, -7, 'D');
            handled = event.ctrlKey || event.metaKey;
            break; // -1 week on ctrl or command +up
        case 39: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');
            handled = event.ctrlKey || event.metaKey;
            // +1 day on ctrl or command +right
            if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                  +$.datepicker._get(inst, 'stepBigMonths') :
                  +$.datepicker._get(inst, 'stepMonths')), 'M');
            // next month/year on alt +right
            break;
        case 40: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, +7, 'D');
            handled = event.ctrlKey || event.metaKey;
            break; // +1 week on ctrl or command +down
        default: handled = false;
      }
    else if (event.keyCode == 36 && event.ctrlKey) // display the date picker on ctrl+home
      $.datepicker._showDatepicker(this);
    else {
      handled = false;
    }
    if (handled) {
      event.preventDefault();
      event.stopPropagation();
    }
  },

  /* Filter entered characters - based on date format. */
  _doKeyPress: function(event) {
    var inst = $.datepicker._getInst(event.target);
    if ($.datepicker._get(inst, 'constrainInput')) {
      var chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));
      var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
      return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);
    }
  },

  /* Synchronise manual entry and field/alternate field. */
  _doKeyUp: function(event) {
    var inst = $.datepicker._getInst(event.target);
    if (inst.input.val() != inst.lastVal) {
      try {
        var date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
          (inst.input ? inst.input.val() : null),
          $.datepicker._getFormatConfig(inst));
        if (date) { // only if valid
          $.datepicker._setDateFromField(inst);
          $.datepicker._updateAlternate(inst);
          $.datepicker._updateDatepicker(inst);
        }
      }
      catch (err) {
        $.datepicker.log(err);
      }
    }
    return true;
  },

  /* Pop-up the date picker for a given input field.
       If false returned from beforeShow event handler do not show. 
     @param  input  element - the input field attached to the date picker or
                    event - if triggered by focus */
  _showDatepicker: function(input) {
    input = input.target || input;
    if (input.nodeName.toLowerCase() != 'input') // find from button/image trigger
      input = $('input', input.parentNode)[0];
    if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) // already here
      return;
    var inst = $.datepicker._getInst(input);
    if ($.datepicker._curInst && $.datepicker._curInst != inst) {
      $.datepicker._curInst.dpDiv.stop(true, true);
      if ( inst && $.datepicker._datepickerShowing ) {
        $.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
      }
    }
    var beforeShow = $.datepicker._get(inst, 'beforeShow');
    var beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
    if(beforeShowSettings === false){
            //false
      return;
    }
    extendRemove(inst.settings, beforeShowSettings);
    inst.lastVal = null;
    $.datepicker._lastInput = input;
    $.datepicker._setDateFromField(inst);
    if ($.datepicker._inDialog) // hide cursor
      input.value = '';
    if (!$.datepicker._pos) { // position below input
      $.datepicker._pos = $.datepicker._findPos(input);
      $.datepicker._pos[1] += input.offsetHeight; // add the height
    }
    var isFixed = false;
    $(input).parents().each(function() {
      isFixed |= $(this).css('position') == 'fixed';
      return !isFixed;
    });
    if (isFixed && $.browser.opera) { // correction for Opera when fixed and scrolled
      $.datepicker._pos[0] -= document.documentElement.scrollLeft;
      $.datepicker._pos[1] -= document.documentElement.scrollTop;
    }
    var offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
    $.datepicker._pos = null;
    //to avoid flashes on Firefox
    inst.dpDiv.empty();
    // determine sizing offscreen
    inst.dpDiv.css({position: 'absolute', display: 'block', top: '-1000px'});
    $.datepicker._updateDatepicker(inst);
    // fix width for dynamic number of date pickers
    // and adjust position before showing
    offset = $.datepicker._checkOffset(inst, offset, isFixed);
    inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
      'static' : (isFixed ? 'fixed' : 'absolute')), display: 'none',
      left: offset.left + 'px', top: offset.top + 'px'});
    if (!inst.inline) {
      var showAnim = $.datepicker._get(inst, 'showAnim');
      var duration = $.datepicker._get(inst, 'duration');
      var postProcess = function() {
        var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
        if( !! cover.length ){
          var borders = $.datepicker._getBorders(inst.dpDiv);
          cover.css({left: -borders[0], top: -borders[1],
            width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()});
        }
      };
      inst.dpDiv.zIndex($(input).zIndex()+1);
      $.datepicker._datepickerShowing = true;
      if ($.effects && $.effects[showAnim])
        inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
      else
        inst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);
      if (!showAnim || !duration)
        postProcess();
      if (inst.input.is(':visible') && !inst.input.is(':disabled'))
        inst.input.focus();
      $.datepicker._curInst = inst;
    }
  },

  /* Generate the date picker content. */
  _updateDatepicker: function(inst) {
    var self = this;
    self.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
    var borders = $.datepicker._getBorders(inst.dpDiv);
    instActive = inst; // for delegate hover events
    inst.dpDiv.empty().append(this._generateHTML(inst));
    var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
    if( !!cover.length ){ //avoid call to outerXXXX() when not in IE6
      cover.css({left: -borders[0], top: -borders[1], width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()});
    }
    inst.dpDiv.find('.' + this._dayOverClass + ' a').mouseover();
    var numMonths = this._getNumberOfMonths(inst);
    var cols = numMonths[1];
    var width = 17;
    inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
    if (cols > 1)
      inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', (width * cols) + 'em');
    inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') +
      'Class']('ui-datepicker-multi');
    inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') +
      'Class']('ui-datepicker-rtl');
    if (inst == $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input &&
        // #6694 - don't focus the input if it's already focused
        // this breaks the change event in IE
        inst.input.is(':visible') && !inst.input.is(':disabled') && inst.input[0] != document.activeElement)
      inst.input.focus();
    // deffered render of the years select (to avoid flashes on Firefox) 
    if( inst.yearshtml ){
      var origyearshtml = inst.yearshtml;
      setTimeout(function(){
        //assure that inst.yearshtml didn't change.
        if( origyearshtml === inst.yearshtml && inst.yearshtml ){
          inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);
        }
        origyearshtml = inst.yearshtml = null;
      }, 0);
    }
  },

  /* Retrieve the size of left and top borders for an element.
     @param  elem  (jQuery object) the element of interest
     @return  (number[2]) the left and top borders */
  _getBorders: function(elem) {
    var convert = function(value) {
      return {thin: 1, medium: 2, thick: 3}[value] || value;
    };
    return [parseFloat(convert(elem.css('border-left-width'))),
      parseFloat(convert(elem.css('border-top-width')))];
  },

  /* Check positioning to remain on screen. */
  _checkOffset: function(inst, offset, isFixed) {
    var dpWidth = inst.dpDiv.outerWidth();
    var dpHeight = inst.dpDiv.outerHeight();
    var inputWidth = inst.input ? inst.input.outerWidth() : 0;
    var inputHeight = inst.input ? inst.input.outerHeight() : 0;
    var viewWidth = document.documentElement.clientWidth + $(document).scrollLeft();
    var viewHeight = document.documentElement.clientHeight + $(document).scrollTop();

    offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);
    offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
    offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

    // now check if datepicker is showing outside window viewport - move to a better place if so.
    offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
      Math.abs(offset.left + dpWidth - viewWidth) : 0);
    offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
      Math.abs(dpHeight + inputHeight) : 0);

    return offset;
  },

  /* Find an object's position on the screen. */
  _findPos: function(obj) {
    var inst = this._getInst(obj);
    var isRTL = this._get(inst, 'isRTL');
        while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
            obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];
        }
        var position = $(obj).offset();
      return [position.left, position.top];
  },

  /* Hide the date picker from view.
     @param  input  element - the input field attached to the date picker */
  _hideDatepicker: function(input) {
    var inst = this._curInst;
    if (!inst || (input && inst != $.data(input, PROP_NAME)))
      return;
    if (this._datepickerShowing) {
      var showAnim = this._get(inst, 'showAnim');
      var duration = this._get(inst, 'duration');
      var postProcess = function() {
        $.datepicker._tidyDialog(inst);
      };
      if ($.effects && $.effects[showAnim])
        inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
      else
        inst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' :
          (showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);
      if (!showAnim)
        postProcess();
      this._datepickerShowing = false;
      var onClose = this._get(inst, 'onClose');
      if (onClose)
        onClose.apply((inst.input ? inst.input[0] : null),
          [(inst.input ? inst.input.val() : ''), inst]);
      this._lastInput = null;
      if (this._inDialog) {
        this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' });
        if ($.blockUI) {
          $.unblockUI();
          $('body').append(this.dpDiv);
        }
      }
      this._inDialog = false;
    }
  },

  /* Tidy up after a dialog display. */
  _tidyDialog: function(inst) {
    inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
  },

  /* Close date picker if clicked elsewhere. */
  _checkExternalClick: function(event) {
    if (!$.datepicker._curInst)
      return;

    var $target = $(event.target),
      inst = $.datepicker._getInst($target[0]);

    if ( ( ( $target[0].id != $.datepicker._mainDivId &&
        $target.parents('#' + $.datepicker._mainDivId).length == 0 &&
        !$target.hasClass($.datepicker.markerClassName) &&
        !$target.closest("." + $.datepicker._triggerClass).length &&
        $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
      ( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst != inst ) )
      $.datepicker._hideDatepicker();
  },

  /* Adjust one of the date sub-fields. */
  _adjustDate: function(id, offset, period) {
    var target = $(id);
    var inst = this._getInst(target[0]);
    if (this._isDisabledDatepicker(target[0])) {
      return;
    }
    this._adjustInstDate(inst, offset +
      (period == 'M' ? this._get(inst, 'showCurrentAtPos') : 0), // undo positioning
      period);
    this._updateDatepicker(inst);
  },

  /* Action for current link. */
  _gotoToday: function(id) {
    var target = $(id);
    var inst = this._getInst(target[0]);
    if (this._get(inst, 'gotoCurrent') && inst.currentDay) {
      inst.selectedDay = inst.currentDay;
      inst.drawMonth = inst.selectedMonth = inst.currentMonth;
      inst.drawYear = inst.selectedYear = inst.currentYear;
    }
    else {
      var date = new Date();
      inst.selectedDay = date.getDate();
      inst.drawMonth = inst.selectedMonth = date.getMonth();
      inst.drawYear = inst.selectedYear = date.getFullYear();
    }
    this._notifyChange(inst);
    this._adjustDate(target);
  },

  /* Action for selecting a new month/year. */
  _selectMonthYear: function(id, select, period) {
    var target = $(id);
    var inst = this._getInst(target[0]);
    inst['selected' + (period == 'M' ? 'Month' : 'Year')] =
    inst['draw' + (period == 'M' ? 'Month' : 'Year')] =
      parseInt(select.options[select.selectedIndex].value,10);
    this._notifyChange(inst);
    this._adjustDate(target);
  },

  /* Action for selecting a day. */
  _selectDay: function(id, month, year, td) {
    var target = $(id);
    if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
      return;
    }
    var inst = this._getInst(target[0]);
    inst.selectedDay = inst.currentDay = $('a', td).html();
    inst.selectedMonth = inst.currentMonth = month;
    inst.selectedYear = inst.currentYear = year;
    this._selectDate(id, this._formatDate(inst,
      inst.currentDay, inst.currentMonth, inst.currentYear));
  },

  /* Erase the input field and hide the date picker. */
  _clearDate: function(id) {
    var target = $(id);
    var inst = this._getInst(target[0]);
    this._selectDate(target, '');
  },

  /* Update the input field with the selected date. */
  _selectDate: function(id, dateStr) {
    var target = $(id);
    var inst = this._getInst(target[0]);
    dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
    if (inst.input)
      inst.input.val(dateStr);
    this._updateAlternate(inst);
    var onSelect = this._get(inst, 'onSelect');
    if (onSelect)
      onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
    else if (inst.input)
      inst.input.trigger('change'); // fire the change event
    if (inst.inline)
      this._updateDatepicker(inst);
    else {
      this._hideDatepicker();
      this._lastInput = inst.input[0];
      if (typeof(inst.input[0]) != 'object')
        inst.input.focus(); // restore focus
      this._lastInput = null;
    }
  },

  /* Update any alternate field to synchronise with the main field. */
  _updateAlternate: function(inst) {
    var altField = this._get(inst, 'altField');
    if (altField) { // update alternate field too
      var altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');
      var date = this._getDate(inst);
      var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
      $(altField).each(function() { $(this).val(dateStr); });
    }
  },

  /* Set as beforeShowDay function to prevent selection of weekends.
     @param  date  Date - the date to customise
     @return [boolean, string] - is this date selectable?, what is its CSS class? */
  noWeekends: function(date) {
    var day = date.getDay();
    return [(day > 0 && day < 6), ''];
  },

  /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
     @param  date  Date - the date to get the week for
     @return  number - the number of the week within the year that contains this date */
  iso8601Week: function(date) {
    var checkDate = new Date(date.getTime());
    // Find Thursday of this week starting on Monday
    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
    var time = checkDate.getTime();
    checkDate.setMonth(0); // Compare with Jan 1
    checkDate.setDate(1);
    return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
  },

  /* Parse a string value into a date object.
     See formatDate below for the possible formats.

     @param  format    string - the expected format of the date
     @param  value     string - the date in the above format
     @param  settings  Object - attributes include:
                       shortYearCutoff  number - the cutoff year for determining the century (optional)
                       dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
                       dayNames         string[7] - names of the days from Sunday (optional)
                       monthNamesShort  string[12] - abbreviated names of the months (optional)
                       monthNames       string[12] - names of the months (optional)
     @return  Date - the extracted date value or null if value is blank */
  parseDate: function (format, value, settings) {
    if (format == null || value == null)
      throw 'Invalid arguments';
    value = (typeof value == 'object' ? value.toString() : value + '');
    if (value == '')
      return null;
    var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
    shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
        new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
    var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
    var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
    var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
    var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
    var year = -1;
    var month = -1;
    var day = -1;
    var doy = -1;
    var literal = false;
    // Check whether a format character is doubled
    var lookAhead = function(match) {
      var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
      if (matches)
        iFormat++;
      return matches;
    };
    // Extract a number from the string value
    var getNumber = function(match) {
      var isDoubled = lookAhead(match);
      var size = (match == '@' ? 14 : (match == '!' ? 20 :
        (match == 'y' && isDoubled ? 4 : (match == 'o' ? 3 : 2))));
      var digits = new RegExp('^\\d{1,' + size + '}');
      var num = value.substring(iValue).match(digits);
      if (!num)
        throw 'Missing number at position ' + iValue;
      iValue += num[0].length;
      return parseInt(num[0], 10);
    };
    // Extract a name from the string value and convert to an index
    var getName = function(match, shortNames, longNames) {
      var names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
        return [ [k, v] ];
      }).sort(function (a, b) {
        return -(a[1].length - b[1].length);
      });
      var index = -1;
      $.each(names, function (i, pair) {
        var name = pair[1];
        if (value.substr(iValue, name.length).toLowerCase() == name.toLowerCase()) {
          index = pair[0];
          iValue += name.length;
          return false;
        }
      });
      if (index != -1)
        return index + 1;
      else
        throw 'Unknown name at position ' + iValue;
    };
    // Confirm that a literal character matches the string value
    var checkLiteral = function() {
      if (value.charAt(iValue) != format.charAt(iFormat))
        throw 'Unexpected literal at position ' + iValue;
      iValue++;
    };
    var iValue = 0;
    for (var iFormat = 0; iFormat < format.length; iFormat++) {
      if (literal)
        if (format.charAt(iFormat) == "'" && !lookAhead("'"))
          literal = false;
        else
          checkLiteral();
      else
        switch (format.charAt(iFormat)) {
          case 'd':
            day = getNumber('d');
            break;
          case 'D':
            getName('D', dayNamesShort, dayNames);
            break;
          case 'o':
            doy = getNumber('o');
            break;
          case 'm':
            month = getNumber('m');
            break;
          case 'M':
            month = getName('M', monthNamesShort, monthNames);
            break;
          case 'y':
            year = getNumber('y');
            break;
          case '@':
            var date = new Date(getNumber('@'));
            year = date.getFullYear();
            month = date.getMonth() + 1;
            day = date.getDate();
            break;
          case '!':
            var date = new Date((getNumber('!') - this._ticksTo1970) / 10000);
            year = date.getFullYear();
            month = date.getMonth() + 1;
            day = date.getDate();
            break;
          case "'":
            if (lookAhead("'"))
              checkLiteral();
            else
              literal = true;
            break;
          default:
            checkLiteral();
        }
    }
    if (iValue < value.length){
      throw "Extra/unparsed characters found in date: " + value.substring(iValue);
    }
    if (year == -1)
      year = new Date().getFullYear();
    else if (year < 100)
      year += new Date().getFullYear() - new Date().getFullYear() % 100 +
        (year <= shortYearCutoff ? 0 : -100);
    if (doy > -1) {
      month = 1;
      day = doy;
      do {
        var dim = this._getDaysInMonth(year, month - 1);
        if (day <= dim)
          break;
        month++;
        day -= dim;
      } while (true);
    }
    var date = this._daylightSavingAdjust(new Date(year, month - 1, day));
    if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day)
      throw 'Invalid date'; // E.g. 31/02/00
    return date;
  },

  /* Standard date formats. */
  ATOM: 'yy-mm-dd', // RFC 3339 (ISO 8601)
  COOKIE: 'D, dd M yy',
  ISO_8601: 'yy-mm-dd',
  RFC_822: 'D, d M y',
  RFC_850: 'DD, dd-M-y',
  RFC_1036: 'D, d M y',
  RFC_1123: 'D, d M yy',
  RFC_2822: 'D, d M yy',
  RSS: 'D, d M y', // RFC 822
  TICKS: '!',
  TIMESTAMP: '@',
  W3C: 'yy-mm-dd', // ISO 8601

  _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
    Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

  /* Format a date object into a string value.
     The format can be combinations of the following:
     d  - day of month (no leading zero)
     dd - day of month (two digit)
     o  - day of year (no leading zeros)
     oo - day of year (three digit)
     D  - day name short
     DD - day name long
     m  - month of year (no leading zero)
     mm - month of year (two digit)
     M  - month name short
     MM - month name long
     y  - year (two digit)
     yy - year (four digit)
     @ - Unix timestamp (ms since 01/01/1970)
     ! - Windows ticks (100ns since 01/01/0001)
     '...' - literal text
     '' - single quote

     @param  format    string - the desired format of the date
     @param  date      Date - the date value to format
     @param  settings  Object - attributes include:
                       dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
                       dayNames         string[7] - names of the days from Sunday (optional)
                       monthNamesShort  string[12] - abbreviated names of the months (optional)
                       monthNames       string[12] - names of the months (optional)
     @return  string - the date in the above format */
  formatDate: function (format, date, settings) {
    if (!date)
      return '';
    var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
    var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
    var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
    var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
    // Check whether a format character is doubled
    var lookAhead = function(match) {
      var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
      if (matches)
        iFormat++;
      return matches;
    };
    // Format a number, with leading zero if necessary
    var formatNumber = function(match, value, len) {
      var num = '' + value;
      if (lookAhead(match))
        while (num.length < len)
          num = '0' + num;
      return num;
    };
    // Format a name, short or long as requested
    var formatName = function(match, value, shortNames, longNames) {
      return (lookAhead(match) ? longNames[value] : shortNames[value]);
    };
    var output = '';
    var literal = false;
    if (date)
      for (var iFormat = 0; iFormat < format.length; iFormat++) {
        if (literal)
          if (format.charAt(iFormat) == "'" && !lookAhead("'"))
            literal = false;
          else
            output += format.charAt(iFormat);
        else
          switch (format.charAt(iFormat)) {
            case 'd':
              output += formatNumber('d', date.getDate(), 2);
              break;
            case 'D':
              output += formatName('D', date.getDay(), dayNamesShort, dayNames);
              break;
            case 'o':
              output += formatNumber('o',
                Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
              break;
            case 'm':
              output += formatNumber('m', date.getMonth() + 1, 2);
              break;
            case 'M':
              output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
              break;
            case 'y':
              output += (lookAhead('y') ? date.getFullYear() :
                (date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);
              break;
            case '@':
              output += date.getTime();
              break;
            case '!':
              output += date.getTime() * 10000 + this._ticksTo1970;
              break;
            case "'":
              if (lookAhead("'"))
                output += "'";
              else
                literal = true;
              break;
            default:
              output += format.charAt(iFormat);
          }
      }
    return output;
  },

  /* Extract all possible characters from the date format. */
  _possibleChars: function (format) {
    var chars = '';
    var literal = false;
    // Check whether a format character is doubled
    var lookAhead = function(match) {
      var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
      if (matches)
        iFormat++;
      return matches;
    };
    for (var iFormat = 0; iFormat < format.length; iFormat++)
      if (literal)
        if (format.charAt(iFormat) == "'" && !lookAhead("'"))
          literal = false;
        else
          chars += format.charAt(iFormat);
      else
        switch (format.charAt(iFormat)) {
          case 'd': case 'm': case 'y': case '@':
            chars += '0123456789';
            break;
          case 'D': case 'M':
            return null; // Accept anything
          case "'":
            if (lookAhead("'"))
              chars += "'";
            else
              literal = true;
            break;
          default:
            chars += format.charAt(iFormat);
        }
    return chars;
  },

  /* Get a setting value, defaulting if necessary. */
  _get: function(inst, name) {
    return inst.settings[name] !== undefined ?
      inst.settings[name] : this._defaults[name];
  },

  /* Parse existing date and initialise date picker. */
  _setDateFromField: function(inst, noDefault) {
    if (inst.input.val() == inst.lastVal) {
      return;
    }
    var dateFormat = this._get(inst, 'dateFormat');
    var dates = inst.lastVal = inst.input ? inst.input.val() : null;
    var date, defaultDate;
    date = defaultDate = this._getDefaultDate(inst);
    var settings = this._getFormatConfig(inst);
    try {
      date = this.parseDate(dateFormat, dates, settings) || defaultDate;
    } catch (event) {
      this.log(event);
      dates = (noDefault ? '' : dates);
    }
    inst.selectedDay = date.getDate();
    inst.drawMonth = inst.selectedMonth = date.getMonth();
    inst.drawYear = inst.selectedYear = date.getFullYear();
    inst.currentDay = (dates ? date.getDate() : 0);
    inst.currentMonth = (dates ? date.getMonth() : 0);
    inst.currentYear = (dates ? date.getFullYear() : 0);
    this._adjustInstDate(inst);
  },

  /* Retrieve the default date shown on opening. */
  _getDefaultDate: function(inst) {
    return this._restrictMinMax(inst,
      this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));
  },

  /* A date may be specified as an exact value or a relative one. */
  _determineDate: function(inst, date, defaultDate) {
    var offsetNumeric = function(offset) {
      var date = new Date();
      date.setDate(date.getDate() + offset);
      return date;
    };
    var offsetString = function(offset) {
      try {
        return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
          offset, $.datepicker._getFormatConfig(inst));
      }
      catch (e) {
        // Ignore
      }
      var date = (offset.toLowerCase().match(/^c/) ?
        $.datepicker._getDate(inst) : null) || new Date();
      var year = date.getFullYear();
      var month = date.getMonth();
      var day = date.getDate();
      var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
      var matches = pattern.exec(offset);
      while (matches) {
        switch (matches[2] || 'd') {
          case 'd' : case 'D' :
            day += parseInt(matches[1],10); break;
          case 'w' : case 'W' :
            day += parseInt(matches[1],10) * 7; break;
          case 'm' : case 'M' :
            month += parseInt(matches[1],10);
            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
            break;
          case 'y': case 'Y' :
            year += parseInt(matches[1],10);
            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
            break;
        }
        matches = pattern.exec(offset);
      }
      return new Date(year, month, day);
    };
    var newDate = (date == null || date === '' ? defaultDate : (typeof date == 'string' ? offsetString(date) :
      (typeof date == 'number' ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
    newDate = (newDate && newDate.toString() == 'Invalid Date' ? defaultDate : newDate);
    if (newDate) {
      newDate.setHours(0);
      newDate.setMinutes(0);
      newDate.setSeconds(0);
      newDate.setMilliseconds(0);
    }
    return this._daylightSavingAdjust(newDate);
  },

  /* Handle switch to/from daylight saving.
     Hours may be non-zero on daylight saving cut-over:
     > 12 when midnight changeover, but then cannot generate
     midnight datetime, so jump to 1AM, otherwise reset.
     @param  date  (Date) the date to check
     @return  (Date) the corrected date */
  _daylightSavingAdjust: function(date) {
    if (!date) return null;
    date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
    return date;
  },

  /* Set the date(s) directly. */
  _setDate: function(inst, date, noChange) {
    var clear = !date;
    var origMonth = inst.selectedMonth;
    var origYear = inst.selectedYear;
    var newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
    inst.selectedDay = inst.currentDay = newDate.getDate();
    inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
    inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
    if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) && !noChange)
      this._notifyChange(inst);
    this._adjustInstDate(inst);
    if (inst.input) {
      inst.input.val(clear ? '' : this._formatDate(inst));
    }
  },

  /* Retrieve the date(s) directly. */
  _getDate: function(inst) {
    var startDate = (!inst.currentYear || (inst.input && inst.input.val() == '') ? null :
      this._daylightSavingAdjust(new Date(
      inst.currentYear, inst.currentMonth, inst.currentDay)));
      return startDate;
  },

  /* Generate the HTML for the current state of the date picker. */
  _generateHTML: function(inst) {
    var today = new Date();
    today = this._daylightSavingAdjust(
      new Date(today.getFullYear(), today.getMonth(), today.getDate())); // clear time
    var isRTL = this._get(inst, 'isRTL');
    var showButtonPanel = this._get(inst, 'showButtonPanel');
    var hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext');
    var navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat');
    var numMonths = this._getNumberOfMonths(inst);
    var showCurrentAtPos = this._get(inst, 'showCurrentAtPos');
    var stepMonths = this._get(inst, 'stepMonths');
    var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
    var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
      new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
    var minDate = this._getMinMaxDate(inst, 'min');
    var maxDate = this._getMinMaxDate(inst, 'max');
    var drawMonth = inst.drawMonth - showCurrentAtPos;
    var drawYear = inst.drawYear;
    if (drawMonth < 0) {
      drawMonth += 12;
      drawYear--;
    }
    if (maxDate) {
      var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
        maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
      maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
      while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
        drawMonth--;
        if (drawMonth < 0) {
          drawMonth = 11;
          drawYear--;
        }
      }
    }
    inst.drawMonth = drawMonth;
    inst.drawYear = drawYear;
    var prevText = this._get(inst, 'prevText');
    prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
      this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
      this._getFormatConfig(inst)));
    var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
      '<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_' + dpuuid +
      '.datepicker._adjustDate(\'#' + inst.id + '\', -' + stepMonths + ', \'M\');"' +
      ' title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>' :
      (hideIfNoPrevNext ? '' : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+ prevText +'"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>'));
    var nextText = this._get(inst, 'nextText');
    nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
      this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
      this._getFormatConfig(inst)));
    var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
      '<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_' + dpuuid +
      '.datepicker._adjustDate(\'#' + inst.id + '\', +' + stepMonths + ', \'M\');"' +
      ' title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>' :
      (hideIfNoPrevNext ? '' : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+ nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>'));
    var currentText = this._get(inst, 'currentText');
    var gotoDate = (this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today);
    currentText = (!navigationAsDateFormat ? currentText :
      this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
    var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_' + dpuuid +
      '.datepicker._hideDatepicker();">' + this._get(inst, 'closeText') + '</button>' : '');
    var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : '') +
      (this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_' + dpuuid +
      '.datepicker._gotoToday(\'#' + inst.id + '\');"' +
      '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';
    var firstDay = parseInt(this._get(inst, 'firstDay'),10);
    firstDay = (isNaN(firstDay) ? 0 : firstDay);
    var showWeek = this._get(inst, 'showWeek');
    var dayNames = this._get(inst, 'dayNames');
    var dayNamesShort = this._get(inst, 'dayNamesShort');
    var dayNamesMin = this._get(inst, 'dayNamesMin');
    var monthNames = this._get(inst, 'monthNames');
    var monthNamesShort = this._get(inst, 'monthNamesShort');
    var beforeShowDay = this._get(inst, 'beforeShowDay');
    var showOtherMonths = this._get(inst, 'showOtherMonths');
    var selectOtherMonths = this._get(inst, 'selectOtherMonths');
    var calculateWeek = this._get(inst, 'calculateWeek') || this.iso8601Week;
    var defaultDate = this._getDefaultDate(inst);
    var html = '';
    for (var row = 0; row < numMonths[0]; row++) {
      var group = '';
      this.maxRows = 4;
      for (var col = 0; col < numMonths[1]; col++) {
        var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
        var cornerClass = ' ui-corner-all';
        var calender = '';
        if (isMultiMonth) {
          calender += '<div class="ui-datepicker-group';
          if (numMonths[1] > 1)
            switch (col) {
              case 0: calender += ' ui-datepicker-group-first';
                cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left'); break;
              case numMonths[1]-1: calender += ' ui-datepicker-group-last';
                cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right'); break;
              default: calender += ' ui-datepicker-group-middle'; cornerClass = ''; break;
            }
          calender += '">';
        }
        calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' +
          (/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : '') +
          (/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : '') +
          this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
          row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
          '</div><table class="ui-datepicker-calendar"><thead>' +
          '<tr>';
        var thead = (showWeek ? '<th class="ui-datepicker-week-col">' + this._get(inst, 'weekHeader') + '</th>' : '');
        for (var dow = 0; dow < 7; dow++) { // days of the week
          var day = (dow + firstDay) % 7;
          thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : '') + '>' +
            '<span title="' + dayNames[day] + '">' + dayNamesMin[day] + '</span></th>';
        }
        calender += thead + '</tr></thead><tbody>';
        var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
        if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth)
          inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
        var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
        var curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
        var numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
        this.maxRows = numRows;
        var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
        for (var dRow = 0; dRow < numRows; dRow++) { // create date picker rows
          calender += '<tr>';
          var tbody = (!showWeek ? '' : '<td class="ui-datepicker-week-col">' +
            this._get(inst, 'calculateWeek')(printDate) + '</td>');
          for (var dow = 0; dow < 7; dow++) { // create date picker days
            var daySettings = (beforeShowDay ?
              beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, '']);
            var otherMonth = (printDate.getMonth() != drawMonth);
            var unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
              (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
            tbody += '<td class="' +
              ((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends
              (otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months
              ((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || // user pressed key
              (defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ?
              // or defaultDate is current printedDate and defaultDate is selectedDate
              ' ' + this._dayOverClass : '') + // highlight selected day
              (unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled': '') +  // highlight unselectable days
              (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates
              (printDate.getTime() == currentDate.getTime() ? ' ' + this._currentClass : '') + // highlight selected day
              (printDate.getTime() == today.getTime() ? ' ui-datepicker-today' : '')) + '"' + // highlight today (if different)
              ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : '') + // cell title
              (unselectable ? '' : ' onclick="DP_jQuery_' + dpuuid + '.datepicker._selectDay(\'#' +
              inst.id + '\',' + printDate.getMonth() + ',' + printDate.getFullYear() + ', this);return false;"') + '>' + // actions
              (otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months
              (unselectable ? '<span class="ui-state-default">' + printDate.getDate() + '</span>' : '<a class="ui-state-default' +
              (printDate.getTime() == today.getTime() ? ' ui-state-highlight' : '') +
              (printDate.getTime() == currentDate.getTime() ? ' ui-state-active' : '') + // highlight selected day
              (otherMonth ? ' ui-priority-secondary' : '') + // distinguish dates from other months
              '" href="#">' + printDate.getDate() + '</a>')) + '</td>'; // display selectable date
            printDate.setDate(printDate.getDate() + 1);
            printDate = this._daylightSavingAdjust(printDate);
          }
          calender += tbody + '</tr>';
        }
        drawMonth++;
        if (drawMonth > 11) {
          drawMonth = 0;
          drawYear++;
        }
        calender += '</tbody></table>' + (isMultiMonth ? '</div>' + 
              ((numMonths[0] > 0 && col == numMonths[1]-1) ? '<div class="ui-datepicker-row-break"></div>' : '') : '');
        group += calender;
      }
      html += group;
    }
    html += buttonPanel + ($.browser.msie && parseInt($.browser.version,10) < 7 && !inst.inline ?
      '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : '');
    inst._keyEvent = false;
    return html;
  },

  /* Generate the month and year header. */
  _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
      secondary, monthNames, monthNamesShort) {
    var changeMonth = this._get(inst, 'changeMonth');
    var changeYear = this._get(inst, 'changeYear');
    var showMonthAfterYear = this._get(inst, 'showMonthAfterYear');
    var html = '<div class="ui-datepicker-title">';
    var monthHtml = '';
    // month selection
    if (secondary || !changeMonth)
      monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + '</span>';
    else {
      var inMinYear = (minDate && minDate.getFullYear() == drawYear);
      var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);
      monthHtml += '<select class="ui-datepicker-month" ' +
        'onchange="DP_jQuery_' + dpuuid + '.datepicker._selectMonthYear(\'#' + inst.id + '\', this, \'M\');" ' +
        '>';
      for (var month = 0; month < 12; month++) {
        if ((!inMinYear || month >= minDate.getMonth()) &&
            (!inMaxYear || month <= maxDate.getMonth()))
          monthHtml += '<option value="' + month + '"' +
            (month == drawMonth ? ' selected="selected"' : '') +
            '>' + monthNamesShort[month] + '</option>';
      }
      monthHtml += '</select>';
    }
    if (!showMonthAfterYear)
      html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');
    // year selection
    if ( !inst.yearshtml ) {
      inst.yearshtml = '';
      if (secondary || !changeYear)
        html += '<span class="ui-datepicker-year">' + drawYear + '</span>';
      else {
        // determine range of years to display
        var years = this._get(inst, 'yearRange').split(':');
        var thisYear = new Date().getFullYear();
        var determineYear = function(value) {
          var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) :
            (value.match(/[+-].*/) ? thisYear + parseInt(value, 10) :
            parseInt(value, 10)));
          return (isNaN(year) ? thisYear : year);
        };
        var year = determineYear(years[0]);
        var endYear = Math.max(year, determineYear(years[1] || ''));
        year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
        endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
        inst.yearshtml += '<select class="ui-datepicker-year" ' +
          'onchange="DP_jQuery_' + dpuuid + '.datepicker._selectMonthYear(\'#' + inst.id + '\', this, \'Y\');" ' +
          '>';
        for (; year <= endYear; year++) {
          inst.yearshtml += '<option value="' + year + '"' +
            (year == drawYear ? ' selected="selected"' : '') +
            '>' + year + '</option>';
        }
        inst.yearshtml += '</select>';
        
        html += inst.yearshtml;
        inst.yearshtml = null;
      }
    }
    html += this._get(inst, 'yearSuffix');
    if (showMonthAfterYear)
      html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;
    html += '</div>'; // Close datepicker_header
    return html;
  },

  /* Adjust one of the date sub-fields. */
  _adjustInstDate: function(inst, offset, period) {
    var year = inst.drawYear + (period == 'Y' ? offset : 0);
    var month = inst.drawMonth + (period == 'M' ? offset : 0);
    var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) +
      (period == 'D' ? offset : 0);
    var date = this._restrictMinMax(inst,
      this._daylightSavingAdjust(new Date(year, month, day)));
    inst.selectedDay = date.getDate();
    inst.drawMonth = inst.selectedMonth = date.getMonth();
    inst.drawYear = inst.selectedYear = date.getFullYear();
    if (period == 'M' || period == 'Y')
      this._notifyChange(inst);
  },

  /* Ensure a date is within any min/max bounds. */
  _restrictMinMax: function(inst, date) {
    var minDate = this._getMinMaxDate(inst, 'min');
    var maxDate = this._getMinMaxDate(inst, 'max');
    var newDate = (minDate && date < minDate ? minDate : date);
    newDate = (maxDate && newDate > maxDate ? maxDate : newDate);
    return newDate;
  },

  /* Notify change of month/year. */
  _notifyChange: function(inst) {
    var onChange = this._get(inst, 'onChangeMonthYear');
    if (onChange)
      onChange.apply((inst.input ? inst.input[0] : null),
        [inst.selectedYear, inst.selectedMonth + 1, inst]);
  },

  /* Determine the number of months to show. */
  _getNumberOfMonths: function(inst) {
    var numMonths = this._get(inst, 'numberOfMonths');
    return (numMonths == null ? [1, 1] : (typeof numMonths == 'number' ? [1, numMonths] : numMonths));
  },

  /* Determine the current maximum date - ensure no time components are set. */
  _getMinMaxDate: function(inst, minMax) {
    return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);
  },

  /* Find the number of days in a given month. */
  _getDaysInMonth: function(year, month) {
    return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
  },

  /* Find the day of the week of the first of a month. */
  _getFirstDayOfMonth: function(year, month) {
    return new Date(year, month, 1).getDay();
  },

  /* Determines if we should allow a "next/prev" month display change. */
  _canAdjustMonth: function(inst, offset, curYear, curMonth) {
    var numMonths = this._getNumberOfMonths(inst);
    var date = this._daylightSavingAdjust(new Date(curYear,
      curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
    if (offset < 0)
      date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
    return this._isInRange(inst, date);
  },

  /* Is the given date in the accepted range? */
  _isInRange: function(inst, date) {
    var minDate = this._getMinMaxDate(inst, 'min');
    var maxDate = this._getMinMaxDate(inst, 'max');
    return ((!minDate || date.getTime() >= minDate.getTime()) &&
      (!maxDate || date.getTime() <= maxDate.getTime()));
  },

  /* Provide the configuration settings for formatting/parsing. */
  _getFormatConfig: function(inst) {
    var shortYearCutoff = this._get(inst, 'shortYearCutoff');
    shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
      new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
    return {shortYearCutoff: shortYearCutoff,
      dayNamesShort: this._get(inst, 'dayNamesShort'), dayNames: this._get(inst, 'dayNames'),
      monthNamesShort: this._get(inst, 'monthNamesShort'), monthNames: this._get(inst, 'monthNames')};
  },

  /* Format the given date for display. */
  _formatDate: function(inst, day, month, year) {
    if (!day) {
      inst.currentDay = inst.selectedDay;
      inst.currentMonth = inst.selectedMonth;
      inst.currentYear = inst.selectedYear;
    }
    var date = (day ? (typeof day == 'object' ? day :
      this._daylightSavingAdjust(new Date(year, month, day))) :
      this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
    return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));
  }
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */ 
function bindHover(dpDiv) {
  var selector = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';
  return dpDiv.bind('mouseout', function(event) {
      var elem = $( event.target ).closest( selector );
      if ( !elem.length ) {
        return;
      }
      elem.removeClass( "ui-state-hover ui-datepicker-prev-hover ui-datepicker-next-hover" );
    })
    .bind('mouseover', function(event) {
      var elem = $( event.target ).closest( selector );
      if ($.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0]) ||
          !elem.length ) {
        return;
      }
      elem.parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
      elem.addClass('ui-state-hover');
      if (elem.hasClass('ui-datepicker-prev')) elem.addClass('ui-datepicker-prev-hover');
      if (elem.hasClass('ui-datepicker-next')) elem.addClass('ui-datepicker-next-hover');
    });
}

/* jQuery extend now ignores nulls! */
function extendRemove(target, props) {
  $.extend(target, props);
  for (var name in props)
    if (props[name] == null || props[name] == undefined)
      target[name] = props[name];
  return target;
};

/* Determine whether an object is an array. */
function isArray(a) {
  return (a && (($.browser.safari && typeof a == 'object' && a.length) ||
    (a.constructor && a.constructor.toString().match(/\Array\(\)/))));
};

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
                    Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){
  
  /* Verify an empty collection wasn't passed - Fixes #6976 */
  if ( !this.length ) {
    return this;
  }
  
  /* Initialise the date picker. */
  if (!$.datepicker.initialized) {
    $(document).mousedown($.datepicker._checkExternalClick).
      find('body').append($.datepicker.dpDiv);
    $.datepicker.initialized = true;
  }

  var otherArgs = Array.prototype.slice.call(arguments, 1);
  if (typeof options == 'string' && (options == 'isDisabled' || options == 'getDate' || options == 'widget'))
    return $.datepicker['_' + options + 'Datepicker'].
      apply($.datepicker, [this[0]].concat(otherArgs));
  if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')
    return $.datepicker['_' + options + 'Datepicker'].
      apply($.datepicker, [this[0]].concat(otherArgs));
  return this.each(function() {
    typeof options == 'string' ?
      $.datepicker['_' + options + 'Datepicker'].
        apply($.datepicker, [this].concat(otherArgs)) :
      $.datepicker._attachDatepicker(this, options);
  });
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "@VERSION";

// Workaround for #4055
// Add another global to avoid noConflict issues with inline event handlers
window['DP_jQuery_' + dpuuid] = $;

})(jQuery);

/*
 * jQuery timepicker addon
 * By: Trent Richardson [http://trentrichardson.com]
 * Version 1.0.5
 * Last Modified: 10/06/2012
 *
 * Copyright 2012 Trent Richardson
 * You may use this project under MIT or GPL licenses.
 * http://trentrichardson.com/Impromptu/GPL-LICENSE.txt
 * http://trentrichardson.com/Impromptu/MIT-LICENSE.txt
 */

/*jslint evil: true, white: false, undef: false, nomen: false */

(function($) {

	/*
	* Lets not redefine timepicker, Prevent "Uncaught RangeError: Maximum call stack size exceeded"
	*/
	$.ui.timepicker = $.ui.timepicker || {};
	if ($.ui.timepicker.version) {
		return;
	}

	/*
	* Extend jQueryUI, get it started with our version number
	*/
	$.extend($.ui, {
		timepicker: {
			version: "1.0.5"
		}
	});

	/* 
	* Timepicker manager.
	* Use the singleton instance of this class, $.timepicker, to interact with the time picker.
	* Settings for (groups of) time pickers are maintained in an instance object,
	* allowing multiple different settings on the same page.
	*/
	function Timepicker() {
		this.regional = []; // Available regional settings, indexed by language code
		this.regional[''] = { // Default regional settings
			currentText: 'Now',
			closeText: 'Done',
			ampm: false,
			amNames: ['AM', 'A'],
			pmNames: ['PM', 'P'],
			timeFormat: 'hh:mm tt',
			timeSuffix: '',
			timeOnlyTitle: 'Choose Time',
			timeText: 'Time',
			hourText: 'Hour',
			minuteText: 'Minute',
			secondText: 'Second',
			millisecText: 'Millisecond',
			timezoneText: 'Time Zone',
			isRTL: false
		};
		this._defaults = { // Global defaults for all the datetime picker instances
			showButtonPanel: true,
			timeOnly: false,
			showHour: true,
			showMinute: true,
			showSecond: false,
			showMillisec: false,
			showTimezone: false,
			showTime: true,
			stepHour: 1,
			stepMinute: 1,
			stepSecond: 1,
			stepMillisec: 1,
			hour: 0,
			minute: 0,
			second: 0,
			millisec: 0,
			timezone: null,
			useLocalTimezone: false,
			defaultTimezone: "+0000",
			hourMin: 0,
			minuteMin: 0,
			secondMin: 0,
			millisecMin: 0,
			hourMax: 23,
			minuteMax: 59,
			secondMax: 59,
			millisecMax: 999,
			minDateTime: null,
			maxDateTime: null,
			onSelect: null,
			hourGrid: 0,
			minuteGrid: 0,
			secondGrid: 0,
			millisecGrid: 0,
			alwaysSetTime: true,
			separator: ' ',
			altFieldTimeOnly: true,
			altSeparator: null,
			altTimeSuffix: null,
			showTimepicker: true,
			timezoneIso8601: false,
			timezoneList: null,
			addSliderAccess: false,
			sliderAccessArgs: null,
			controlType: 'slider',
			defaultValue: null
		};
		$.extend(this._defaults, this.regional['']);
	}

	$.extend(Timepicker.prototype, {
		$input: null,
		$altInput: null,
		$timeObj: null,
		inst: null,
		hour_slider: null,
		minute_slider: null,
		second_slider: null,
		millisec_slider: null,
		timezone_select: null,
		hour: 0,
		minute: 0,
		second: 0,
		millisec: 0,
		timezone: null,
		defaultTimezone: "+0000",
		hourMinOriginal: null,
		minuteMinOriginal: null,
		secondMinOriginal: null,
		millisecMinOriginal: null,
		hourMaxOriginal: null,
		minuteMaxOriginal: null,
		secondMaxOriginal: null,
		millisecMaxOriginal: null,
		ampm: '',
		formattedDate: '',
		formattedTime: '',
		formattedDateTime: '',
		timezoneList: null,
		units: ['hour','minute','second','millisec'],
		control: null,

		/* 
		* Override the default settings for all instances of the time picker.
		* @param  settings  object - the new settings to use as defaults (anonymous object)
		* @return the manager object
		*/
		setDefaults: function(settings) {
			extendRemove(this._defaults, settings || {});
			return this;
		},

		/*
		* Create a new Timepicker instance
		*/
		_newInst: function($input, o) {
			var tp_inst = new Timepicker(),
				inlineSettings = {},
                fns = {},
		        overrides, i;

			for (var attrName in this._defaults) {
				if(this._defaults.hasOwnProperty(attrName)){
					var attrValue = $input.attr('time:' + attrName);
					if (attrValue) {
						try {
							inlineSettings[attrName] = eval(attrValue);
						} catch (err) {
							inlineSettings[attrName] = attrValue;
						}
					}
				}
			}
		    overrides = {
		        beforeShow: function (input, dp_inst) {
		            if ($.isFunction(tp_inst._defaults.evnts.beforeShow)) {
		                return tp_inst._defaults.evnts.beforeShow.call($input[0], input, dp_inst, tp_inst);
		            }
		        },
		        onChangeMonthYear: function (year, month, dp_inst) {
		            // Update the time as well : this prevents the time from disappearing from the $input field.
		            tp_inst._updateDateTime(dp_inst);
		            if ($.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)) {
		                tp_inst._defaults.evnts.onChangeMonthYear.call($input[0], year, month, dp_inst, tp_inst);
		            }
		        },
		        onClose: function (dateText, dp_inst) {
		            if (tp_inst.timeDefined === true && $input.val() !== '') {
		                tp_inst._updateDateTime(dp_inst);
		            }
		            if ($.isFunction(tp_inst._defaults.evnts.onClose)) {
		                tp_inst._defaults.evnts.onClose.call($input[0], dateText, dp_inst, tp_inst);
		            }
		        }
		    };
		    for (i in overrides) {
		        if (overrides.hasOwnProperty(i)) {
		            fns[i] = o[i] || null;
		        }
		    }
		    tp_inst._defaults = $.extend({}, this._defaults, inlineSettings, o, overrides, {
		        evnts:fns,
		        timepicker: tp_inst // add timepicker as a property of datepicker: $.datepicker._get(dp_inst, 'timepicker');
		    });
			tp_inst.amNames = $.map(tp_inst._defaults.amNames, function(val) {
				return val.toUpperCase();
			});
			tp_inst.pmNames = $.map(tp_inst._defaults.pmNames, function(val) {
				return val.toUpperCase();
			});

			// controlType is string - key to our this._controls
			if(typeof(tp_inst._defaults.controlType) === 'string'){
				if(tp_inst._defaults.controlType == 'slider' && $.fn.slider === undefined){
					tp_inst._defaults.controlType = 'select';
				}
				tp_inst.control = tp_inst._controls[tp_inst._defaults.controlType];
			}
			// controlType is an object and must implement create, options, value methods
			else{ 
				tp_inst.control = tp_inst._defaults.controlType;
			}

			if (tp_inst._defaults.timezoneList === null) {
				var timezoneList = ['-1200', '-1100', '-1000', '-0930', '-0900', '-0800', '-0700', '-0600', '-0500', '-0430', '-0400', '-0330', '-0300', '-0200', '-0100', '+0000', 
									'+0100', '+0200', '+0300', '+0330', '+0400', '+0430', '+0500', '+0530', '+0545', '+0600', '+0630', '+0700', '+0800', '+0845', '+0900', '+0930', 
									'+1000', '+1030', '+1100', '+1130', '+1200', '+1245', '+1300', '+1400'];

				if (tp_inst._defaults.timezoneIso8601) {
					timezoneList = $.map(timezoneList, function(val) {
						return val == '+0000' ? 'Z' : (val.substring(0, 3) + ':' + val.substring(3));
					});
				}
				tp_inst._defaults.timezoneList = timezoneList;
			}

			tp_inst.timezone = tp_inst._defaults.timezone;
			tp_inst.hour = tp_inst._defaults.hour;
			tp_inst.minute = tp_inst._defaults.minute;
			tp_inst.second = tp_inst._defaults.second;
			tp_inst.millisec = tp_inst._defaults.millisec;
			tp_inst.ampm = '';
			tp_inst.$input = $input;

			if (o.altField) {
				tp_inst.$altInput = $(o.altField).css({
					cursor: 'pointer'
				}).focus(function() {
					$input.trigger("focus");
				});
			}

			if (tp_inst._defaults.minDate === 0 || tp_inst._defaults.minDateTime === 0) {
				tp_inst._defaults.minDate = new Date();
			}
			if (tp_inst._defaults.maxDate === 0 || tp_inst._defaults.maxDateTime === 0) {
				tp_inst._defaults.maxDate = new Date();
			}

			// datepicker needs minDate/maxDate, timepicker needs minDateTime/maxDateTime..
			if (tp_inst._defaults.minDate !== undefined && tp_inst._defaults.minDate instanceof Date) {
				tp_inst._defaults.minDateTime = new Date(tp_inst._defaults.minDate.getTime());
			}
			if (tp_inst._defaults.minDateTime !== undefined && tp_inst._defaults.minDateTime instanceof Date) {
				tp_inst._defaults.minDate = new Date(tp_inst._defaults.minDateTime.getTime());
			}
			if (tp_inst._defaults.maxDate !== undefined && tp_inst._defaults.maxDate instanceof Date) {
				tp_inst._defaults.maxDateTime = new Date(tp_inst._defaults.maxDate.getTime());
			}
			if (tp_inst._defaults.maxDateTime !== undefined && tp_inst._defaults.maxDateTime instanceof Date) {
				tp_inst._defaults.maxDate = new Date(tp_inst._defaults.maxDateTime.getTime());
			}
			tp_inst.$input.bind('focus', function() {
				tp_inst._onFocus();
			});

			return tp_inst;
		},

		/*
		* add our sliders to the calendar
		*/
		_addTimePicker: function(dp_inst) {
			var currDT = (this.$altInput && this._defaults.altFieldTimeOnly) ? this.$input.val() + ' ' + this.$altInput.val() : this.$input.val();

			this.timeDefined = this._parseTime(currDT);
			this._limitMinMaxDateTime(dp_inst, false);
			this._injectTimePicker();
		},

		/*
		* parse the time string from input value or _setTime
		*/
		_parseTime: function(timeString, withDate) {
			if (!this.inst) {
				this.inst = $.datepicker._getInst(this.$input[0]);
			}

			if (withDate || !this._defaults.timeOnly) {
				var dp_dateFormat = $.datepicker._get(this.inst, 'dateFormat');
				try {
					var parseRes = parseDateTimeInternal(dp_dateFormat, this._defaults.timeFormat, timeString, $.datepicker._getFormatConfig(this.inst), this._defaults);
					if (!parseRes.timeObj) {
						return false;
					}
					$.extend(this, parseRes.timeObj);
				} catch (err) {
					return false;
				}
				return true;
			} else {
				var timeObj = $.datepicker.parseTime(this._defaults.timeFormat, timeString, this._defaults);
				if (!timeObj) {
					return false;
				}
				$.extend(this, timeObj);
				return true;
			}
		},

		/*
		* generate and inject html for timepicker into ui datepicker
		*/
		_injectTimePicker: function() {
			var $dp = this.inst.dpDiv,
				o = this.inst.settings,
				tp_inst = this,
				litem = '',
				uitem = '',
				max = {},
				gridSize = {},
				size = null;

			// Prevent displaying twice
			if ($dp.find("div.ui-timepicker-div").length === 0 && o.showTimepicker) {
				var noDisplay = ' style="display:none;"',
					html = '<div class="ui-timepicker-div'+ (o.isRTL? ' ui-timepicker-rtl' : '') +'"><dl>' + '<dt style="padding-top: 5px" class="ui_tpicker_time_label"' + ((o.showTime) ? '' : noDisplay) + '>' + o.timeText + '</dt>' + 
								'<dd style="padding-top: 7px" class="ui_tpicker_time"' + ((o.showTime) ? '' : noDisplay) + '></dd>';

				// Create the markup
				for(var i=0,l=this.units.length; i<l; i++){
					litem = this.units[i];
					uitem = litem.substr(0,1).toUpperCase() + litem.substr(1);
					// Added by Peter Medeiros:
					// - Figure out what the hour/minute/second max should be based on the step values.
					// - Example: if stepMinute is 15, then minMax is 45.
					max[litem] = parseInt((o[litem+'Max'] - ((o[litem+'Max'] - o[litem+'Min']) % o['step'+uitem])), 10);
					gridSize[litem] = 0;

					html += '<dt class="ui_tpicker_'+ litem +'_label"' + ((o['show'+uitem]) ? '' : noDisplay) + '>' + o[litem +'Text'] + '</dt>' + 
								'<dd class="ui_tpicker_'+ litem +'"><div class="ui_tpicker_'+ litem +'_slider"' + ((o['show'+uitem]) ? '' : noDisplay) + '></div>';

					if (o['show'+uitem] && o[litem+'Grid'] > 0) {
						html += '<div style="padding-left: 1px"><table class="ui-tpicker-grid-label"><tr>';

						if(litem == 'hour'){
							for (var h = o[litem+'Min']; h <= max[litem]; h += parseInt(o[litem+'Grid'], 10)) {
								gridSize[litem]++;
								var tmph = (o.ampm && h > 12) ? h - 12 : h;
								if (tmph < 10) {
									tmph = '0' + tmph;
								}
								if (o.ampm) {
									if (h === 0) {
										tmph = 12 + 'a';
									} else {
										if (h < 12) {
											tmph += 'a';
										} else {
											tmph += 'p';
										}
									}
								}
								html += '<td data-for="'+litem+'">' + tmph + '</td>';
							}
						}
						else{
							for (var m = o[litem+'Min']; m <= max[litem]; m += parseInt(o[litem+'Grid'], 10)) {
								gridSize[litem]++;
								html += '<td data-for="'+litem+'">' + ((m < 10) ? '0' : '') + m + '</td>';
							}
						}

						html += '</tr></table></div>';
					}
					html += '</dd>';
				}
				
				// Timezone
				html += '<dt class="ui_tpicker_timezone_label" style="width:100px" ' + ((o.showTimezone) ? '' : noDisplay) + '>' + o.timezoneText + '</dt>';
				html += '<dd class="ui_tpicker_timezone" ' + ((o.showTimezone) ? '' : noDisplay) + '></dd>';

				// Create the elements from string
				html += '</dl></div>';
				var $tp = $(html);

				// if we only want time picker...
				if (o.timeOnly === true) {
					$tp.prepend('<div class="ui-widget-header ui-helper-clearfix ui-corner-all">' + '<div class="ui-datepicker-title">' + o.timeOnlyTitle + '</div>' + '</div>');
					$dp.find('.ui-datepicker-header, .ui-datepicker-calendar').hide();
				}
				
				// add sliders, adjust grids, add events
				for(var i=0,l=tp_inst.units.length; i<l; i++){
					litem = tp_inst.units[i];
					uitem = litem.substr(0,1).toUpperCase() + litem.substr(1);
					
					// add the slider
					tp_inst[litem+'_slider'] = tp_inst.control.create(tp_inst, $tp.find('.ui_tpicker_'+litem+'_slider'), litem, tp_inst[litem], o[litem+'Min'], max[litem], o['step'+uitem]);

					// adjust the grid and add click event
					if (o['show'+uitem] && o[litem+'Grid'] > 0) {
						size = 100 * gridSize[litem] * o[litem+'Grid'] / (max[litem] - o[litem+'Min']);
						$tp.find('.ui_tpicker_'+litem+' table').css({
							width: size + "%",
							marginLeft: o.isRTL? '0' : ((size / (-2 * gridSize[litem])) + "%"),
							marginRight: o.isRTL? ((size / (-2 * gridSize[litem])) + "%") : '0',
							borderCollapse: 'collapse'
						}).find("td").click(function(e){
								var $t = $(this),
									h = $t.html(),
									f = $t.data('for'); // loses scope, so we use data-for

								if (f == 'hour' && o.ampm) {
									var ap = h.substring(2).toLowerCase(),
										aph = parseInt(h.substring(0, 2), 10);
									if (ap == 'a') {
										if (aph == 12) {
											h = 0;
										} else {
											h = aph;
										}
									} else if (aph == 12) {
										h = 12;
									} else {
										h = aph + 12;
									}
								}
								tp_inst.control.value(tp_inst, tp_inst[f+'_slider'], parseInt(h,10));

								tp_inst._onTimeChange();
								tp_inst._onSelectHandler();
							})
						.css({
								cursor: 'pointer',
								width: (100 / gridSize[litem]) + '%',
								textAlign: 'center',
								overflow: 'hidden'
							});
					} // end if grid > 0
				} // end for loop

				// Add timezone options
				this.timezone_select = $tp.find('.ui_tpicker_timezone').append('<select></select>').find("select");
				$.fn.append.apply(this.timezone_select,
				$.map(o.timezoneList, function(val, idx) {
					return $("<option />").val(typeof val == "object" ? val.value : val).text(typeof val == "object" ? val.label : val);
				}));
				if (typeof(this.timezone) != "undefined" && this.timezone !== null && this.timezone !== "") {
					var local_date = new Date(this.inst.selectedYear, this.inst.selectedMonth, this.inst.selectedDay, 12);
					var local_timezone = $.timepicker.timeZoneOffsetString(local_date);
					if (local_timezone == this.timezone) {
						selectLocalTimeZone(tp_inst);
					} else {
						this.timezone_select.val(this.timezone);
					}
				} else {
					if (typeof(this.hour) != "undefined" && this.hour !== null && this.hour !== "") {
						this.timezone_select.val(o.defaultTimezone);
					} else {
						selectLocalTimeZone(tp_inst);
					}
				}
				this.timezone_select.change(function() {
					tp_inst._defaults.useLocalTimezone = false;
					tp_inst._onTimeChange();
				});
				// End timezone options
				
				// inject timepicker into datepicker
				var $buttonPanel = $dp.find('.ui-datepicker-buttonpane');
				if ($buttonPanel.length) {
					$buttonPanel.before($tp);
				} else {
					$dp.append($tp);
				}

				this.$timeObj = $tp.find('.ui_tpicker_time');

				if (this.inst !== null) {
					var timeDefined = this.timeDefined;
					this._onTimeChange();
					this.timeDefined = timeDefined;
				}

				// slideAccess integration: http://trentrichardson.com/2011/11/11/jquery-ui-sliders-and-touch-accessibility/
				if (this._defaults.addSliderAccess) {
					var sliderAccessArgs = this._defaults.sliderAccessArgs,
						rtl = this._defaults.isRTL;
					sliderAccessArgs.isRTL = rtl;
						
					setTimeout(function() { // fix for inline mode
						if ($tp.find('.ui-slider-access').length === 0) {
							$tp.find('.ui-slider:visible').sliderAccess(sliderAccessArgs);

							// fix any grids since sliders are shorter
							var sliderAccessWidth = $tp.find('.ui-slider-access:eq(0)').outerWidth(true);
							if (sliderAccessWidth) {
								$tp.find('table:visible').each(function() {
									var $g = $(this),
										oldWidth = $g.outerWidth(),
										oldMarginLeft = $g.css(rtl? 'marginRight':'marginLeft').toString().replace('%', ''),
										newWidth = oldWidth - sliderAccessWidth,
										newMarginLeft = ((oldMarginLeft * newWidth) / oldWidth) + '%',
										css = { width: newWidth, marginRight: 0, marginLeft: 0 };
									css[rtl? 'marginRight':'marginLeft'] = newMarginLeft;
									$g.css(css);
								});
							}
						}
					}, 10);
				}
				// end slideAccess integration

			}
		},

		/*
		* This function tries to limit the ability to go outside the
		* min/max date range
		*/
		_limitMinMaxDateTime: function(dp_inst, adjustSliders) {
			var o = this._defaults,
				dp_date = new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay);

			if (!this._defaults.showTimepicker) {
				return;
			} // No time so nothing to check here

			if ($.datepicker._get(dp_inst, 'minDateTime') !== null && $.datepicker._get(dp_inst, 'minDateTime') !== undefined && dp_date) {
				var minDateTime = $.datepicker._get(dp_inst, 'minDateTime'),
					minDateTimeDate = new Date(minDateTime.getFullYear(), minDateTime.getMonth(), minDateTime.getDate(), 0, 0, 0, 0);

				if (this.hourMinOriginal === null || this.minuteMinOriginal === null || this.secondMinOriginal === null || this.millisecMinOriginal === null) {
					this.hourMinOriginal = o.hourMin;
					this.minuteMinOriginal = o.minuteMin;
					this.secondMinOriginal = o.secondMin;
					this.millisecMinOriginal = o.millisecMin;
				}

				if (dp_inst.settings.timeOnly || minDateTimeDate.getTime() == dp_date.getTime()) {
					this._defaults.hourMin = minDateTime.getHours();
					if (this.hour <= this._defaults.hourMin) {
						this.hour = this._defaults.hourMin;
						this._defaults.minuteMin = minDateTime.getMinutes();
						if (this.minute <= this._defaults.minuteMin) {
							this.minute = this._defaults.minuteMin;
							this._defaults.secondMin = minDateTime.getSeconds();
							if (this.second <= this._defaults.secondMin) {
								this.second = this._defaults.secondMin;
								this._defaults.millisecMin = minDateTime.getMilliseconds();
							} else {
								if (this.millisec < this._defaults.millisecMin) {
									this.millisec = this._defaults.millisecMin;
								}
								this._defaults.millisecMin = this.millisecMinOriginal;
							}
						} else {
							this._defaults.secondMin = this.secondMinOriginal;
							this._defaults.millisecMin = this.millisecMinOriginal;
						}
					} else {
						this._defaults.minuteMin = this.minuteMinOriginal;
						this._defaults.secondMin = this.secondMinOriginal;
						this._defaults.millisecMin = this.millisecMinOriginal;
					}
				} else {
					this._defaults.hourMin = this.hourMinOriginal;
					this._defaults.minuteMin = this.minuteMinOriginal;
					this._defaults.secondMin = this.secondMinOriginal;
					this._defaults.millisecMin = this.millisecMinOriginal;
				}
			}

			if ($.datepicker._get(dp_inst, 'maxDateTime') !== null && $.datepicker._get(dp_inst, 'maxDateTime') !== undefined && dp_date) {
				var maxDateTime = $.datepicker._get(dp_inst, 'maxDateTime'),
					maxDateTimeDate = new Date(maxDateTime.getFullYear(), maxDateTime.getMonth(), maxDateTime.getDate(), 0, 0, 0, 0);

				if (this.hourMaxOriginal === null || this.minuteMaxOriginal === null || this.secondMaxOriginal === null) {
					this.hourMaxOriginal = o.hourMax;
					this.minuteMaxOriginal = o.minuteMax;
					this.secondMaxOriginal = o.secondMax;
					this.millisecMaxOriginal = o.millisecMax;
				}

				if (dp_inst.settings.timeOnly || maxDateTimeDate.getTime() == dp_date.getTime()) {
					this._defaults.hourMax = maxDateTime.getHours();
					if (this.hour >= this._defaults.hourMax) {
						this.hour = this._defaults.hourMax;
						this._defaults.minuteMax = maxDateTime.getMinutes();
						if (this.minute >= this._defaults.minuteMax) {
							this.minute = this._defaults.minuteMax;
							this._defaults.secondMax = maxDateTime.getSeconds();
						} else if (this.second >= this._defaults.secondMax) {
							this.second = this._defaults.secondMax;
							this._defaults.millisecMax = maxDateTime.getMilliseconds();
						} else {
							if (this.millisec > this._defaults.millisecMax) {
								this.millisec = this._defaults.millisecMax;
							}
							this._defaults.millisecMax = this.millisecMaxOriginal;
						}
					} else {
						this._defaults.minuteMax = this.minuteMaxOriginal;
						this._defaults.secondMax = this.secondMaxOriginal;
						this._defaults.millisecMax = this.millisecMaxOriginal;
					}
				} else {
					this._defaults.hourMax = this.hourMaxOriginal;
					this._defaults.minuteMax = this.minuteMaxOriginal;
					this._defaults.secondMax = this.secondMaxOriginal;
					this._defaults.millisecMax = this.millisecMaxOriginal;
				}
			}

			if (adjustSliders !== undefined && adjustSliders === true) {
				var hourMax = parseInt((this._defaults.hourMax - ((this._defaults.hourMax - this._defaults.hourMin) % this._defaults.stepHour)), 10),
					minMax = parseInt((this._defaults.minuteMax - ((this._defaults.minuteMax - this._defaults.minuteMin) % this._defaults.stepMinute)), 10),
					secMax = parseInt((this._defaults.secondMax - ((this._defaults.secondMax - this._defaults.secondMin) % this._defaults.stepSecond)), 10),
					millisecMax = parseInt((this._defaults.millisecMax - ((this._defaults.millisecMax - this._defaults.millisecMin) % this._defaults.stepMillisec)), 10);

				if (this.hour_slider) {
					this.control.options(this, this.hour_slider, { min: this._defaults.hourMin, max: hourMax });
					this.control.value(this, this.hour_slider, this.hour);
				}
				if (this.minute_slider) {
					this.control.options(this, this.minute_slider, { min: this._defaults.minuteMin, max: minMax });
					this.control.value(this, this.minute_slider, this.minute);
				}
				if (this.second_slider) {
					this.control.options(this, this.second_slider, { min: this._defaults.secondMin, max: secMax });
					this.control.value(this, this.second_slider, this.second);
				}
				if (this.millisec_slider) {
					this.control.options(this, this.millisec_slider, { min: this._defaults.millisecMin, max: millisecMax });
					this.control.value(this, this.millisec_slider, this.millisec);
				}
			}

		},

		/*
		* when a slider moves, set the internal time...
		* on time change is also called when the time is updated in the text field
		*/
		_onTimeChange: function() {
			var hour = (this.hour_slider) ? this.control.value(this, this.hour_slider) : false,
				minute = (this.minute_slider) ? this.control.value(this, this.minute_slider) : false,
				second = (this.second_slider) ? this.control.value(this, this.second_slider) : false,
				millisec = (this.millisec_slider) ? this.control.value(this, this.millisec_slider) : false,
				timezone = (this.timezone_select) ? this.timezone_select.val() : false,
				o = this._defaults;

			if (typeof(hour) == 'object') {
				hour = false;
			}
			if (typeof(minute) == 'object') {
				minute = false;
			}
			if (typeof(second) == 'object') {
				second = false;
			}
			if (typeof(millisec) == 'object') {
				millisec = false;
			}
			if (typeof(timezone) == 'object') {
				timezone = false;
			}

			if (hour !== false) {
				hour = parseInt(hour, 10);
			}
			if (minute !== false) {
				minute = parseInt(minute, 10);
			}
			if (second !== false) {
				second = parseInt(second, 10);
			}
			if (millisec !== false) {
				millisec = parseInt(millisec, 10);
			}

			var ampm = o[hour < 12 ? 'amNames' : 'pmNames'][0];

			// If the update was done in the input field, the input field should not be updated.
			// If the update was done using the sliders, update the input field.
			var hasChanged = (hour != this.hour || minute != this.minute || second != this.second || millisec != this.millisec 
								|| (this.ampm.length > 0 && (hour < 12) != ($.inArray(this.ampm.toUpperCase(), this.amNames) !== -1)) 
								|| ((this.timezone === null && timezone != this.defaultTimezone) || (this.timezone !== null && timezone != this.timezone)));

			if (hasChanged) {

				if (hour !== false) {
					this.hour = hour;
				}
				if (minute !== false) {
					this.minute = minute;
				}
				if (second !== false) {
					this.second = second;
				}
				if (millisec !== false) {
					this.millisec = millisec;
				}
				if (timezone !== false) {
					this.timezone = timezone;
				}

				if (!this.inst) {
					this.inst = $.datepicker._getInst(this.$input[0]);
				}

				this._limitMinMaxDateTime(this.inst, true);
			}
			if (o.ampm) {
				this.ampm = ampm;
			}

			this.formattedTime = $.datepicker.formatTime(this._defaults.timeFormat, this, this._defaults);
			if (this.$timeObj) {
				this.$timeObj.text(this.formattedTime + o.timeSuffix);
			}
			this.timeDefined = true;
			if (hasChanged) {
				this._updateDateTime();
			}
		},

		/*
		* call custom onSelect.
		* bind to sliders slidestop, and grid click.
		*/
		_onSelectHandler: function() {
			var onSelect = this._defaults.onSelect || this.inst.settings.onSelect;
			var inputEl = this.$input ? this.$input[0] : null;
			if (onSelect && inputEl) {
				onSelect.apply(inputEl, [this.formattedDateTime, this]);
			}
		},

		/*
		* update our input with the new date time..
		*/
		_updateDateTime: function(dp_inst) {
			dp_inst = this.inst || dp_inst;
			var dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),
				dateFmt = $.datepicker._get(dp_inst, 'dateFormat'),
				formatCfg = $.datepicker._getFormatConfig(dp_inst),
				timeAvailable = dt !== null && this.timeDefined;
			this.formattedDate = $.datepicker.formatDate(dateFmt, (dt === null ? new Date() : dt), formatCfg);
			var formattedDateTime = this.formattedDate;

			/*
			* remove following lines to force every changes in date picker to change the input value
			* Bug descriptions: when an input field has a default value, and click on the field to pop up the date picker. 
			* If the user manually empty the value in the input field, the date picker will never change selected value.
			*/
			//if (dp_inst.lastVal !== undefined && (dp_inst.lastVal.length > 0 && this.$input.val().length === 0)) {
			//	return;
			//}

			if (this._defaults.timeOnly === true) {
				formattedDateTime = this.formattedTime;
			} else if (this._defaults.timeOnly !== true && (this._defaults.alwaysSetTime || timeAvailable)) {
				formattedDateTime += this._defaults.separator + this.formattedTime + this._defaults.timeSuffix;
			}

			this.formattedDateTime = formattedDateTime;

			if (!this._defaults.showTimepicker) {
				this.$input.val(this.formattedDate);
			} else if (this.$altInput && this._defaults.altFieldTimeOnly === true) {
				this.$altInput.val(this.formattedTime);
				this.$input.val(this.formattedDate);
			} else if (this.$altInput) {
				this.$input.val(formattedDateTime);
				var altFormattedDateTime = '',
					altSeparator = this._defaults.altSeparator ? this._defaults.altSeparator : this._defaults.separator,
					altTimeSuffix = this._defaults.altTimeSuffix ? this._defaults.altTimeSuffix : this._defaults.timeSuffix;
				if (this._defaults.altFormat) altFormattedDateTime = $.datepicker.formatDate(this._defaults.altFormat, (dt === null ? new Date() : dt), formatCfg);
				else altFormattedDateTime = this.formattedDate;
				if (altFormattedDateTime) altFormattedDateTime += altSeparator;
				if (this._defaults.altTimeFormat) altFormattedDateTime += $.datepicker.formatTime(this._defaults.altTimeFormat, this, this._defaults) + altTimeSuffix;
				else altFormattedDateTime += this.formattedTime + altTimeSuffix;
				this.$altInput.val(altFormattedDateTime);
			} else {
				this.$input.val(formattedDateTime);
			}

			this.$input.trigger("change");
		},

		_onFocus: function() {
			if (!this.$input.val() && this._defaults.defaultValue) {
				this.$input.val(this._defaults.defaultValue);
				var inst = $.datepicker._getInst(this.$input.get(0)),
					tp_inst = $.datepicker._get(inst, 'timepicker');
				if (tp_inst) {
					if (tp_inst._defaults.timeOnly && (inst.input.val() != inst.lastVal)) {
						try {
							$.datepicker._updateDatepicker(inst);
						} catch (err) {
							$.datepicker.log(err);
						}
					}
				}
			}
		},

		/*
		* Small abstraction to control types
		* We can add more, just be sure to follow the pattern: create, options, value
		*/
		_controls: {
			// slider methods
			slider: {
				create: function(tp_inst, obj, unit, val, min, max, step){
					var rtl = tp_inst._defaults.isRTL; // if rtl go -60->0 instead of 0->60
					return obj.prop('slide', null).slider({
						orientation: "horizontal",
						value: rtl? val*-1 : val,
						min: rtl? max*-1 : min,
						max: rtl? min*-1 : max,
						step: step,
						slide: function(event, ui) {
							tp_inst.control.value(tp_inst, $(this), rtl? ui.value*-1:ui.value);
							tp_inst._onTimeChange();
						},
						stop: function(event, ui) {
							tp_inst._onSelectHandler();
						}
					});	
				},
				options: function(tp_inst, obj, opts, val){
					if(tp_inst._defaults.isRTL){
						if(typeof(opts) == 'string'){
							if(opts == 'min' || opts == 'max'){
								if(val !== undefined)
									return obj.slider(opts, val*-1);
								return Math.abs(obj.slider(opts));
							}
							return obj.slider(opts);
						}
						var min = opts.min, 
							max = opts.max;
						opts.min = opts.max = null;
						if(min !== undefined)
							opts.max = min * -1;
						if(max !== undefined)
							opts.min = max * -1;
						return obj.slider(opts);
					}
					if(typeof(opts) == 'string' && val !== undefined)
							return obj.slider(opts, val);
					return obj.slider(opts);
				},
				value: function(tp_inst, obj, val){
					if(tp_inst._defaults.isRTL){
						if(val !== undefined)
							return obj.slider('value', val*-1);
						return Math.abs(obj.slider('value'));
					}
					if(val !== undefined)
						return obj.slider('value', val);
					return obj.slider('value');
				}
			},
			// select methods
			select: {
				create: function(tp_inst, obj, unit, val, min, max, step){
					var sel = '<select class="ui-timepicker-select" data-unit="'+ unit +'" data-min="'+ min +'" data-max="'+ max +'" data-step="'+ step +'">',
						ul = tp_inst._defaults.timeFormat.indexOf('t') !== -1? 'toLowerCase':'toUpperCase',
						m = 0;

					for(var i=min; i<=max; i+=step){						
						sel += '<option value="'+ i +'"'+ (i==val? ' selected':'') +'>';
						if(unit == 'hour' && tp_inst._defaults.ampm){
							m = i%12;
							if(i === 0 || i === 12) sel += '12';
							else if(m < 10) sel += '0'+ m.toString();
							else sel += m;
							sel += ' '+ ((i < 12)? tp_inst._defaults.amNames[0] : tp_inst._defaults.pmNames[0])[ul]();
						}
						else if(unit == 'millisec' || i >= 10) sel += i;
						else sel += '0'+ i.toString();
						sel += '</option>';
					}
					sel += '</select>';

					obj.children('select').remove();

					$(sel).appendTo(obj).change(function(e){
						tp_inst._onTimeChange();
						tp_inst._onSelectHandler();
					});

					return obj;
				},
				options: function(tp_inst, obj, opts, val){
					var o = {},
						$t = obj.children('select');
					if(typeof(opts) == 'string'){
						if(val === undefined)
							return $t.data(opts);
						o[opts] = val;	
					}
					else o = opts;
					return tp_inst.control.create(tp_inst, obj, $t.data('unit'), $t.val(), o.min || $t.data('min'), o.max || $t.data('max'), o.step || $t.data('step'));
				},
				value: function(tp_inst, obj, val){
					var $t = obj.children('select');
					if(val !== undefined)
						return $t.val(val);
					return $t.val();
				}
			}
		} // end _controls

	});

	$.fn.extend({
		/*
		* shorthand just to use timepicker..
		*/
		timepicker: function(o) {
			o = o || {};
			var tmp_args = Array.prototype.slice.call(arguments);

			if (typeof o == 'object') {
				tmp_args[0] = $.extend(o, {
					timeOnly: true
				});
			}

			return $(this).each(function() {
				$.fn.datetimepicker.apply($(this), tmp_args);
			});
		},

		/*
		* extend timepicker to datepicker
		*/
		datetimepicker: function(o) {
			o = o || {};
			var tmp_args = arguments;
                        var $input = this;
			if (typeof(o) == 'string') {
				if (o == 'getDate') {
					return $.fn.datepicker.apply($(this[0]), tmp_args);
				} 
                                /**
                                 * Next thing hacked in by JRoig
                                 */
                                else if (o == "getSelectedTimezone")
                                  {
                                       var inst = $.datepicker._get($.datepicker._getInst( $input[0] ), 'timepicker');
                                        return inst.timezone;
                                      //selectLocalTimeZone(tp_inst);
                                  }
                                
                                // end of the jroig addendum.
                                else {
					return this.each(function() {
						var $t = $(this);
						$t.datepicker.apply($t, tmp_args);
					});
				}
			} else {
				return this.each(function() {
					var $t = $(this);
					$t.datepicker($.timepicker._newInst($t, o)._defaults);
				});
			}
		}
	});

	/*
	* Public Utility to parse date and time
	*/
	$.datepicker.parseDateTime = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {
		var parseRes = parseDateTimeInternal(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings);
		if (parseRes.timeObj) {
			var t = parseRes.timeObj;
			parseRes.date.setHours(t.hour, t.minute, t.second, t.millisec);
		}

		return parseRes.date;
	};

	/*
	* Public utility to parse time
	*/
	$.datepicker.parseTime = function(timeFormat, timeString, options) {
		
		// pattern for standard and localized AM/PM markers
		var getPatternAmpm = function(amNames, pmNames) {
			var markers = [];
			if (amNames) {
				$.merge(markers, amNames);
			}
			if (pmNames) {
				$.merge(markers, pmNames);
			}
			markers = $.map(markers, function(val) {
				return val.replace(/[.*+?|()\[\]{}\\]/g, '\\$&');
			});
			return '(' + markers.join('|') + ')?';
		};

		// figure out position of time elements.. cause js cant do named captures
		var getFormatPositions = function(timeFormat) {
			var finds = timeFormat.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|t{1,2}|z|'.*?')/g),
				orders = {
					h: -1,
					m: -1,
					s: -1,
					l: -1,
					t: -1,
					z: -1
				};

			if (finds) {
				for (var i = 0; i < finds.length; i++) {
					if (orders[finds[i].toString().charAt(0)] == -1) {
						orders[finds[i].toString().charAt(0)] = i + 1;
					}
				}
			}
			return orders;
		};

		var o = extendRemove(extendRemove({}, $.timepicker._defaults), options || {});

		var regstr = '^' + timeFormat.toString()
				.replace(/(hh?|mm?|ss?|[tT]{1,2}|[lz]|'.*?')/g, function (match) {
						switch (match.charAt(0).toLowerCase()) {
							case 'h': return '(\\d?\\d)';
							case 'm': return '(\\d?\\d)';
							case 's': return '(\\d?\\d)';
							case 'l': return '(\\d?\\d?\\d)';
							case 'z': return '(z|[-+]\\d\\d:?\\d\\d|\\S+)?';
							case 't': return getPatternAmpm(o.amNames, o.pmNames);
							default:    // literal escaped in quotes
								return '(' + match.replace(/\'/g, "").replace(/(\.|\$|\^|\\|\/|\(|\)|\[|\]|\?|\+|\*)/g, function (m) { return "\\" + m; }) + ')?';
						}
					})
				.replace(/\s/g, '\\s?') +
				o.timeSuffix + '$',
			order = getFormatPositions(timeFormat),
			ampm = '',
			treg;

		treg = timeString.match(new RegExp(regstr, 'i'));

		var resTime = {
			hour: 0,
			minute: 0,
			second: 0,
			millisec: 0
		};

		if (treg) {
			if (order.t !== -1) {
				if (treg[order.t] === undefined || treg[order.t].length === 0) {
					ampm = '';
					resTime.ampm = '';
				} else {
					ampm = $.inArray(treg[order.t].toUpperCase(), o.amNames) !== -1 ? 'AM' : 'PM';
					resTime.ampm = o[ampm == 'AM' ? 'amNames' : 'pmNames'][0];
				}
			}

			if (order.h !== -1) {
				if (ampm == 'AM' && treg[order.h] == '12') {
					resTime.hour = 0; // 12am = 0 hour
				} else {
					if (ampm == 'PM' && treg[order.h] != '12') {
						resTime.hour = parseInt(treg[order.h], 10) + 12; // 12pm = 12 hour, any other pm = hour + 12
					} else {
						resTime.hour = Number(treg[order.h]);
					}
				}
			}

			if (order.m !== -1) {
				resTime.minute = Number(treg[order.m]);
			}
			if (order.s !== -1) {
				resTime.second = Number(treg[order.s]);
			}
			if (order.l !== -1) {
				resTime.millisec = Number(treg[order.l]);
			}
			if (order.z !== -1 && treg[order.z] !== undefined) {
				var tz = treg[order.z].toUpperCase();
				switch (tz.length) {
				case 1:
					// Z
					tz = o.timezoneIso8601 ? 'Z' : '+0000';
					break;
				case 5:
					// +hhmm
					if (o.timezoneIso8601) {
						tz = tz.substring(1) == '0000' ? 'Z' : tz.substring(0, 3) + ':' + tz.substring(3);
					}
					break;
				case 6:
					// +hh:mm
					if (!o.timezoneIso8601) {
						tz = tz == 'Z' || tz.substring(1) == '00:00' ? '+0000' : tz.replace(/:/, '');
					} else {
						if (tz.substring(1) == '00:00') {
							tz = 'Z';
						}
					}
					break;
				}
				resTime.timezone = tz;
			}


			return resTime;
		}

		return false;
	};

	/*
	* Public utility to format the time
	* format = string format of the time
	* time = a {}, not a Date() for timezones
	* options = essentially the regional[].. amNames, pmNames, ampm
	*/
	$.datepicker.formatTime = function(format, time, options) {
		options = options || {};
		options = $.extend({}, $.timepicker._defaults, options);
		time = $.extend({
			hour: 0,
			minute: 0,
			second: 0,
			millisec: 0,
			timezone: '+0000'
		}, time);

		var tmptime = format;
		var ampmName = options.amNames[0];

		var hour = parseInt(time.hour, 10);
		if (options.ampm) {
			if (hour > 11) {
				ampmName = options.pmNames[0];
				if (hour > 12) {
					hour = hour % 12;
				}
			}
			if (hour === 0) {
				hour = 12;
			}
		}
		tmptime = tmptime.replace(/(?:hh?|mm?|ss?|[tT]{1,2}|[lz]|'.*?')/g, function(match) {
			switch (match.toLowerCase()) {
			case 'hh':
				return ('0' + hour).slice(-2);
			case 'h':
				return hour;
			case 'mm':
				return ('0' + time.minute).slice(-2);
			case 'm':
				return time.minute;
			case 'ss':
				return ('0' + time.second).slice(-2);
			case 's':
				return time.second;
			case 'l':
				return ('00' + time.millisec).slice(-3);
			case 'z':
				return time.timezone === null? options.defaultTimezone : time.timezone;
			case 't':
			case 'tt':
				if (options.ampm) {
					if (match.length == 1) {
						ampmName = ampmName.charAt(0);
					}
					return match.charAt(0) === 'T' ? ampmName.toUpperCase() : ampmName.toLowerCase();
				}
				return '';
			default:
				return match.replace(/\'/g, "") || "'";
			}
		});

		tmptime = $.trim(tmptime);
		return tmptime;
	};

	/*
	* the bad hack :/ override datepicker so it doesnt close on select
	// inspired: http://stackoverflow.com/questions/1252512/jquery-datepicker-prevent-closing-picker-when-clicking-a-date/1762378#1762378
	*/
	$.datepicker._base_selectDate = $.datepicker._selectDate;
	$.datepicker._selectDate = function(id, dateStr) {
		var inst = this._getInst($(id)[0]),
			tp_inst = this._get(inst, 'timepicker');

		if (tp_inst) {
			tp_inst._limitMinMaxDateTime(inst, true);
			inst.inline = inst.stay_open = true;
			//This way the onSelect handler called from calendarpicker get the full dateTime
			this._base_selectDate(id, dateStr);
			inst.inline = inst.stay_open = false;
			this._notifyChange(inst);
			this._updateDatepicker(inst);
		} else {
			this._base_selectDate(id, dateStr);
		}
	};

	/*
	* second bad hack :/ override datepicker so it triggers an event when changing the input field
	* and does not redraw the datepicker on every selectDate event
	*/
	$.datepicker._base_updateDatepicker = $.datepicker._updateDatepicker;
	$.datepicker._updateDatepicker = function(inst) {

		// don't popup the datepicker if there is another instance already opened
		var input = inst.input[0];
		if ($.datepicker._curInst && $.datepicker._curInst != inst && $.datepicker._datepickerShowing && $.datepicker._lastInput != input) {
			return;
		}

		if (typeof(inst.stay_open) !== 'boolean' || inst.stay_open === false) {

			this._base_updateDatepicker(inst);

			// Reload the time control when changing something in the input text field.
			var tp_inst = this._get(inst, 'timepicker');
			if (tp_inst) {
				tp_inst._addTimePicker(inst);

				if (tp_inst._defaults.useLocalTimezone) { //checks daylight saving with the new date.
					var date = new Date(inst.selectedYear, inst.selectedMonth, inst.selectedDay, 12);
					selectLocalTimeZone(tp_inst, date);
					tp_inst._onTimeChange();
				}
			}
		}
	};

	/*
	* third bad hack :/ override datepicker so it allows spaces and colon in the input field
	*/
	$.datepicker._base_doKeyPress = $.datepicker._doKeyPress;
	$.datepicker._doKeyPress = function(event) {
		var inst = $.datepicker._getInst(event.target),
			tp_inst = $.datepicker._get(inst, 'timepicker');

		if (tp_inst) {
			if ($.datepicker._get(inst, 'constrainInput')) {
				var ampm = tp_inst._defaults.ampm,
					dateChars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat')),
					datetimeChars = tp_inst._defaults.timeFormat.toString()
											.replace(/[hms]/g, '')
											.replace(/TT/g, ampm ? 'APM' : '')
											.replace(/Tt/g, ampm ? 'AaPpMm' : '')
											.replace(/tT/g, ampm ? 'AaPpMm' : '')
											.replace(/T/g, ampm ? 'AP' : '')
											.replace(/tt/g, ampm ? 'apm' : '')
											.replace(/t/g, ampm ? 'ap' : '') + 
											" " + tp_inst._defaults.separator + 
											tp_inst._defaults.timeSuffix + 
											(tp_inst._defaults.showTimezone ? tp_inst._defaults.timezoneList.join('') : '') + 
											(tp_inst._defaults.amNames.join('')) + (tp_inst._defaults.pmNames.join('')) + 
											dateChars,
					chr = String.fromCharCode(event.charCode === undefined ? event.keyCode : event.charCode);
				return event.ctrlKey || (chr < ' ' || !dateChars || datetimeChars.indexOf(chr) > -1);
			}
		}

		return $.datepicker._base_doKeyPress(event);
	};

	/*
	* Fourth bad hack :/ override _updateAlternate function used in inline mode to init altField
	*/
	$.datepicker._base_updateAlternate = $.datepicker._updateAlternate;
	/* Update any alternate field to synchronise with the main field. */
	$.datepicker._updateAlternate = function(inst) {
		var tp_inst = this._get(inst, 'timepicker');
		if(tp_inst){
			var altField = tp_inst._defaults.altField;
			if (altField) { // update alternate field too
				var altFormat = tp_inst._defaults.altFormat || tp_inst._defaults.dateFormat,
					date = this._getDate(inst),
					formatCfg = $.datepicker._getFormatConfig(inst),
					altFormattedDateTime = '', 
					altSeparator = tp_inst._defaults.altSeparator ? tp_inst._defaults.altSeparator : tp_inst._defaults.separator, 
					altTimeSuffix = tp_inst._defaults.altTimeSuffix ? tp_inst._defaults.altTimeSuffix : tp_inst._defaults.timeSuffix,
					altTimeFormat = tp_inst._defaults.altTimeFormat !== undefined ? tp_inst._defaults.altTimeFormat : tp_inst._defaults.timeFormat;
				
				altFormattedDateTime += $.datepicker.formatTime(altTimeFormat, tp_inst, tp_inst._defaults) + altTimeSuffix;
				if(!tp_inst._defaults.timeOnly && !tp_inst._defaults.altFieldTimeOnly){
					if(tp_inst._defaults.altFormat)
						altFormattedDateTime = $.datepicker.formatDate(tp_inst._defaults.altFormat, (date === null ? new Date() : date), formatCfg) + altSeparator + altFormattedDateTime;
					else altFormattedDateTime = tp_inst.formattedDate + altSeparator + altFormattedDateTime;
				}
				$(altField).val(altFormattedDateTime);
			}
		}
		else{
			$.datepicker._base_updateAlternate(inst);
		}
	};

	/*
	* Override key up event to sync manual input changes.
	*/
	$.datepicker._base_doKeyUp = $.datepicker._doKeyUp;
	$.datepicker._doKeyUp = function(event) {
		var inst = $.datepicker._getInst(event.target),
			tp_inst = $.datepicker._get(inst, 'timepicker');

		if (tp_inst) {
			if (tp_inst._defaults.timeOnly && (inst.input.val() != inst.lastVal)) {
				try {
					$.datepicker._updateDatepicker(inst);
				} catch (err) {
					$.datepicker.log(err);
				}
			}
		}

		return $.datepicker._base_doKeyUp(event);
	};

	/*
	* override "Today" button to also grab the time.
	*/
	$.datepicker._base_gotoToday = $.datepicker._gotoToday;
	$.datepicker._gotoToday = function(id) {
		var inst = this._getInst($(id)[0]),
			$dp = inst.dpDiv;
		this._base_gotoToday(id);
		var tp_inst = this._get(inst, 'timepicker');
		selectLocalTimeZone(tp_inst);
		var now = new Date();
		this._setTime(inst, now);
		$('.ui-datepicker-today', $dp).click();
	};

	/*
	* Disable & enable the Time in the datetimepicker
	*/
	$.datepicker._disableTimepickerDatepicker = function(target) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');
		$(target).datepicker('getDate'); // Init selected[Year|Month|Day]
		if (tp_inst) {
			tp_inst._defaults.showTimepicker = false;
			tp_inst._updateDateTime(inst);
		}
	};

	$.datepicker._enableTimepickerDatepicker = function(target) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');
		$(target).datepicker('getDate'); // Init selected[Year|Month|Day]
		if (tp_inst) {
			tp_inst._defaults.showTimepicker = true;
			tp_inst._addTimePicker(inst); // Could be disabled on page load
			tp_inst._updateDateTime(inst);
		}
	};

	/*
	* Create our own set time function
	*/
	$.datepicker._setTime = function(inst, date) {
		var tp_inst = this._get(inst, 'timepicker');
		if (tp_inst) {
			var defaults = tp_inst._defaults;

			// calling _setTime with no date sets time to defaults
			tp_inst.hour = date ? date.getHours() : defaults.hour;
			tp_inst.minute = date ? date.getMinutes() : defaults.minute;
			tp_inst.second = date ? date.getSeconds() : defaults.second;
			tp_inst.millisec = date ? date.getMilliseconds() : defaults.millisec;

			//check if within min/max times.. 
			tp_inst._limitMinMaxDateTime(inst, true);

			tp_inst._onTimeChange();
			tp_inst._updateDateTime(inst);
		}
	};

	/*
	* Create new public method to set only time, callable as $().datepicker('setTime', date)
	*/
	$.datepicker._setTimeDatepicker = function(target, date, withDate) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');

		if (tp_inst) {
			this._setDateFromField(inst);
			var tp_date;
			if (date) {
				if (typeof date == "string") {
					tp_inst._parseTime(date, withDate);
					tp_date = new Date();
					tp_date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
				} else {
					tp_date = new Date(date.getTime());
				}
				if (tp_date.toString() == 'Invalid Date') {
					tp_date = undefined;
				}
				this._setTime(inst, tp_date);
			}
		}

	};

	/*
	* override setDate() to allow setting time too within Date object
	*/
	$.datepicker._base_setDateDatepicker = $.datepicker._setDateDatepicker;
	$.datepicker._setDateDatepicker = function(target, date) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_date = (date instanceof Date) ? new Date(date.getTime()) : date;

		this._updateDatepicker(inst);
		this._base_setDateDatepicker.apply(this, arguments);
		this._setTimeDatepicker(target, tp_date, true);
	};

	/*
	* override getDate() to allow getting time too within Date object
	*/
	$.datepicker._base_getDateDatepicker = $.datepicker._getDateDatepicker;
	$.datepicker._getDateDatepicker = function(target, noDefault) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');

		if (tp_inst) {
			// if it hasn't yet been defined, grab from field
			if(inst.lastVal === undefined){
				this._setDateFromField(inst, noDefault);
			}

			var date = this._getDate(inst);
			if (date && tp_inst._parseTime($(target).val(), tp_inst.timeOnly)) {
				date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
			}
			return date;
		}
		return this._base_getDateDatepicker(target, noDefault);
	};

	/*
	* override parseDate() because UI 1.8.14 throws an error about "Extra characters"
	* An option in datapicker to ignore extra format characters would be nicer.
	*/
	$.datepicker._base_parseDate = $.datepicker.parseDate;
	$.datepicker.parseDate = function(format, value, settings) {
		var date;
		try {
			date = this._base_parseDate(format, value, settings);
		} catch (err) {
			// Hack!  The error message ends with a colon, a space, and
			// the "extra" characters.  We rely on that instead of
			// attempting to perfectly reproduce the parsing algorithm.
			date = this._base_parseDate(format, value.substring(0,value.length-(err.length-err.indexOf(':')-2)), settings);
		}
		return date;
	};

	/*
	* override formatDate to set date with time to the input
	*/
	$.datepicker._base_formatDate = $.datepicker._formatDate;
	$.datepicker._formatDate = function(inst, day, month, year) {
		var tp_inst = this._get(inst, 'timepicker');
		if (tp_inst) {
			tp_inst._updateDateTime(inst);
			return tp_inst.$input.val();
		}
		return this._base_formatDate(inst);
	};

	/*
	* override options setter to add time to maxDate(Time) and minDate(Time). MaxDate
	*/
	$.datepicker._base_optionDatepicker = $.datepicker._optionDatepicker;
	$.datepicker._optionDatepicker = function(target, name, value) {
		var inst = this._getInst(target),
	        name_clone;
		if (!inst) {
			return null;
		}

		var tp_inst = this._get(inst, 'timepicker');
		if (tp_inst) {
			var min = null,
				max = null,
				onselect = null,
				overrides = tp_inst._defaults.evnts,
				fns = {},
				prop;
		    if (typeof name == 'string') { // if min/max was set with the string
		        if (name === 'minDate' || name === 'minDateTime') {
		            min = value;
		        } else if (name === 'maxDate' || name === 'maxDateTime') {
		            max = value;
		        } else if (name === 'onSelect') {
		            onselect = value;
		        } else if (overrides.hasOwnProperty(name)) {
		            if (typeof (value) === 'undefined') {
		                return overrides[name];
		            }
		            fns[name] = value;
		            name_clone = {}; //empty results in exiting function after overrides updated
		        }
		    } else if (typeof name == 'object') { //if min/max was set with the JSON
		        if (name.minDate) {
		            min = name.minDate;
		        } else if (name.minDateTime) {
		            min = name.minDateTime;
		        } else if (name.maxDate) {
		            max = name.maxDate;
		        } else if (name.maxDateTime) {
		            max = name.maxDateTime;
		        }
		        for (prop in overrides) {
		            if (overrides.hasOwnProperty(prop) && name[prop]) {
		                fns[prop] = name[prop];
		            }
		        }
		    }
		    for (prop in fns) {
		        if (fns.hasOwnProperty(prop)) {
		            overrides[prop] = fns[prop];
		            if (!name_clone) { name_clone = $.extend({}, name);}
		            delete name_clone[prop];
		        }
		    }
		    if (name_clone && isEmptyObject(name_clone)) { return; }
		    if (min) { //if min was set
		        if (min === 0) {
		            min = new Date();
		        } else {
		            min = new Date(min);
		        }
		        tp_inst._defaults.minDate = min;
		        tp_inst._defaults.minDateTime = min;
		    } else if (max) { //if max was set
		        if (max === 0) {
		            max = new Date();
		        } else {
		            max = new Date(max);
		        }
		        tp_inst._defaults.maxDate = max;
		        tp_inst._defaults.maxDateTime = max;
		    } else if (onselect) {
		        tp_inst._defaults.onSelect = onselect;
		    }
		}
		if (value === undefined) {
			return this._base_optionDatepicker.call($.datepicker, target, name);
		}
		return this._base_optionDatepicker.call($.datepicker, target, name_clone || name, value);
	};
	/*
	* jQuery isEmptyObject does not check hasOwnProperty - if someone has added to the object prototype,
	* it will return false for all objects
	*/
	function isEmptyObject (obj) {
		var prop;
		for (prop in obj) {
			if (obj.hasOwnProperty(obj)) {
				return false;
			}
		}
		return true;
	}
	/*
	* jQuery extend now ignores nulls!
	*/
	function extendRemove(target, props) {
		$.extend(target, props);
		for (var name in props) {
			if (props[name] === null || props[name] === undefined) {
				target[name] = props[name];
			}
		}
		return target;
	}

	/*
	* Splits datetime string into date ans time substrings.
	* Throws exception when date can't be parsed
	* Returns [dateString, timeString]
	*/
	var splitDateTime = function(dateFormat, dateTimeString, dateSettings, timeSettings) {
		try {
			// The idea is to get the number separator occurances in datetime and the time format requested (since time has 
			// fewer unknowns, mostly numbers and am/pm). We will use the time pattern to split.
			var separator = timeSettings && timeSettings.separator ? timeSettings.separator : $.timepicker._defaults.separator,
				format = timeSettings && timeSettings.timeFormat ? timeSettings.timeFormat : $.timepicker._defaults.timeFormat,
				ampm = timeSettings && timeSettings.ampm ? timeSettings.ampm : $.timepicker._defaults.ampm,
				timeParts = format.split(separator), // how many occurances of separator may be in our format?
				timePartsLen = timeParts.length,
				allParts = dateTimeString.split(separator),
				allPartsLen = allParts.length;

			// because our default ampm=false, but our default format has tt, we need to filter this out
			if(!ampm){
				timeParts = $.trim(format.replace(/t/gi,'')).split(separator);
				timePartsLen = timeParts.length;
			}

			if (allPartsLen > 1) {
				return [
						allParts.splice(0,allPartsLen-timePartsLen).join(separator),
						allParts.splice(0,timePartsLen).join(separator)
					];
			}

		} catch (err) {
			if (err.indexOf(":") >= 0) {
				// Hack!  The error message ends with a colon, a space, and
				// the "extra" characters.  We rely on that instead of
				// attempting to perfectly reproduce the parsing algorithm.
				var dateStringLength = dateTimeString.length - (err.length - err.indexOf(':') - 2),
					timeString = dateTimeString.substring(dateStringLength);

				return [$.trim(dateTimeString.substring(0, dateStringLength)), $.trim(dateTimeString.substring(dateStringLength))];

			} else {
				throw err;
			}
		}
		return [dateTimeString, ''];
	};

	/*
	* Internal function to parse datetime interval
	* Returns: {date: Date, timeObj: Object}, where
	*   date - parsed date without time (type Date)
	*   timeObj = {hour: , minute: , second: , millisec: } - parsed time. Optional
	*/
	var parseDateTimeInternal = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {
		var date;
		var splitRes = splitDateTime(dateFormat, dateTimeString, dateSettings, timeSettings);
		date = $.datepicker._base_parseDate(dateFormat, splitRes[0], dateSettings);
		if (splitRes[1] !== '') {
			var timeString = splitRes[1],
				parsedTime = $.datepicker.parseTime(timeFormat, timeString, timeSettings);

			if (parsedTime === null) {
				throw 'Wrong time format';
			}
			return {
				date: date,
				timeObj: parsedTime
			};
		} else {
			return {
				date: date
			};
		}
	};

	/*
	* Internal function to set timezone_select to the local timezone
	*/
	var selectLocalTimeZone = function(tp_inst, date) {
		if (tp_inst && tp_inst.timezone_select) {
			tp_inst._defaults.useLocalTimezone = true;
			var now = typeof date !== 'undefined' ? date : new Date();
			var tzoffset = $.timepicker.timeZoneOffsetString(now);
			if (tp_inst._defaults.timezoneIso8601) {
				tzoffset = tzoffset.substring(0, 3) + ':' + tzoffset.substring(3);
			}
			tp_inst.timezone_select.val(tzoffset);
		}
	};

	/*
	* Create a Singleton Insance
	*/
	$.timepicker = new Timepicker();

	/**
	 * Get the timezone offset as string from a date object (eg '+0530' for UTC+5.5)
	 * @param  date
	 * @return string
	 */
	$.timepicker.timeZoneOffsetString = function(date) {
		var off = date.getTimezoneOffset() * -1,
			minutes = off % 60,
			hours = (off - minutes) / 60;
		return (off >= 0 ? '+' : '-') + ('0' + (hours * 101).toString()).substr(-2) + ('0' + (minutes * 101).toString()).substr(-2);
	};

	/**
	 * Calls `timepicker()` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * n.b. The input value must be correctly formatted (reformatting is not supported)
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the timepicker() call
	 * @return jQuery
	 */
	$.timepicker.timeRange = function(startTime, endTime, options) {
		return $.timepicker.handleRange('timepicker', startTime, endTime, options);
	};

	/**
	 * Calls `datetimepicker` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
	 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
	 * @param  string method Can be used to specify the type of picker to be added
	 * @return jQuery
	 */
	$.timepicker.dateTimeRange = function(startTime, endTime, options) {
		$.timepicker.dateRange(startTime, endTime, options, 'datetimepicker');
	};

	/**
	 * Calls `method` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
	 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
	 * @param  string method Can be used to specify the type of picker to be added
	 * @return jQuery
	 */
	$.timepicker.dateRange = function(startTime, endTime, options, method) {
		method = method || 'datepicker';
		$.timepicker.handleRange(method, startTime, endTime, options);
	};

	/**
	 * Calls `method` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * @param  string method Can be used to specify the type of picker to be added
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
	 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
	 * @return jQuery
	 */
	$.timepicker.handleRange = function(method, startTime, endTime, options) {
		$.fn[method].call(startTime, $.extend({
			onClose: function(dateText, inst) {
				checkDates(this, endTime, dateText);
			},
			onSelect: function(selectedDateTime) {
				selected(this, endTime, 'minDate');
			}
		}, options, options.start));
		$.fn[method].call(endTime, $.extend({
			onClose: function(dateText, inst) {
				checkDates(this, startTime, dateText);
			},
			onSelect: function(selectedDateTime) {
				selected(this, startTime, 'maxDate');
			}
		}, options, options.end));
		// timepicker doesn't provide access to its 'timeFormat' option, 
		// nor could I get datepicker.formatTime() to behave with times, so I
		// have disabled reformatting for timepicker
		if (method != 'timepicker' && options.reformat) {
			$([startTime, endTime]).each(function() {
				var format = $(this)[method].call($(this), 'option', 'dateFormat'),
					date = new Date($(this).val());
				if ($(this).val() && date) {
					$(this).val($.datepicker.formatDate(format, date));
				}
			});
		}
		checkDates(startTime, endTime, startTime.val());

		function checkDates(changed, other, dateText) {
			if (other.val() && (new Date(startTime.val()) > new Date(endTime.val()))) {
				other.val(dateText);
			}
		}
		selected(startTime, endTime, 'minDate');
		selected(endTime, startTime, 'maxDate');

		function selected(changed, other, option) {
			if (!$(changed).val()) {
				return;
			}
			var date = $(changed)[method].call($(changed), 'getDate');
			// timepicker doesn't implement 'getDate' and returns a jQuery
			if (date.getTime) {
				$(other)[method].call($(other), 'option', option, date);
			}
		}
		return $([startTime.get(0), endTime.get(0)]);
	};

	/*
	* Keep up with the version
	*/
	$.timepicker.version = "1.0.5";

})(jQuery);
var timezones = [
         {
             "id" : "0",
             "utc_diff" : "0.00",
             "display_diff" : "+00:00",
             "name" : "Greenwich",
             "abbr" : "GMT",
             "sort_group" : "1",
             "display_name" : "Greenwich Mean Time : Dublin, Edinburgh, London"
         },
         {
            "id" : "5",
            "utc_diff" : "-10.00",
            "display_diff" : "-10:00",
            "name" : "Pacific/Honolulu",
            "abbr" : "HST",
            "sort_group" : "1",
            "display_name" : "Hawaii"
        },
        {
            "id" : "6",
            "utc_diff" : "-8.00",
            "display_diff" : "-08:00",
            "name" : "America/Anchorage",
            "abbr" : "AKDT",
            "sort_group" : "1",
            "display_name" : "Alaska"
        },
        {
            "id" : "9",
            "utc_diff" : "-7.00",
            "display_diff" : "-07:00",
            "name" : "America/Los_Angeles",
            "abbr" : "PDT",
            "sort_group" : "1",
            "display_name" : "Pacific Time (US & Canada); Tijuana"
        },
        {
            "id" : "8",
            "utc_diff" : "-7.00",
            "display_diff" : "-07:00",
            "name" : "America/Phoenix",
            "abbr" : "MST",
            "sort_group" : "1",
            "display_name" : "Arizona"
        },
        {
            "id" : "18",
            "utc_diff" : "-6.00",
            "display_diff" : "-06:00",
            "name" : "America/Boise",
            "abbr" : "MDT",
            "sort_group" : "1",
            "display_name" : "Mountain Time (US & Canada)"
        },
        {
            "id" : "25",
            "utc_diff" : "-5.00",
            "display_diff" : "-05:00",
            "name" : "America/Chicago",
            "abbr" : "CDT",
            "sort_group" : "1",
            "display_name" : "Central Time (US & Canada)"
        },
        {
            "id" : "24",
            "utc_diff" : "-5.00",
            "display_diff" : "-05:00",
            "name" : "America/Indianapolis",
            "abbr" : "EST",
            "sort_group" : "1",
            "display_name" : "Indiana"
        },
        {
            "id" : "34",
            "utc_diff" : "-4.00",
            "display_diff" : "-04:00",
            "name" : "America/New_York",
            "abbr" : "EDT",
            "sort_group" : "1",
            "display_name" : "Eastern Time (US & Canada)"
        },
        {
            "id" : "1",
            "utc_diff" : "-11.00",
            "display_diff" : "-11:00",
            "name" : "Pacific/Pago_Pago",
            "abbr" : "SST",
            "sort_group" : "2",
            "display_name" : "Midway Island, Samoa"
        },
        {
            "id" : "4",
            "utc_diff" : "-10.00",
            "display_diff" : "-10:00",
            "name" : "Pacific/Fakaofo",
            "abbr" : "TKT",
            "sort_group" : "2",
            "display_name" : "Fakaofo"
        },
        {
            "id" : "3",
            "utc_diff" : "-10.00",
            "display_diff" : "-10:00",
            "name" : "Pacific/Tahiti",
            "abbr" : "TAHT",
            "sort_group" : "2",
            "display_name" : "Tahiti"
        },
        {
            "id" : "2",
            "utc_diff" : "-10.00",
            "display_diff" : "-10:00",
            "name" : "Pacific/Rarotonga",
            "abbr" : "CKT",
            "sort_group" : "2",
            "display_name" : "Rarotonga"
        },
        {
            "id" : "7",
            "utc_diff" : "-7.00",
            "display_diff" : "-07:00",
            "name" : "America/Mazatlan",
            "abbr" : "MST",
            "sort_group" : "2",
            "display_name" : "Mazatlan, Chihuahua, Hermosillo"
        },
        {
            "id" : "13",
            "utc_diff" : "-6.00",
            "display_diff" : "-06:00",
            "name" : "America/Costa_Rica",
            "abbr" : "CST",
            "sort_group" : "2",
            "display_name" : "Costa Rica"
        },
        {
            "id" : "17",
            "utc_diff" : "-6.00",
            "display_diff" : "-06:00",
            "name" : "America/El_Salvador",
            "abbr" : "CST",
            "sort_group" : "2",
            "display_name" : "El Salvador"
        },
        {
            "id" : "16",
            "utc_diff" : "-6.00",
            "display_diff" : "-06:00",
            "name" : "America/Mexico_City",
            "abbr" : "CST",
            "sort_group" : "2",
            "display_name" : "Guadalajara, Mexico City, Monterrey"
        },
        {
            "id" : "15",
            "utc_diff" : "-6.00",
            "display_diff" : "-06:00",
            "name" : "America/Guatemala",
            "abbr" : "CST",
            "sort_group" : "2",
            "display_name" : "Guatemala"
        },
        {
            "id" : "14",
            "utc_diff" : "-6.00",
            "display_diff" : "-06:00",
            "name" : "Pacific/Galapagos",
            "abbr" : "GALT",
            "sort_group" : "2",
            "display_name" : "Galapagos"
        },
        {
            "id" : "12",
            "utc_diff" : "-6.00",
            "display_diff" : "-06:00",
            "name" : "Pacific/Easter",
            "abbr" : "EAST",
            "sort_group" : "2",
            "display_name" : "Easter Is."
        },
        {
            "id" : "11",
            "utc_diff" : "-6.00",
            "display_diff" : "-06:00",
            "name" : "America/Regina",
            "abbr" : "CST",
            "sort_group" : "2",
            "display_name" : "Saskatchewan"
        },
        {
            "id" : "10",
            "utc_diff" : "-6.00",
            "display_diff" : "-06:00",
            "name" : "America/Belize",
            "abbr" : "CST",
            "sort_group" : "2",
            "display_name" : "Belize"
        },
        {
            "id" : "19",
            "utc_diff" : "-5.00",
            "display_diff" : "-05:00",
            "name" : "America/Bogota",
            "abbr" : "COT",
            "sort_group" : "2",
            "display_name" : "Bogota, Lima, Quito"
        },
        {
            "id" : "23",
            "utc_diff" : "-5.00",
            "display_diff" : "-05:00",
            "name" : "America/Lima",
            "abbr" : "PET",
            "sort_group" : "2",
            "display_name" : "Lima"
        },
        {
            "id" : "22",
            "utc_diff" : "-5.00",
            "display_diff" : "-05:00",
            "name" : "America/Panama",
            "abbr" : "EST",
            "sort_group" : "2",
            "display_name" : "Panama"
        },
        {
            "id" : "21",
            "utc_diff" : "-5.00",
            "display_diff" : "-05:00",
            "name" : "America/Port-au-Prince",
            "abbr" : "EST",
            "sort_group" : "2",
            "display_name" : "Jamaica, Cayman, Port-au-Prince"
        },
        {
            "id" : "20",
            "utc_diff" : "-5.00",
            "display_diff" : "-05:00",
            "name" : "America/Guayaquil",
            "abbr" : "ECT",
            "sort_group" : "2",
            "display_name" : "Guayaqulil"
        },
        {
            "id" : "35",
            "utc_diff" : "-4.00",
            "display_diff" : "-04:00",
            "name" : "America/Caracas",
            "abbr" : "VET",
            "sort_group" : "2",
            "display_name" : "Caracas"
        },
        {
            "id" : "33",
            "utc_diff" : "-4.00",
            "display_diff" : "-04:00",
            "name" : "America/Puerto_Rico",
            "abbr" : "AST",
            "sort_group" : "2",
            "display_name" : "Puerto Rico, St. Kitts, St. Lucia"
        },
        {
            "id" : "32",
            "utc_diff" : "-4.00",
            "display_diff" : "-04:00",
            "name" : "America/Guyana",
            "abbr" : "GYT",
            "sort_group" : "2",
            "display_name" : "Guyana"
        },
        {
            "id" : "31",
            "utc_diff" : "-4.00",
            "display_diff" : "-04:00",
            "name" : "America/Dominica",
            "abbr" : "AST",
            "sort_group" : "2",
            "display_name" : "Dominica, Antigua, Aruba, Barbados"
        },
        {
            "id" : "30",
            "utc_diff" : "-4.00",
            "display_diff" : "-04:00",
            "name" : "America/Havana",
            "abbr" : "CDT",
            "sort_group" : "2",
            "display_name" : "Cuba"
        },
        {
            "id" : "29",
            "utc_diff" : "-4.00",
            "display_diff" : "-04:00",
            "name" : "America/Santiago",
            "abbr" : "CLT",
            "sort_group" : "2",
            "display_name" : "Santiago"
        },
        {
            "id" : "28",
            "utc_diff" : "-4.00",
            "display_diff" : "-04:00",
            "name" : "America/Cuiaba",
            "abbr" : "AMT",
            "sort_group" : "2",
            "display_name" : "Brazil"
        },
        {
            "id" : "27",
            "utc_diff" : "-4.00",
            "display_diff" : "-04:00",
            "name" : "America/La_Paz",
            "abbr" : "BOT",
            "sort_group" : "2",
            "display_name" : "Caracas, La Paz"
        },
        {
            "id" : "40",
            "utc_diff" : "-3.00",
            "display_diff" : "-03:00",
            "name" : "America/Montevideo",
            "abbr" : "UYT",
            "sort_group" : "2",
            "display_name" : "Uruguay"
        },
        {
            "id" : "39",
            "utc_diff" : "-3.00",
            "display_diff" : "-03:00",
            "name" : "America/Halifax",
            "abbr" : "ADT",
            "sort_group" : "2",
            "display_name" : "Atlantic Time (Canada)"
        },
        {
            "id" : "38",
            "utc_diff" : "-3.00",
            "display_diff" : "-03:00",
            "name" : "America/Sao_Paulo",
            "abbr" : "BRT",
            "sort_group" : "2",
            "display_name" : "Brazil"
        },
        {
            "id" : "37",
            "utc_diff" : "-3.00",
            "display_diff" : "-03:00",
            "name" : "Atlantic/Bermuda",
            "abbr" : "ADT",
            "sort_group" : "2",
            "display_name" : "Bermuda"
        },
        {
            "id" : "36",
            "utc_diff" : "-3.00",
            "display_diff" : "-03:00",
            "name" : "America/Buenos_Aires",
            "abbr" : "ART",
            "sort_group" : "2",
            "display_name" : "Argentina"
        },
        {
            "id" : "41",
            "utc_diff" : "-2.50",
            "display_diff" : "-02:30",
            "name" : "America/St_Johns",
            "abbr" : "NDT",
            "sort_group" : "2",
            "display_name" : "Newfoundland"
        },
        {
            "id" : "42",
            "utc_diff" : "-2.00",
            "display_diff" : "-02:00",
            "name" : "America/Miquelon",
            "abbr" : "PMDT",
            "sort_group" : "2",
            "display_name" : "Mid-Atlantic"
        },
        {
            "id" : "43",
            "utc_diff" : "-1.00",
            "display_diff" : "-01:00",
            "name" : "Atlantic/Cape_Verde",
            "abbr" : "CVT",
            "sort_group" : "2",
            "display_name" : "Cape Verde Is."
        },
        {
            "id" : "44",
            "utc_diff" : "0.00",
            "display_diff" : "+00:00",
            "name" : "Africa/Casablanca",
            "abbr" : "WET",
            "sort_group" : "2",
            "display_name" : "Casablanca, Monrovia"
        },
        {
            "id" : "50",
            "utc_diff" : "1.00",
            "display_diff" : "+01:00",
            "name" : "Europe/Lisbon",
            "abbr" : "WEST",
            "sort_group" : "2",
            "display_name" : "Portugal"
        },
        {
            "id" : "49",
            "utc_diff" : "1.00",
            "display_diff" : "+01:00",
            "name" : "Africa/Windhoek",
            "abbr" : "WAT",
            "sort_group" : "2",
            "display_name" : "Nigeria, Namibia"
        },
        {
            "id" : "48",
            "utc_diff" : "1.00",
            "display_diff" : "+01:00",
            "name" : "Europe/London",
            "abbr" : "BST",
            "sort_group" : "2",
            "display_name" : "British Summer Time"
        },
        {
            "id" : "47",
            "utc_diff" : "1.00",
            "display_diff" : "+01:00",
            "name" : "Atlantic/Canary",
            "abbr" : "WEST",
            "sort_group" : "2",
            "display_name" : "Canary Is."
        },
        {
            "id" : "46",
            "utc_diff" : "1.00",
            "display_diff" : "+01:00",
            "name" : "Africa/Algiers",
            "abbr" : "CET",
            "sort_group" : "2",
            "display_name" : "Algiers"
        },
        {
            "id" : "45",
            "utc_diff" : "1.00",
            "display_diff" : "+01:00",
            "name" : "Africa/Kinshasa",
            "abbr" : "WAT",
            "sort_group" : "2",
            "display_name" : "Kinshasa"
        },
        {
            "id" : "58",
            "utc_diff" : "2.00",
            "display_diff" : "+02:00",
            "name" : "Africa/Lusaka",
            "abbr" : "CAT",
            "sort_group" : "2",
            "display_name" : "Zambia, Zimbabwe"
        },
        {
            "id" : "57",
            "utc_diff" : "2.00",
            "display_diff" : "+02:00",
            "name" : "Africa/Johannesburg",
            "abbr" : "SAST",
            "sort_group" : "2",
            "display_name" : "South Africa"
        },
        {
            "id" : "56",
            "utc_diff" : "2.00",
            "display_diff" : "+02:00",
            "name" : "Europe/Rome",
            "abbr" : "CEST",
            "sort_group" : "2",
            "display_name" : "Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna"
        },
        {
            "id" : "55",
            "utc_diff" : "2.00",
            "display_diff" : "+02:00",
            "name" : "Europe/Zagreb",
            "abbr" : "CEST",
            "sort_group" : "2",
            "display_name" : "Sarajavo, Skopje, Warsaw, Zagreb"
        },
        {
            "id" : "54",
            "utc_diff" : "2.00",
            "display_diff" : "+02:00",
            "name" : "Europe/Paris",
            "abbr" : "CEST",
            "sort_group" : "2",
            "display_name" : "Brussels, Copenhagen, Madrid, Paris"
        },
        {
            "id" : "53",
            "utc_diff" : "2.00",
            "display_diff" : "+02:00",
            "name" : "Africa/Cairo",
            "abbr" : "EET",
            "sort_group" : "2",
            "display_name" : "Egypt"
        },
        {
            "id" : "52",
            "utc_diff" : "2.00",
            "display_diff" : "+02:00",
            "name" : "Europe/Prague",
            "abbr" : "CEST",
            "sort_group" : "2",
            "display_name" : "Belgrade, Bratislava, Budapest, Ljubljana, Prague"
        },
        {
            "id" : "51",
            "utc_diff" : "2.00",
            "display_diff" : "+02:00",
            "name" : "Africa/Gaborone",
            "abbr" : "CAT",
            "sort_group" : "2",
            "display_name" : "Botswana, Burundi, Democratic Republic of the Congo"
        },
        {
            "id" : "63",
            "utc_diff" : "3.00",
            "display_diff" : "+03:00",
            "name" : "Indian/Antananarivo",
            "abbr" : "EAT",
            "sort_group" : "2",
            "display_name" : "Antananarivo"
        },
        {
            "id" : "62",
            "utc_diff" : "3.00",
            "display_diff" : "+03:00",
            "name" : "Asia/Kuwait",
            "abbr" : "AST",
            "sort_group" : "2",
            "display_name" : "Kuwait, Qatar, Saudi Arabia"
        },
        {
            "id" : "61",
            "utc_diff" : "3.00",
            "display_diff" : "+03:00",
            "name" : "Asia/Jerusalem",
            "abbr" : "IDT",
            "sort_group" : "2",
            "display_name" : "Israel"
        },
        {
            "id" : "60",
            "utc_diff" : "3.00",
            "display_diff" : "+03:00",
            "name" : "Africa/Djibouti",
            "abbr" : "EAT",
            "sort_group" : "2",
            "display_name" : "Djibouti, Ethiopia, Kenya"
        },
        {
            "id" : "59",
            "utc_diff" : "3.00",
            "display_diff" : "+03:00",
            "name" : "Europe/Minsk",
            "abbr" : "EEST",
            "sort_group" : "2",
            "display_name" : "Athens, Istanbul, Minsk"
        },
        {
            "id" : "67",
            "utc_diff" : "4.00",
            "display_diff" : "+04:00",
            "name" : "Europe/Moscow",
            "abbr" : "MSD",
            "sort_group" : "2",
            "display_name" : "Moscow, St. Petersburg, Volgograd"
        },
        {
            "id" : "66",
            "utc_diff" : "4.00",
            "display_diff" : "+04:00",
            "name" : "Asia/Muscat",
            "abbr" : "GST",
            "sort_group" : "2",
            "display_name" : "Abu Dhabi, Muscat"
        },
        {
            "id" : "65",
            "utc_diff" : "4.00",
            "display_diff" : "+04:00",
            "name" : "Indian/Mauritius",
            "abbr" : "MUT",
            "sort_group" : "2",
            "display_name" : "Mauritius"
        },
        {
            "id" : "64",
            "utc_diff" : "4.00",
            "display_diff" : "+04:00",
            "name" : "Asia/Baghdad",
            "abbr" : "ADT",
            "sort_group" : "2",
            "display_name" : "Baghdad"
        },
        {
            "id" : "68",
            "utc_diff" : "4.50",
            "display_diff" : "+04:30",
            "name" : "Asia/Kabul",
            "abbr" : "AFT",
            "sort_group" : "2",
            "display_name" : "Kabul"
        },
        {
            "id" : "69",
            "utc_diff" : "4.50",
            "display_diff" : "+04:30",
            "name" : "Asia/Tehran",
            "abbr" : "IRST",
            "sort_group" : "2",
            "display_name" : "Tehran"
        },
        {
            "id" : "70",
            "utc_diff" : "5.00",
            "display_diff" : "+05:00",
            "name" : "Asia/Yerevan",
            "abbr" : "AMST",
            "sort_group" : "2",
            "display_name" : "Baku, Tbilisi, Yerevan"
        },
        {
            "id" : "71",
            "utc_diff" : "5.00",
            "display_diff" : "+05:00",
            "name" : "Asia/Tashkent",
            "abbr" : "UZT",
            "sort_group" : "2",
            "display_name" : "Islamabad, Karachi, Tashkent"
        },
        {
            "id" : "72",
            "utc_diff" : "5.50",
            "display_diff" : "+05:30",
            "name" : "Asia/Calcutta",
            "abbr" : "IST",
            "sort_group" : "2",
            "display_name" : "Chennai, Kolkata, Mumbai, New Delhi"
        },
        {
            "id" : "73",
            "utc_diff" : "5.75",
            "display_diff" : "+05:45",
            "name" : "Asia/Katmandu",
            "abbr" : "NPT",
            "sort_group" : "2",
            "display_name" : "Kathmandu"
        },
        {
            "id" : "74",
            "utc_diff" : "6.00",
            "display_diff" : "+06:00",
            "name" : "Asia/Dhaka",
            "abbr" : "BDT",
            "sort_group" : "2",
            "display_name" : "Astana, Dhaka"
        },
        {
            "id" : "75",
            "utc_diff" : "6.00",
            "display_diff" : "+06:00",
            "name" : "Asia/Yekaterinburg",
            "abbr" : "YEKST",
            "sort_group" : "2",
            "display_name" : "Ekaterinburg"
        },
        {
            "id" : "76",
            "utc_diff" : "6.50",
            "display_diff" : "+06:30",
            "name" : "Asia/Rangoon",
            "abbr" : "MMT",
            "sort_group" : "2",
            "display_name" : "Rangoon"
        },
        {
            "id" : "77",
            "utc_diff" : "7.00",
            "display_diff" : "+07:00",
            "name" : "Asia/Jakarta",
            "abbr" : "WIT",
            "sort_group" : "2",
            "display_name" : "Bangkok, Hanoi, Jakarta"
        },
        {
            "id" : "78",
            "utc_diff" : "7.00",
            "display_diff" : "+07:00",
            "name" : "Asia/Almaty",
            "abbr" : "ALMST",
            "sort_group" : "2",
            "display_name" : "Almaty, Novosibirsk"
        },
        {
            "id" : "79",
            "utc_diff" : "7.00",
            "display_diff" : "+07:00",
            "name" : "Asia/Bangkok",
            "abbr" : "ICT",
            "sort_group" : "2",
            "display_name" : "Bangkok, Hanoi, Jakarta"
        },
        {
            "id" : "84",
            "utc_diff" : "8.00",
            "display_diff" : "+08:00",
            "name" : "Asia/Taipei",
            "abbr" : "CST",
            "sort_group" : "2",
            "display_name" : "Taipei"
        },
        {
            "id" : "83",
            "utc_diff" : "8.00",
            "display_diff" : "+08:00",
            "name" : "Asia/Krasnoyarsk",
            "abbr" : "KRAST",
            "sort_group" : "2",
            "display_name" : "Krasnoyarsk"
        },
        {
            "id" : "82",
            "utc_diff" : "8.00",
            "display_diff" : "+08:00",
            "name" : "Asia/Kuala_Lumpur",
            "abbr" : "MYT",
            "sort_group" : "2",
            "display_name" : "Kuala Lumpur, Singapore"
        },
        {
            "id" : "81",
            "utc_diff" : "8.00",
            "display_diff" : "+08:00",
            "name" : "Asia/Ujung_Pandang",
            "abbr" : "CIT",
            "sort_group" : "2",
            "display_name" : "Irkutsk, Ulaan Bataar"
        },
        {
            "id" : "80",
            "utc_diff" : "8.00",
            "display_diff" : "+08:00",
            "name" : "Asia/Hong_Kong",
            "abbr" : "HKT",
            "sort_group" : "2",
            "display_name" : "Beijing, Chongqing, Hong Kong, Urumqi"
        },
        {
            "id" : "86",
            "utc_diff" : "9.00",
            "display_diff" : "+09:00",
            "name" : "Asia/Seoul",
            "abbr" : "KST",
            "sort_group" : "2",
            "display_name" : "Seoul"
        },
        {
            "id" : "85",
            "utc_diff" : "9.00",
            "display_diff" : "+09:00",
            "name" : "Asia/Tokyo",
            "abbr" : "JST",
            "sort_group" : "2",
            "display_name" : "Osaka, Sapporo, Tokyo"
        },
        {
            "id" : "87",
            "utc_diff" : "9.50",
            "display_diff" : "+09:30",
            "name" : "Australia/Darwin",
            "abbr" : "CST",
            "sort_group" : "2",
            "display_name" : "Darwin, Adelaide"
        },
        {
            "id" : "88",
            "utc_diff" : "10.00",
            "display_diff" : "+10:00",
            "name" : "Australia/Hobart",
            "abbr" : "EST",
            "sort_group" : "2",
            "display_name" : "Hobart"
        },
        {
            "id" : "89",
            "utc_diff" : "10.00",
            "display_diff" : "+10:00",
            "name" : "Australia/Melbourne",
            "abbr" : "EST",
            "sort_group" : "2",
            "display_name" : "Canberra, Melbourne, Sydney"
        },
        {
            "id" : "90",
            "utc_diff" : "10.00",
            "display_diff" : "+10:00",
            "name" : "Australia/Brisbane",
            "abbr" : "EST",
            "sort_group" : "2",
            "display_name" : "Brisbane"
        },
        {
            "id" : "91",
            "utc_diff" : "10.00",
            "display_diff" : "+10:00",
            "name" : "Pacific/Guam",
            "abbr" : "ChST",
            "sort_group" : "2",
            "display_name" : "Guam, Port Moresby"
        },
        {
            "id" : "92",
            "utc_diff" : "11.00",
            "display_diff" : "+11:00",
            "name" : "Asia/Vladivostok",
            "abbr" : "VLAST",
            "sort_group" : "2",
            "display_name" : "Vladivostok"
        },
        {
            "id" : "93",
            "utc_diff" : "11.50",
            "display_diff" : "+11:30",
            "name" : "Pacific/Norfolk",
            "abbr" : "NFT",
            "sort_group" : "2",
            "display_name" : "Norfolk (Pacific)"
        },
        {
            "id" : "94",
            "utc_diff" : "12.00",
            "display_diff" : "+12:00",
            "name" : "Pacific/Fiji",
            "abbr" : "FJT",
            "sort_group" : "2",
            "display_name" : "Fiji, Kamchatka, Marshall Is."
        },
        {
            "id" : "95",
            "utc_diff" : "12.00",
            "display_diff" : "+12:00",
            "name" : "Pacific/Auckland",
            "abbr" : "NZST",
            "sort_group" : "2",
            "display_name" : "Auckland, Wellington"
        },
        {
            "id" : "96",
            "utc_diff" : "12.75",
            "display_diff" : "+12:45",
            "name" : "Pacific/Chatham",
            "abbr" : "CHAST",
            "sort_group" : "2",
            "display_name" : "Chatham, New Zealand"
        },
        {
            "id" : "97",
            "utc_diff" : "13.00",
            "display_diff" : "+13:00",
            "name" : "Pacific/Tongatapu",
            "abbr" : "TOT",
            "sort_group" : "2",
            "display_name" : "Nuku'alofa"
        }
];

/**
 * Generic object cache...
 * ... super simple. Pretty much just does what it needs to and not much more...
 * Which is to say key / value with expiration. Added a garbage collector too... 
 * - jroig@godaddy.com
 *
 */

var WCC = WCC || {};


WCC.tmpObjCache = (function()
{
    var tmpObj = {};

    return{
        
        /**
         * Insert an item into the tmp cache
         * Expects expriation in miliseconds
         *
         */
        set: function(key, value, expiration)
        {   
            var insertObj = {};
            insertObj.value = value;
            if (expiration != undefined)
            {
                insertObj.expiration = new Date().getTime() + expiration;
            }
            tmpObj[key] = insertObj;
        },
        
        get: function(key)
        {
            this.garbageCollector();

            if (tmpObj[key] != undefined)
            {
                if (tmpObj[key].expiration != undefined && new Date().getTime() > tmpObj[key].expiration)
                {
                    delete tmpObj[key];
                    return null;
                }
                return tmpObj[key].value;
            }
            
            return null;
        },

        remove: function(key)
        {
            delete tmpObj[key];
        },

        clear: function()
        {
            tmpObj = {};
        },

        returnCache: function()
        {
            return tmpObj;
        },

        garbageCollector: function(forceCollect)
        {
            var randomNumber = Math.floor((Math.random()*100)+1);
            if (forceCollect == undefined)
            {
                forceCollect = false;
            }
            if (forceCollect != true || (forceCollect == false && randomNumber < 95))
            {
                return;
            }

            for (var k in tmpObj)
            {
                if (tmpObj[k].expiration != undefined && new Date().getTime() > tmpObj[k].expiration)
                {
                    delete tmpObj[k];
                }
            }
        }
        
        
    };
    
    
}());



/**
 * Really simple key / value caching for javascript
 *
 * ... or, at least it started that way. Now it's more sophisticated...
 *
 * Uses set / get... returns null on failure.
 *
 *
 *
 */

var WCC = WCC || {};

WCC.cache = (function(){

    // private stash of cache
    var cacheObj = null;
    var alertCacheObj = {};

    // public stuff
    return {

        /**
         * Returns the cache object
         *
         * @return obj cacheObj
         */
        returnCacheObject: function()
        {
            return cacheObj;
        },


        /**
         * Return the alert object
         *
         * @return obj alertCacheObj
         */
        returnAlertObject: function()
        {
            return alertCacheObj;
        },


        /**
         * Cache a thing...
         *
         * @param string key
         * @param object inputObject
         * @return boolean
         */
        cacheThing: function (key, inputObj)
        {
            cacheObj[key] = inputObj;

            return true;
        },


        /**
         * Get by key
         *
         * @param string key
         * @return object
         */
        getByKey: function (key)
        {
            if (cacheObj == undefined)
            {
                return null;
            }

            return cacheObj[key];
        },


        /**
         * Get by key and value
         * ... returns null if attribute or key doesn't exist
         *
         * @param string key
         * @param string attribute
         *
         * @return object
         */
        getByKeyAndAttribute: function (key, attribute)
        {
            if ( cacheObj[key] == undefined || cacheObj[key][attribute] == undefined)
            {
                return null;
            }

            return cacheObj[key][attribute];
        },


        /**
         * Set an attribute of a key
         * The key has to exist
         *
         * @param string key
         * @param string attribute
         * @param object|string
         */
        setAttribute: function (key, attribute, value)
        {
            // just leave the alerts alone!
            // we'll handle them all special...
            if (attribute == 'alerts')
            {
                return false;
            }

            if (cacheObj[key] != undefined)
            {
                cacheObj[key][attribute] = value;
            }

            return true;
        },


        deleteAttribute: function (key, attribute)
        {
            if (cacheObj[key] != undefined )
            {
                delete(cacheObj[key][attribute]);
            }

            return true;
        },


        /**
         * Delete a key from the cacheObj
         *
         * @param string key
         */
        deleteThing: function (key)
        {
            delete cacheObj[key];
            return true;
        },


        /**
         * Reset both the cacheObj and the alertCacheObj
         *
         */
        reset: function()
        {
            cacheObj = {};
            alertCacheObj = {};
        },


        resertAlerts: function()
        {
            alertCacheObj = {};
        },


        /**
         * Since the cacheObj isn't an array, you can't just return
         * a length. Instead, use this...
         *
         */
        returnItemCount: function ()
        {
            var count = 0;
            for (var k in cacheObj)
            {
                count++;
            }

            return count;
        },


        /**
         * Add an alert
         *
         * @param string accountId
         * @param string alertType
         * @param string alert
         */
        addAlert: function (accountId, alertType, alert)
        {
            var arrLen = null;

            if (alertType == 'off')
            {
                var offObj = this.searchByField(cacheObj, 'offUser', accountId);
                accountId = "_______";
                for (x = 0; x < offObj.length; x++)
                {
                    accountId = offObj[x]['displayName'];
                }
            }

            if (cacheObj[accountId] == undefined)
            {
                return;
            }

            // populate the individual user's stuff
            if (cacheObj[accountId]['alerts'] == undefined)
            {
                cacheObj[accountId]['alerts'] = new Array();
            }

            if (cacheObj[accountId]['alerts'][alertType] == undefined)
            {
                cacheObj[accountId]['alerts'][alertType] = new Array();
            }

            if (jQuery.inArray(alert, cacheObj[accountId]['alerts'][alertType]) == -1)
            {
                arrLen = cacheObj[accountId]['alerts'][alertType].length;
                cacheObj[accountId]['alerts'][alertType][arrLen] = alert;
            }

            // now, we're gonna populate the heck outta the alertArray
            if (alertCacheObj[alertType] == undefined)
            {
                alertCacheObj[alertType] = new Array();
            }
             if (alertCacheObj[alertType][alert] == undefined)
            {
                alertCacheObj[alertType][alert] = new Array();
            }

            if (jQuery.inArray(accountId, alertCacheObj[alertType][alert]) == -1)
            {
                arrLen = alertCacheObj[alertType][alert].length;
                alertCacheObj[alertType][alert][arrLen] = accountId;
            }

            return true;
        },


        removeAlert: function (accountId, alertType, alert)
        {
            if (cacheObj[accountId]['alerts'] == undefined)
            {
                return;
            }

            if (cacheObj[accountId]['alerts'][alertType] != undefined)
            {
                 for (x = 0; x < cacheObj[accountId]['alerts'][alertType].length; x++)
                 {
                     if (cacheObj[accountId]['alerts'][alertType][x] == alert)
                     {
                         delete(cacheObj[accountId]['alerts'][alertType][x]);
                     }
                 }
            }

            // remove from the cache object
            if (alertCacheObj[alertType] != undefined && alertCacheObj[alertType][alert])
            {
                for (x = 0; x < alertCacheObj[alertType][alert].length; x++)
                {
                    if (alertCacheObj[alertType][alert][x] == accountId)
                    {
                        delete(alertCacheObj[alertType][alert][x]);
                    }
                }
            }
        },


        /**
         * Return a count of the number of a certain kind of alerts
         *
         * @param string alert
         * @param type of alert - optional
         * @return int
         */
        getAlertCounts: function (alert, alertTypeInput)
        {
            var count = 0;
            for (var alertType in alertCacheObj)
            {
                if (alertTypeInput == undefined || alertType == alertTypeInput)
                {
                    if (alertCacheObj[alertType][alert] !== undefined)
                    {
                        count = count + alertCacheObj[alertType][alert].length;
                    }
                }
            }

            return count;
        },


        /**
         * Return the number of alerts for a given accountId
         *
         * @param string accountId
         * @return int
         */
        getAlertCountByAccountId: function (accountId)
        {
            var count = 0;
            if (cacheObj[accountId]['alerts'] == undefined)
            {
                return 0;
            }

            if (cacheObj[accountId]['alerts']['email'] != undefined)
            {
                count = count + cacheObj[accountId]['alerts']['email'].length;
            }
            if (cacheObj[accountId]['alerts']['cal'] != undefined)
            {
                count = count + cacheObj[accountId]['alerts']['cal'].length;
            }
            if (cacheObj[accountId]['alerts']['off'] != undefined)
            {
                count = count + cacheObj[accountId]['alerts']['off'].length;
            }

            return count;
        },


        /**
         * Return the alerts for a given accountId
         *
         * @param string accountId
         * @return array
         */
        getAlertsByAccountId: function (accountId)
        {

            if (WCC.tmpObjCache.get('getAlertsByAccountId-'+ accountId) != null)
            {
                return WCC.tmpObjCache.get('getAlertsByAccountId-'+ accountId);
            }

            var count = 0;
            var array = {};
            array.email = {};
            array.cal={};
            array.off={};
            //build main return object
    		for(cType in alertCacheObj) {
	    		for(cSubtype in alertCacheObj[cType]) {
	    			for(account in alertCacheObj[cType][cSubtype]){
	    				if(accountId == alertCacheObj[cType][cSubtype][account]){
	    					if (undefined==array[cType]){
	    						array[cType] = {};
	    					}
	    					array[cType][cSubtype]=true;
	    				}
	    			}
	    		}
    		}

            // we're just gonna cache it for 100 ms... that's enough though to make a huge difference
            WCC.tmpObjCache.set('getAlertsByAccountId-'+ accountId, array, 100);
            return array;
        },


        /**
         * Get several alerts at a time
         * .. used in filtering
         *
         * @param array alertHuntArray
         * @param array inputArray
         * @return array
         */
        getByAlertArray: function (alertHuntArray, inputArray)
        {
            // we're hunting arrays... not strings...
            if (!jQuery.isArray(alertHuntArray))
            {
                alertHuntArray = new Array(alertHuntArray);
            }

            var outputArray = [];
            for (var x = 0; x < inputArray.length; x++)
            {
                var inputObj = inputArray[x];

                // check to see if the account has alerts
                if (inputObj['alerts'] != undefined && jQuery.isArray(inputObj['alerts']))
                {
                    // psycho through the available alerts...
                    for (var alertArrayKey in inputObj['alerts'])
                    {
                        // now we shall cycle through the alertHunt like a thousand angry bees
                        for (var alertHuntKey in alertHuntArray)
                        {
                            var alertHunt = alertHuntArray[alertHuntKey];

                            if (jQuery.inArray(alertHunt,inputObj['alerts'][alertArrayKey] ) !== -1  && jQuery.inArray(inputObj,outputArray ) === -1)
                            {
                                // a match! add it to ther output obj...
                                outputArray[ outputArray.length] = inputObj;
                            }
                        }
                    }
                }
            }

            return outputArray;
        },


        /**
         * Search an array by key
         *
         * @param array inputArray
         * @param string search term
         * @return array
         */
        searchByKey: function (inputArray, searchTerm)
        {
            searchTerm = searchTerm.toLowerCase();

            var outputArray = new Array();
            for (var inputArrayKey in inputArray)
            {
                var testField = inputArrayKey.toLowerCase();
                if (testField.indexOf(searchTerm) > -1)
                {
                    outputArray[outputArray.length] = inputArray[inputArrayKey];
                }

            }

            return outputArray;
        },


        /**
         * Search an array by field and term
         * .. used in sorting and stuff
         *
         * @param array inputArray
         * @param string searchField
         * @param string searchTerm
         * @return array
         */
        searchByField: function (inputArray, searchField, searchTerm)
        {
            if (searchTerm)
            {
                searchTerm = searchTerm.toLowerCase();
            }
            else
            {
                searchTerm = '';
            }

            var outputArray = new Array();
            for (var x in inputArray)
            {
                if (inputArray[x][searchField] != undefined)
                {
                    var testField = inputArray[x][searchField].toLowerCase();
                    if (testField.indexOf(searchTerm) > -1)
                    {
                        outputArray[outputArray.length] = inputArray[x];
                    }
                }
            }

            return outputArray;
        },


        /**
         * Object sorter
         *
         * @param array inputArray
         * @param string sortBy
         * @param string sortOrder asc / desc
         */
        sortObj: function (inputArray, sortBy, sortOrder)
        {
            var workObj = jQuery.extend({}, inputArray);

            // create a clean index array that we can use as a master...
            var indexArray = [];
            $.each(workObj, function(index, value){indexArray[indexArray.length] = index;});
            indexArray.sort(this.sortAlpha);


            // clean this object up to make it sortable
            var contentArray = new Array();
            for (var k in workObj)
            {
                contentArray.push (workObj[k][sortBy]);
            }

            // sort!
            contentArray.sort(this.sortAlpha );

            // now populate the outgoing object with proper data
            var outputArray = new Array();
            for (var x = 0; x < contentArray.length; x++)
            {
                for (var y = 0;y < indexArray.length; y++)
                {
                    var checkIndex = indexArray[y];

                    if (workObj[checkIndex] !== null && workObj[checkIndex] != undefined && contentArray[x] == workObj[checkIndex][sortBy])
                    {
                        outputArray[outputArray.length] = workObj[checkIndex];
                        workObj[checkIndex] = null;
                    }
                }
            }

            // are we dealing with an alert? If so... we wannt sort special-like
            if (sortBy == 'alertArray')
            {
                outputArray.sort(this.sortByAdvancedAlertOrder );
                outputArray.reverse();
            }

            // sort by attributes on email
            if (sortBy == 'attributes')
            {
                outputArray.sort(this.sortByAttributes );
                outputArray.reverse();
            }

            if (sortOrder == 'desc')
            {
                outputArray.reverse();
            }

            return outputArray;
        },


        /**
         * For the email tab...  allows you to sort by various combined stuff
         */
        sortByAttributes: function (a,b)
        {
            var a_hasAttributes = false;
            var b_hasAttributes = false;

            // autoreply
            if (a['autoreply'] == true)
            {
                a_hasAttributes = true;
            }
            if (b['autoreply'] == true)
            {
                b_hasAttributes = true;
            }

            //catch all
            if (a['catchall'] == 1)
            {
                a_hasAttributes = true;
            }
            if (b['catchall'] == 1)
            {
                b_hasAttributes = true;
            }

            // forward
            if (a['alias_redirect'] != '')
            {
                a_hasAttributes = true;
            }
            if (b['alias_redirect'] != '')
            {
                b_hasAttributes = true;
            }

            if (a_hasAttributes == true && b_hasAttributes == false)
            {
                return 1;
            }
            if (a_hasAttributes == false && b_hasAttributes == true)
            {
                return -1;
            }

            var aDisplayName = a['displayName'].substring(0,1).toLowerCase();
            var bDisplayName = b['displayName'].substring(0,1).toLowerCase();

            if (aDisplayName < bDisplayName)
            {
                return 1;
            }
            if (bDisplayName < aDisplayName)
            {
                return -1;
            }

            return 0;
        },


        /**
         * This is the advanced stuff. The new stuff. The muthalovin' callback to sort alerts
         *
         */
        sortByAdvancedAlertOrder: function (a,b)
        {
            // if nothing's got an alert, then screw it. Who cares?
            if (a['alerts'] == undefined && b['alerts'] == undefined)
            {
                // then go by ABC...
                var aDisplayName = a['displayName'].substring(0,1).toLowerCase();
                var bDisplayName = b['displayName'].substring(0,1).toLowerCase();

                if (aDisplayName < bDisplayName)
                {
                    return 1;
                }
                if (bDisplayName < aDisplayName)
                {
                    return -1;
                }
                return 0;
            }

            // second, things with alerts will always outrank things with alerts
            if (a['alerts'] != undefined && b['alerts'] == undefined)
            {
                return 1;
            }
            if (b['alerts'] != undefined && a['alerts'] == undefined)
            {
                return -1;
            }


            // third. "High priority" kinda stuff. Like within 7 days of expiration
            if (jQuery.inArray('aboutToExpire', a['alerts']['email']) != -1 ||
                jQuery.inArray('aboutToExpire', b['alerts']['email']) != -1 ||
                jQuery.inArray('aboutToExpire', a['alerts']['cal']) != -1   ||
                jQuery.inArray('aboutToExpire', b['alerts']['cal']) != -1   ||
                jQuery.inArray('aboutToExpire', a['alerts']['off']) != -1   ||
                jQuery.inArray('aboutToExpire', b['alerts']['off']) != -1
                )
            {

                // clearly if one has it, one doesn't, the one that wins is the one that does
                if (jQuery.inArray('aboutToExpire', a['alerts']['email']) == -1  &&
                    jQuery.inArray('aboutToExpire', a['alerts']['cal']) == -1 &&
                    jQuery.inArray('aboutToExpire', a['alerts']['off']) == -1
                    )
                {
                    return -1;
                }
                if (jQuery.inArray('aboutToExpire', b['alerts']['email']) == -1 &&
                    jQuery.inArray('aboutToExpire', b['alerts']['cal']) == -1 &&
                    jQuery.inArray('aboutToExpire', b['alerts']['off']) == -1
                    )
                {
                    return 1;
                }

                // ok... then we'll sort by expiration date
                $aDaysTilExpire = 100000;
                $bDaysTilExpire = 100000;

                // a days till expire
                if (a['alerts']['emailDaysTilExpire'] < $aDaysTilExpire)
                {
                    $aDaysTilExpire = a['alerts']['emailDaysTilExpire'];
                }
                if (a['alerts']['calDaysTilExpire'] < $aDaysTilExpire)
                {
                    $aDaysTilExpire = a['alerts']['calDaysTilExpire'];
                }
                if (a['alerts']['offDaysTilExpire'] < $aDaysTilExpire)
                {
                    $aDaysTilExpire = a['alerts']['offDaysTilExpire'];
                }

                // b days till expire
                if (b['alerts']['emailDaysTilExpire'] < $aDaysTilExpire)
                {
                    $bDaysTilExpire = b['alerts']['emailDaysTilExpire'];
                }
                if (b['alerts']['calDaysTilExpire'] < $aDaysTilExpire)
                {
                    $bDaysTilExpire = b['alerts']['calDaysTilExpire'];
                }
                if (b['alerts']['offDaysTilExpire'] < $aDaysTilExpire)
                {
                    $bDaysTilExpire = b['alerts']['offDaysTilExpire'];
                }

                // if they're equal, sort by alpheticalism
                if ($aDaysTilExpire == $bDaysTilExpire)
                {
                    // then go by ABC...
                    var aDisplayName = a['displayName'].substring(0,1).toLowerCase();
                    var bDisplayName = b['displayName'].substring(0,1).toLowerCase();

                    if (aDisplayName < bDisplayName)
                    {
                        return 1;
                    }
                    if (bDisplayName < aDisplayName)
                    {
                        return -1;
                    }
                }

                if ($aDaysTilExpire < $bDaysTilExpire)
                {
                    return -1;
                }
                else
                {
                    return 1;
                }
            }


            // now email quota
            var thingResult = 0;
            thingResult = WCC.cache.thingVsThing(a, b, 'email', 'overQuota');
            if (thingResult != 0)
            {
                return thingResult;
            }

            // OFF over quota
            thingResult = WCC.cache.thingVsThing(a, b, 'off', 'overQuota');
            if (thingResult != 0)
            {
                return thingResult;
            }

            // email near quota
            thingResult = WCC.cache.thingVsThing(a, b, 'email', 'closeToQuota');
            if (thingResult != 0)
            {
                return thingResult;
            }

            // off near quota
            thingResult = WCC.cache.thingVsThing(a, b, 'off', 'closeToQuota');
            if (thingResult != 0)
            {
                return thingResult;
            }


            // at smtp relay limit
            thingResult = WCC.cache.thingVsThing(a, b, 'email', 'overSmtpQuota');
            if (thingResult != 0)
            {
                return thingResult;
            }

            // close to smtp relay limit
            thingResult = WCC.cache.thingVsThing(a, b, 'email', 'closeToSmtpQuota');
            if (thingResult != 0)
            {
                return thingResult;
            }

            // if it's none of those thing, but we've still got an alert handle it by abc...
            // then go by ABC...
            var aDisplayName = a['displayName'].substring(0,1).toLowerCase();
            var bDisplayName = b['displayName'].substring(0,1).toLowerCase();

            if (aDisplayName < bDisplayName)
            {
                return 1;
            }
            if (bDisplayName < aDisplayName)
            {
                return -1;
            }

            // fallback... we just give up. I mean... whatever.
            return 0;


        },


        /**
         * Compare a thing to a thing...
         * Used above to sort.
         */
        thingVsThing: function (a, b, alertType, alertThing)
        {
            if (jQuery.inArray(alertThing, a['alerts'][alertType]) != -1 || jQuery.inArray(alertThing, b['alerts'][alertType]) != -1 )
            {
                // eliminate the obvious stuff... likem if one doesn't have what we're looking for...
                if (jQuery.inArray(alertThing, a['alerts'][alertType]) != -1 && jQuery.inArray(alertThing, b['alerts'][alertType]) == -1)
                {
                    return 1;
                }
                if (jQuery.inArray(alertThing, b['alerts'][alertType]) != -1 && jQuery.inArray(alertThing, a['alerts'][alertType]) == -1)
                {
                    return -1;
                }

                var aDisplayName = a['displayName'].substring(0,1).toLowerCase();
                var bDisplayName = b['displayName'].substring(0,1).toLowerCase();

                if (aDisplayName < bDisplayName)
                {
                    return 1;
                }
                if (bDisplayName < aDisplayName)
                {
                    return -1;
                }
            }

            return 0;
        },


        /**
         * Callback used in sortObj
         * ... makes it so you can sort case insensitively
         *
         * @param string a
         * @param string b
         * @return int
         */
        sortAlpha: function (a, b)
        {
            if (a == null || a == undefined)
            {
                return -1;
            }
            if (b == null || b == undefined)
            {
                return 1;
            }


            // the array stuff is to handle alert arrays...
            if ($.isArray(a))
            {
                return 1;
            }
            else
            {
                if ($.isNumeric(a) == true || a == NaN)
                {
                    var x = a;
                }
                else
                {
                    var x = a.toLowerCase();
                }

            }

            if ($.isArray(b))
            {
                return -1;
            }
            else
            {
                if ($.isNumeric(b) == true || b == NaN)
                {
                    var y = b;
                }
                else
                {
                    var y = b.toLowerCase();
                }

            }

            return ((x < y) ? -1 : ((x > y) ? 1 : 0));
        },


        /**
         * Little method that returns everything thats currently checked
         *
         */
        returnCheckedObjects: function()
        {
            var checkedObjects = [];
            for (var k in cacheObj)
            {
                if (cacheObj[k]['checked'] != undefined && cacheObj[k]['checked'] == true)
                {
                    checkedObjects[checkedObjects.length] = cacheObj[k];
                }
            }

            return checkedObjects;
        },


        /**
         * Replace a thing in the cache with a different thing...
         *
         */
        replace: function(searchObj, replaceObj)
        {
            for (var k in cacheObj)
            {
                if (cacheObj[k][searchObj.key] != undefined && cacheObj[k][searchObj.key] == searchObj.value)
                {
                    cacheObj[k][replaceObj.key] = replaceObj.value;
                }
            }
        }


    };

}());





// +LICENCE
/**
 * jQuery Cookie plugin
 *
 * Copyright (c) 2010 Klaus Hartl (stilbuero.de)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */
// -LICENCE
jQuery.cookie = function (key, value, options) {

    // key and at least value given, set cookie...
    if (arguments.length > 1 && String(value) !== "[object Object]") {
        options = jQuery.extend({}, options);

        if (value === null || value === undefined) {
            options.expires = -1;
        }

        if (typeof options.expires === 'number') {
            var days = options.expires, t = options.expires = new Date();
            t.setDate(t.getDate() + days);
        }

        value = String(value);

        return (document.cookie = [
            encodeURIComponent(key), '=',
            options.raw ? value : encodeURIComponent(value),
            options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
            options.path ? '; path=' + options.path : '',
            options.domain ? '; domain=' + options.domain : '',
            options.secure ? '; secure' : ''
        ].join(''));
    }

    // key and possibly options given, get cookie...
    options = value || {};
    var result, decode = options.raw ? function (s) { return s; } : decodeURIComponent;
    return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null;
};
/**
 * Basic model used in all the wccModel stuff
 * 
 */
WCC_Model = function (ajaxLocation, eventTrigger, sortFunctionInput, secondaryAjaxLoadLocation, secondaryMatch)
{
    var instance = {};
    
    var dataObj = null;
    var ajaxLocation = ajaxLocation;
    var secondaryAjaxLoadLocation = secondaryAjaxLoadLocation;
    var secondaryMatch = secondaryMatch;
    var eventTrigger = eventTrigger;
    var inProgress = false;
    var secondaryInProgress = false;
    var sortFunction = null;
    
    // do we have a sort function
    if (jQuery.isFunction(sortFunctionInput))
    {
        sortFunction = sortFunctionInput;
    }
    
    
    /**
     * Get the dataObj
     * 
     */
    instance.get = function(noCache)
    {
        if (dataObj == null)
        {
            if (inProgress == true)
            {
                return;
            }

            inProgress = true;

            var that = this;

            var postData = {'postToken':Globals.POST_TOKEN};

            if(noCache) {
            	postData.noCache = true;
            }
            
            $.ajax({
                type: "POST",
                url: ajaxLocation,
                dataType : 'json',
                data: postData,
                success :  function(data) {that.getDataSuccess(data);},
                error :  WCC.utils.handleError 
            });
        }
        else
        {
            return dataObj;
        }
    };
    
    
    /**
     * AJAX get data success
     * 
     */
    instance.getDataSuccess = function(data)
    {
        inProgress = false;
        
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            dataObj = [];
            for (var k in data)
            {
            	if(k !='log')
                {
                    dataObj[dataObj.length] = data[k];
            	}
            }
        }
        
        if (sortFunction != null)
        {
            dataObj = sortFunction(dataObj);
        }
        
        if (secondaryAjaxLoadLocation != undefined && secondaryInProgress != true)
        {
            secondaryInProgress = true;
            var that = this;
             $.ajax({
                type: "POST",
                url: secondaryAjaxLoadLocation,
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success :  function(data) {that.getSecondaryDataSuccess(data);},
                error :  WCC.utils.handleError 
            });
        }
        
        $(document).trigger(eventTrigger);
        return true;
    };
    
    
    /**
     * The secondary data... needs to be layered in there...
     * 
     */
    instance.getSecondaryDataSuccess = function(data)
    {
        secondaryInProgress = false;
        for (var k in data)
        {
            for (var y in dataObj)
            {
                if (dataObj[y][secondaryMatch] == k)
                {
                    for (var attrname in data[k]) 
                    {
                        dataObj[y][attrname] = data[k][attrname]; 
                    }
                }
            }
        }
    }
    
    
    /**
     * Search by something, replace with something...
     * 
     * so... searchObj is {'key':'plan_id', 'value' : 668}
     * ... replaceObj is {'key':'plan_name', 'value' : "Neighbor of the beast!"}
     * 
     */
    instance.replace = function (searchObj, replaceObj)
    {
        inProgress = true;
        
        for (var k in dataObj)
        {
            if (dataObj[k][searchObj.key] != undefined && dataObj[k][searchObj.key] == searchObj.value)
            {
                dataObj[k][replaceObj.key] = replaceObj.value;
            }
        }
        
        inProgress = false;
    }
    
    
    /**
     * Reset the data object and reload it.
     * 
     */
    instance.reset = function(noCache)
    {
        dataObj = null;
        if(noCache) {
            this.get(noCache);
        } else {
            this.get();
        }
    }
    
    
    instance.getDataObj = function()
    {
        return dataObj;
    }
    
    instance.resetDataObj = function()
    {
        dataObj = null;
    }
    
    
    instance.getObj = function() {
    	return dataObj;
    }
    return instance;
}



// var newModel = new WCC_Model('ajax/getdomains/', 'updateDomains');


/**
 * Get the available email plnas
 * 
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};

var sortFunc = function(dataObj){return dataObj;};
WCC.model.availableEmailPlans = new WCC_Model('ajaxemail/getavailableplans/', 'updateAvailableEmailPlans', sortFunc);




/**
 * Get the available email plnas
 * 
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};

var sortFunc = function(dataObj){return dataObj;};
WCC.model.availableForwardingPlans = new WCC_Model('ajaxemail/getavailableforwardingplans/', 'updateAvailableForwardingPlans', sortFunc);




/**
 * Get available Cal plans
 * 
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};

WCC.model.availableCalPlans = new WCC_Model('ajaxcalendar/getavailableplans/', 'updateAvailableCalPlans');




/**
 * Get the available OFF plans
 * 
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};

WCC.model.availableOffPlans = new WCC_Model('ajaxfiles/getavailableplans/', 'updateAvailableOffPlans');

/**
 * Get the domains
 * 
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};
//var sortFunc = function(dataObj){ dataObj = dataObj.reverse()};

WCC.model.domains = new WCC_Model('ajax/getdomains/', 'updateDomains');


/**
 * Get the domains
 *
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};
//var sortFunc = function(dataObj){ dataObj = dataObj.reverse()};

WCC.model.domainsutf8 = new WCC_Model('ajax/getdomainsutf8/', 'updateDomains');


/**
 * Get the relay data
 * 
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};

WCC.model.relayData = new WCC_Model('ajaxemail/getrelaydata/', 'updateRelayData');

/**
 * Get the email plans
 * 
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};

var emailPlanSortFunc = function(dataObj){ var sortedObj = WCC.cache.sortObj(dataObj, 'pack_name', 'asc'); return sortedObj};
 
//WCC.model.emailPlans = new WCC_Model('ajaxemail/getplans/', 'updateEmailPlans', emailPlanSortFunc, 'ajaxemail/getalertsforplans/', 'pack_id');
WCC.model.emailPlans = new WCC_Model('ajaxemail/getplans/', 'updateEmailPlans', emailPlanSortFunc);


/**
 * Get cal plans
 * 
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};

WCC.model.allPlans =  new WCC_Model('ajax/getallplans/', 'updateAllPlans');

/**
 * Get cal plans
 * 
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};

var sortfunc = function(dataObj){return dataObj;};

WCC.model.calPlans =  new WCC_Model('ajaxcalendar/getplans/', 'updateCalPlans', sortFunc, 'ajaxcalendar/getalertsforplans/', 'accountUid');

/**
 * Get the OFF plans
 * 
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};

WCC.model.offPlans = new WCC_Model('ajaxfiles/getplans/', 'updateOffPlans');

/**
 * Get the email plans
 * 
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};

var sortfunc = function(dataObj){return dataObj;};

WCC.model.emailAccounts = new WCC_Model('ajaxemail/getemailaccounts/', 'noAction');


/**
 * WCC user settings handler
 *
 * ... by Jon Roig - jroig@godaddy.com
 */

var WCC = WCC || {};

WCC.userSettings = (function(){

    // private stuff
    var settingsArray = {};

    var settingsLoaded = false;

    // some defaults
    settingsArray['rowsPerPage'] = 25;
    settingsArray['special'] = 'thing';


    /**
     * AJAX init success callback
     *
     * @param data
     * @return boolean true
     */
    var getSettingsSuccess = function (data)
    {
        // merge in the results
        for (var k in data)
        {
            settingsArray[k] = data[k];
        }

        settingsLoaded = true;

        // change the rows per page if necessary
        if (settingsArray['rowsPerPage'] == undefined)
        {
            settingsArray['rowsPerPage'] = 25;
        }

        WCC.pagination.changeRowsPerPage(settingsArray['rowsPerPage'], true);

        return true;
    };


    return {

        getLoaded: function()
        {
            return settingsLoaded;
        },

        /**
         * Get a setting from the setttingsArray
         *
         * @param string settingName
         * @return string
         */
        get: function(settingName)
        {
            if (settingsArray[settingName] == undefined)
            {
                return null;
            }

            if(settingName=='userTimezone' && settingsArray[settingName] == "") {
            	settingsArray[settingName] = null;
            }
            return settingsArray[settingName];
        },


        /**
         * Set a value in the setttingsArray and save it via ajax
         *
         * @param string settingName
         * @param string settingValue
         */
        set: function(settingName, settingValue, doNotUpdateDB )
        {
             settingsArray[settingName] = settingValue;
             if (doNotUpdateDB == true)
             {
                 return;
             }

             var that = this;
             // save it via ajax
              $.ajax({
                type: "POST",
                url: 'ajax/setusersetting/',
                dataType: 'json',
                data: {'settingName': settingName, 'settingValue': settingValue, 'postToken':Globals.POST_TOKEN},
                success: function(){},
                error: WCC.utils.handleError
            });
        },


        /**
         * Initial action...
         * ... get stuff from ajax/getallusersettings/
         *
         */
        init: function()
        {
            if(Globals.USER_SETTINGS)
            {
                settingsLoaded = true;

                // change the rows per page if necessary
                if (Globals.USER_SETTINGS['rowsPerPage'] == undefined)
                {
                    Globals.USER_SETTINGS['rowsPerPage'] = 25;
                }
                WCC.pagination.changeRowsPerPage(Globals.USER_SETTINGS['rowsPerPage'], true);
            }
            else
            {
                var that = this;
                $.ajax({
                    type: "POST",
                    url: 'ajax/getallusersettings/',
                    dataType: 'json',
                    data: {'postToken':Globals.POST_TOKEN},
                    success: function(data) {getSettingsSuccess.call(that, data);},
                    error: WCC.utils.handleError
                });

            }
        }


    };

}());


// WHEN WE'RE READY, GET THE SETTINGS!
$(document).ready(function()
{
    WCC.userSettings.init();
});
/* WCC Pagination Control
 * 
 * ... by Jon Roig.... jroig@godaddy.com
 *
 * Uses the userSettings and jQuery template
 */


var WCC = WCC || {};

WCC.pagination = (function(){
    
    // internal stuff
    var currentPage = 1;
    var rowsPerPage = 25;
    var paginationTemplate = "#paginationTemplate";
    
    
    // public stuff
    return {
        
        /**
         * Change the number of rows per page and trigger a refesh
         * Also, sets the userSettings
         * 
         * @param int rowsPerPageInput
         * @param boolean doNotResave
         */
        changeRowsPerPage: function(rowsPerPageInput, doNotResave)
        {
            if (rowsPerPageInput == '')
            {
                rowsPerPageInput = $('#rowsPerPageSelect').val();
            }
            rowsPerPage = rowsPerPageInput;
            
            // set 'em in the settings object
            if (doNotResave == undefined || doNotResave != true)
            {
                WCC.userSettings.set('rowsPerPage', rowsPerPage);
            }
            
            $(document).trigger('infoRowRefresh');
            $(document).trigger('showSelectedAll');
            return true;
        },
        
        
        /**
         * Return the number of rows
         * 
         * @return int rowsPerPage
         */
        returnRowsPerPage: function()
        {
            return rowsPerPage;
        },
        
        
        /**
         * Return the current page
         * 
         * @return into currentPage
         */
        returnCurrentPage: function()
        {
            return currentPage;
        },
        
        
        /**
         * Go to the next page and trigger a refresh
         * 
         * @return boolean true
         */
        nextPage: function()
        {
            currentPage = currentPage + 1;
            $(document).trigger('infoRowRefresh');
            $(document).trigger('showSelectedAll');
            $(document).trigger('pageChange');
            return true;
        },


        /**
         * Go to the previous page and trigger a refresh
         * 
         * @return boolean true
         */
        prevPage: function()
        {
            currentPage = currentPage - 1;
            $(document).trigger('infoRowRefresh');
            $(document).trigger('showSelectedAll');
            $(document).trigger('pageChange');
            return true;
        },


        /**
         * Go to a page and trigger a refresh
         * 
         * @param int page
         * @return boolean tru
         */
        goPage: function(page)
        {
            currentPage = page;
            $(document).trigger('infoRowRefresh');
            $(document).trigger('showSelectedAll');
            $(document).trigger('pageChange');
            return true;
        },
        
        
        /**
         * Set the current page but don't trigger a refresh
         * 
         * @param int page
         * @return boolean true
         */
        setCurrentPage: function(page)
        {
            currentPage = page;
            return true;
        },
        
        
        /**
         * Return rendered pagination 
         * 
         * @param array dataArray
         * @param string paginationTemplateInput optional
         * @return obj rendered template
         */
        returnPagination: function(dataArray, paginationTemplateInput, suppressRowChange, overRideRowsPerPage)
        {
            if (paginationTemplateInput != undefined && paginationTemplateInput != false)
            {
                paginationTemplate = paginationTemplateInput;
            }
            if (suppressRowChange == undefined)
            {
            	suppressRowChange = false;
            }
            
            var output = {};
            output.currentPage = currentPage;

            output.rowsPerPage = rowsPerPage;
            if (overRideRowsPerPage != undefined)
            {
                output.rowsPerPage = overRideRowsPerPage;
            }

            output.suppressRowChange = suppressRowChange;
            
            output.totalPages = Math.ceil(dataArray.length/ output.rowsPerPage);

            // build a quick array of possible page numbers
            var pageArray = [];
            var x = 1;
            while (x <= output.totalPages)
            {
                pageArray[pageArray.length] = x;
                x++;
            }
            
            output.pageArray = pageArray;
            
            var renderedOutput =  $(paginationTemplate).tmpl(output);

            return renderedOutput;
        }
        

    };

}());
/**
 * Get the relay data
 *
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};

WCC.model.penddelData = new WCC_Model('ajaxemail/getpenddel/', 'updatePenddelData');

/**
 * Get the domains
 *
 */

var WCC = WCC || {};
WCC.model = WCC.model || {};
//var sortFunc = function(dataObj){ dataObj = dataObj.reverse()};

WCC.model.pendingValidation = new WCC_Model('ajaxemail/getpendingvalidation/', 'updatePendingValidationData');


/* WCC search and sort control
 *
 * Mainly just a container from which to coordinate filter and sorting and stuff
 *
 * ... by Jon Roig.... jroig@godaddy.com
 *
 *
 */


var WCC = WCC || {};

WCC.sortAndSearch = (function(){


    // internal state stuff
    var sortType = 'displayName';
    var sortOrder = 'asc';
    var searchTerm = null;
    var searchField = null;
    var alertHuntSortArray = null;
    var filterObj = null;

    var cacheObj = null;

    return {

        /**
         * Define the cache obj
         *
         */
        defineCacheObj: function(cacheObjInput)
        {
            cacheObj = cacheObjInput;
        },


        /**
         * Generate outout
         *
         */
        generateOutput: function()
        {
            var fullDataRowArray = WCC.cache.sortObj( cacheObj, sortType, sortOrder);

            if(searchTerm == BRAVO.Translate._("WCC_Main_Search_") ) {
            	searchTerm = null;
            }

            if (searchTerm != null && searchTerm != BRAVO.Translate._("WCC_Main_Search_") )
            {
            	var st = WCC.utils.asciiAddress(searchTerm);
                fullDataRowArray = WCC.cache.searchByField (fullDataRowArray, searchField , st);
            }

            fullDataRowArray = WCC.sortAndSearch.filter(fullDataRowArray);

            return fullDataRowArray;
        },


        /**
         * Resort rows by something
         * Triggers infoRowRefresh
         *
         * @param string sortTypeInput
         */
        resortRowsByType: function(sortTypeInput)
        {
            WCC.pagination.setCurrentPage(1);

            if (sortTypeInput == 'usedAccounts' && sortType != 'usedAccounts' )
            {
                sortOrder = 'desc';
                sortType = sortTypeInput;
            }
            else if (sortTypeInput == 'domainCount' && sortType != 'domainCount' )
            {
                sortOrder = 'desc';
                sortType = sortTypeInput;
            }
            else if (sortTypeInput == 'used_address_count' && sortType != 'used_address_count' )
            {
                sortOrder = 'desc';
                sortType = sortTypeInput;
            }
            else if (sortTypeInput == 'relaysToday' && sortType != 'relaysToday' )
            {
                sortOrder = 'desc';
                sortType = sortTypeInput;
            }
            else if (sortTypeInput == 'max_size' && sortType != 'max_size' )
            {
                sortOrder = 'desc';
                sortType = sortTypeInput;
            }
            else if (sortTypeInput == 'offUsedBytes' && sortType != 'offUsedBytes' )
            {
                sortOrder = 'desc';
                sortType = sortTypeInput;
            }
            else if (sortTypeInput == sortType && sortOrder == 'asc')
            {
                sortOrder = 'desc';
            }
            else if (sortTypeInput == sortType && sortOrder == 'desc')
            {
                sortOrder = 'asc';
            }
            else if (sortTypeInput == 'planQuota' && sortType != 'planQuota' )
            {
                sortOrder = 'desc';
                sortType = sortTypeInput;
            }
            else
            {
                sortType = sortTypeInput;
                sortOrder = 'asc';
            }

            $(document).trigger('infoRowRefresh');
        },


        /**
         * Filter by a field / value
         *
         */
        filterByThing: function(filterField, filterValue)
        {
            filterObj = {};
            filterObj.filterField = filterField;
            filterObj.filterValue = filterValue;
            if (filterValue != null)
            {
                WCC.pagination.setCurrentPage(1);
            }

            $(document).trigger('infoRowRefresh');
            $(document).trigger('filterRefresh');
        },


        /**
         * Return the current filter field
         *
         */
        returnFilterField: function()
        {
            if (filterObj != undefined && filterObj.filterField != undefined)
            {
                return filterObj.filterField;
            }

            return null;
        },


        /**
         * Return the current filter value
         *
         */
        returnFilterValue: function()
        {
            if (filterObj != undefined && filterObj.filterValue != undefined)
            {
                return filterObj.filterValue;
            }

            return null;
        },


        /**
         * Return the filter obj
         *
         */
        returnFilterObj: function()
        {
            return filterObj;
        },


        /**
         * Clear the filter
         *
         */
        clearFilter: function()
        {
            filterObj = null;

            WCC.pagination.setCurrentPage(1);
            $(document).trigger('infoRowRefresh');
            $(document).trigger('filterRefresh');
            return true;
        },


        /**
         * Filter an inputArray
         *
         */
        filter: function(inputArray)
        {
            if (filterObj == null)
            {
                return inputArray;
            }

            if (filterObj.filterValue == null)
            {
                return inputArray;
            }
            if (filterObj.filterField == 'all_plans')
            {
                return inputArray;
            }

            var outputArray = [];

            for (var x = 0; x < inputArray.length; x++)
            {
                // get by no value first
                if (filterObj.filterValue == "empty" && (inputArray[x][filterObj.filterField] == undefined || inputArray[x][filterObj.filterField] == ''))
                {
                    outputArray[outputArray.length] = inputArray[x];
                }
                else if (filterObj.filterValue == "notEmpty" && inputArray[x][filterObj.filterField] != undefined &&  inputArray[x][filterObj.filterField] != '')
                {
                    outputArray[outputArray.length] = inputArray[x];
                }
                else if (inputArray[x][filterObj.filterField] != undefined && inputArray[x][filterObj.filterField] == filterObj.filterValue)
                {
                    outputArray[outputArray.length] = inputArray[x];
                }
            }

            return outputArray;
        },


        /**
         * Filter content by an array of alerts
         *
         * @param array alertHuntArrayInput
         */
        filterByAlert: function(alertHuntArrayInput)
        {
            WCC.pagination.setCurrentPage(1);
            alertHuntSortArray = alertHuntArrayInput;
            $(document).trigger('infoRowRefresh');
        },


        /**
         * Return sortType
         *
         * @return string
         */
        returnSortType: function()
        {
            return sortType;
        },


        /**
         * Return sortOrder
         *
         * @return string
         */
        returnSortOrder: function()
        {
            return sortOrder;
        },


        /**
         * Return search term
         *
         * @return string
         */
        returnSearchTerm: function()
        {
            return searchTerm;
        },


        /**
         * Return search field
         *
         * @return string
         */
        returnSearchField: function()
        {
            return searchField;
        },


        /**
         * Return alertHuntSortArray
         *
         * @return array
         */
        returnAlertHuntSortArray: function()
        {
            return alertHuntSortArray;
        },


        /**
         * Set the sort type
         *
         * @param string sortTypeInput
         */
        setSortType: function(sortTypeInput)
        {
            sortType = sortTypeInput;
            return true;
        },


        /**
         * Set sort order
         *
         * @param string sortOrderInput
         */
        setSortOrder: function (sortOrderInput)
        {
            sortOrder = sortOrderInput;
            return true;
        },


        /**
         * Set the search term
         *
         * @param string searchTermInput
         */
        setSearchTerm: function(searchTermInput)
        {
            searchTerm = searchTermInput;
            return true;
        },


        /**
         * Set the search field
         *
         * @param string searchFieldInput
         */
        setSearchField: function(searchFieldInput)
        {
            searchField = searchFieldInput;
            return true;
        },


        /**
         * Set the alertHuntSortArray
         *
         * @param array alertHuntSortArray
         */
        setAlertHuntSortArray: function (alertHuntSortArrayInput)
        {
            alertHuntSortArray = alertHuntSortArrayInput;
            return true;
        },


        /**
         * Handler for the search field
         * ... attached during the init
         *
         * Triggers infoRowRefresh
         *
         * @param object event
         */
        searchHandler: function(event)
        {
            if (jQuery.trim($('#searchField')[0].value) == '')
            {
                searchField = null;
                searchTerm = null;
                WCC.pagination.setCurrentPage(1);
            }
            else
            {
                searchField = 'displayName';
                searchTerm = $('#searchField')[0].value;
                WCC.pagination.setCurrentPage(1);
            }

            $(document).trigger('infoRowRefresh');
        },


        /**
         * Reset the search
         * ... usually called by the layout
         *
         * Triggers infoRowRefresh
         */
        resetSearch: function()
        {
            searchField = null;
            searchTerm = null;
            alertHuntSortArray = null;
            WCC.pagination.setCurrentPage(1);
            $('#searchField').val(BRAVO.Translate._("WCC_Main_Search_"));
            $('#searchField').removeClass('search-field-enabled');
            $(document).trigger('infoRowRefresh');
        },


        /**
         * Handle bluring of the search field in layout
         * .. attached during the init
         *
         */
        handleSearchBlur: function ()
        {
            if ( $('#searchField').val() == '')
            {
                $('#searchField').removeClass('search-field-enabled');
                $('#searchField').val(BRAVO.Translate._("WCC_Main_Search_"));
            }
        },


        /**
         * Init process.. attaches some stuff to some other stuff
         *
         */
        init: function(bindtype)
        {
            var that = this;
            // turn on the search field and catch any paste events
            if(bindtype=='keyup') {
                $('#searchField').keyup(that.searchHandler);
            } else {
            	$('#searchField').unbind('keyup', that.searchHandler);
                $('#searchField').keypress(function(event) {
                	if ( event.which == 13 ) {
                		that.searchHandler();
                	}
                });
            }
            $('#search-button').click(that.searchHandler);

            $("#searchField").bind('paste', function(e)
            {
                setTimeout(function()
                {
                    that.searchHandler();
                }, 100);
            });
            $('#searchField').blur(that.handleSearchBlur);


            // Temporary search replacement
            $(".search-field").focus(function(){
                $(this).val('').addClass('search-field-enabled');
            });
        }


    };
}());



// LET'S MAKE THIS HAPPEN!!!!
$(document).ready(function()
{
    WCC.sortAndSearch.init('keyup');
 });
/**
 * WCC user counts...
 *
 * ... by Jon Roig - jroig@godaddy.com
 *
 */


var WCC = WCC || {};

WCC.userCounts = (function(){

    var countObj = {};

    // PRIVATE METHODS

    /**
     * AJAX success for getGrandTotals
     * ... triggers grandTotalUpdate
     *
     * @param obj data
     * @return boolean true
     */
    var getGrandTotalSuccess = function (data)
    {
        countObj.grandTotals = data;
        countObj.emailTotals = data['email'];
        countObj.calTotals = data['cal'];
        countObj.offTotals = data['off'];
        $(document).trigger('grandTotalUpdate');
        $(document).trigger('emailTotalUpdate');
        $(document).trigger('calTotalUpdate');
        $(document).trigger('offTotalUpdate');

        if(countObj.grandTotals.usedAccounts > 100) {

        	WCC.sortAndSearch.init();
        }
        return true;
    };


    /**
     * AJAX success for getEmailTotals
     * ... triggers grandTotalUpdate, emailTotalUpdate
     *
     * @param obj data
     * @return boolean true
     */
    var getEmailTotalSuccess = function (data)
    {
        countObj.emailTotals = data;

        $(document).trigger('grandTotalUpdate');
        $(document).trigger('emailTotalUpdate');

        return true;
    };


    /**
     * AJAX success for getCalTotals
     * ... triggers grandTotalUpdate, calTotalUpdate
     *
     * @param obj data
     * @return boolean true
     */
    var getCalTotalSuccess = function (data)
    {
        countObj.calTotals = data;

        $(document).trigger('grandTotalUpdate');
        $(document).trigger('calTotalUpdate');

        return true;
    };


    /**
     * AJAX success for getOffTotals
     * ... triggers grandTotalUpdate, offTotalUpdate
     *
     * @param obj data
     * @return boolean true
     */
    var getOffTotalSuccess = function (data)
    {
        countObj.offTotals = data;

        $(document).trigger('grandTotalUpdate');
        $(document).trigger('offTotalUpdate');

        return true;
    };


    return {

       /**
        * Initialization
        *
        * Sets up event binding... then fires off the ajax processes...
        *
        * @return boolean true
        */
       init: function()
       {
            var that = this;

            $(document).bind('grandTotalUpdate', function(){that.renderGrandTotalUpdate();});
            $(document).bind('emailTotalUpdate', function(){that.renderEmailTotalUpdate();});
            $(document).bind('calTotalUpdate', function(){that.renderCalTotalUpdate();});
            $(document).bind('offTotalUpdate', function(){that.renderOffTotalUpdate();});

            that.getGrandTotals();
            //that.getEmailTotals();
            //that.getCalTotals();
            //that.getOffTotals();

            return true;
       },


       /**
        * Get the grand total of users
        *
        * Hits ajax/getgrandtotals/
        *
        * @return boolean true
        */
       getGrandTotals: function()
       {
           var that = this;
            $.ajax({
                type: "POST",
                url: 'ajax/getgrandtotals/',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success: function(data) {getGrandTotalSuccess.call(that, data);},
                error: WCC.utils.handleError
            });

            return true;
       },


       /**
        * Get email totals
        * ... hits ajax/getemailtotals/
        *
        * @return boolean true
        */
       getEmailTotals: function()
        {
           var that = this;
                $.ajax({
                type: "POST",
                url: 'ajax/getemailtotals/',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success: function(data) {getEmailTotalSuccess.call(that, data);},
                error: WCC.utils.handleError
            });

            return true;
       },


       /**
        * Get calendar user totals
        * hits ajax/getcalendartotals/
        *
        * @return boolean true
        */
       getCalTotals: function()
        {
           var that = this;
            $.ajax({
                type: "POST",
                url: 'ajaxcalendar/getcalendartotals/',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success: function(data) {getCalTotalSuccess.call(that, data);},
                error: WCC.utils.handleError
            });

            return true;
       },


       /**
        * Get OFF totals
        * hits ajax/getofftotals/
        *
        * @return boolean true
        */
       getOffTotals: function()
        {
           var that = this;
            $.ajax({
                type: "POST",
                url: 'ajaxfiles/getofftotals/',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success: function(data) {getOffTotalSuccess.call(that, data);},
                error: WCC.utils.handleError
            });

            return true;
       },


       /**
        * Get a value out of the internal countObj
        *
        * @param string countType grandTotals, emailTotals, calTotals, offTotals
        *
        * @return int
        */
       getValue: function(countType)
       {
           return countObj[countType];
       },


       /**
        * Render the grand total update
        *
        * @return boolean true;
        */
       renderGrandTotalUpdate: function()
       {
            var grandTotalsObj = WCC.userCounts.getValue('grandTotals');

            if (grandTotalsObj == undefined || grandTotalsObj.usedAccounts == undefined)
            {
                return;
            }

            if (grandTotalsObj.usedAccounts == 1)
            {
                $("#grandCount").html('<strong>' + grandTotalsObj.usedAccounts + ' ' + BRAVO.Translate._("WCC_MAIN_lcAccount") + '</strong>' );
                $("#allAccountsBadge").attr('title', BRAVO.Translate._("WCC_MAIN_youHaveUsed") + ' ' + grandTotalsObj.usedAccounts + ' ' + BRAVO.Translate._("WCC_MAIN_lcAccount") );
            }
            else
            {
                $("#grandCount").html('<strong>' + grandTotalsObj.usedAccounts + ' ' + BRAVO.Translate._("WCC_MAIN_lcAccounts") + '</strong>' );
                $("#allAccountsBadge").attr('title', BRAVO.Translate._("WCC_MAIN_youHaveUsed") + ' '  + grandTotalsObj.usedAccounts + ' ' + BRAVO.Translate._("WCC_MAIN_lcAccounts") );
            }

            return true;
       },


       /**
        * Render email totals update
        *
        * @return boolean true
        */
       renderEmailTotalUpdate: function()
       {
            var emailTotalsObj = WCC.userCounts.getValue('emailTotals');

            if (emailTotalsObj == undefined || emailTotalsObj.usedEmails == undefined)
            {
                return
            }

            if (emailTotalsObj.usedEmails == 1)
            {
                $("#emailCount").html('<strong>' + emailTotalsObj.usedEmails + ' ' + BRAVO.Translate._("WCC_MAIN_lcAccount") + '</strong>' );
            }
            else
            {
                $("#emailCount").html('<strong>' + emailTotalsObj.usedEmails + ' ' + BRAVO.Translate._("WCC_MAIN_lcAccounts") + '</strong>' );
            }

            return true;
       },


       /**
        * Render cal totals update
        *
        * @return boolean true
        */
       renderCalTotalUpdate: function()
       {
            var calTotalsObj = WCC.userCounts.getValue('calTotals');

            if (calTotalsObj == undefined || calTotalsObj.usedCalUsers == undefined)
            {
                return
            }

            if (calTotalsObj.availableCalUsers == -1)
            {
                calTotalsObj.availableCalUsers = 'Unlimited';
            }

            if (calTotalsObj.usedCalUsers == 1)
            {
                $("#calCount").html('<strong>' + calTotalsObj.usedCalUsers + ' ' + BRAVO.Translate._("WCC_MAIN_lcAccount") +'</strong>');
            }
            else
            {
                $("#calCount").html('<strong>' + calTotalsObj.usedCalUsers + ' ' + BRAVO.Translate._("WCC_MAIN_lcAccounts") + '</strong>');
            }

            return true;
       },


       /**
        * Render OFF totals update
        *
        * @return boolean true
        */
       renderOffTotalUpdate: function()
       {
            var offTotalsObj = WCC.userCounts.getValue('offTotals');

            if (offTotalsObj == undefined || offTotalsObj.usedOffUsers == undefined)
            {
                return
            }


            if ( offTotalsObj.usedOffUsers == 1)
            {
                $("#offCount").html('<strong>' + offTotalsObj.usedOffUsers + ' ' + BRAVO.Translate._("WCC_MAIN_lcAccount") + '</strong>');
            }
            else
            {
                $("#offCount").html('<strong>' + offTotalsObj.usedOffUsers + ' ' + BRAVO.Translate._("WCC_MAIN_lcAccounts") +'</strong>');
            }

            return true;
       }

    };

}());


// FIRE THIS UP!!! YEAH!!!!
$(document).ready(function()
{
    WCC.userCounts.init();
});
/* WCC email account access
 *
 * ... by Jon Roig.... jroig@godaddy.com
 *
 *
 */


var WCC = WCC || {};

WCC.emailAccount = (function(){


    var currentlyGetting = [];

    /**
     * AJAX success for getEmailAccountData
     * ... private method...
     *
     * triggers emailAccountDataUpdate
     *
     * @param obj data
     * @return boolean true
     */
    var getEmailAccountDataSuccess = function(data, emailAddress)
    {


        // we might need to retry....
        if (data == null)
        {
            delete(currentlyGetting[emailAddress]);
            WCC.emailAccount.getEmailAccountData(emailAddress);
            return;
        }

        var dataCheck = WCC.utils.checkData(data);

        if (dataCheck == true)
        {
            var cacheObj = WCC.cache.returnCacheObject();
            for (var k in cacheObj)
            {
                if (cacheObj[k]['emailAddress'] == data.emailAddress)
                {
                    WCC.cache.setAttribute(cacheObj[k]['realName'], 'emailAccountDataObj', data);


                    //
                    // handle that there quota and some updates 'n' stuff
                    if ( data['max_size'] != undefined )
                  {
                        WCC.cache.setAttribute(cacheObj[k]['realName'], 'max_size', data['max_size']);
                  }

                    if (data['quota_bytes'] != undefined && data['used_bytes'] != undefined)
                    {
                        var quotaPercentage = Math.round ((data['used_bytes'] / data['quota_bytes']) * 100);
                        if ($.isNumeric(quotaPercentage) == false)
                        {
                            quotaPercentage = -13013;
                        }
                        var quotaObj = WCC.utils.bytesToCommonReadable(data['used_bytes'], data['quota_bytes']);
                        quotaObj.raw_used_bytes = data['used_bytes'];
                        quotaObj.quota_bytes = data['quota_bytes'];

                        WCC.cache.setAttribute(cacheObj[k]['realName'], 'quotaObj', quotaObj);
                        WCC.cache.setAttribute(cacheObj[k]['realName'], 'quotaPercentage', quotaPercentage);
                        WCC.cache.setAttribute(cacheObj[k]['realName'], 'quota_bytes',  data['quota_bytes']);
                    }
                }
            }

        }
        else
        {
            WCC.cache.setAttribute(data.emailAddress, 'emailAccountDataObj', false);
        }

         delete(currentlyGetting[data.emailAddress]);

        $(document).trigger('emailAccountDataUpdate', data.emailAddress);

        return true;
    };


    return {


        /**
         * Get all the email account data... generic interface of sorts
         * ... first tries to get the data out of the cache, otherwise hits
         * /ajaxemail/getemaildata/
         *
         * @param string emailAddress
         * @return boolean true
         */
        getEmailAccountData: function(emailAddress)
        {
            if (currentlyGetting[emailAddress] != undefined)
            {

                return null;
            }

            if ( WCC.cache.getByKey(emailAddress) != null &&  WCC.cache.getByKeyAndAttribute(emailAddress,'emailAccountDataObj') != null)
            {
                $(document).trigger('emailAccountDataUpdate', emailAddress);
                return true;
            }

            currentlyGetting[emailAddress] = true;

            var that = this;

            // otherwise grab it from the server...
             $.ajax({
                type: "POST",
                url: 'ajaxemail/getemaildata/',
                dataType : 'json',
                data: {'emailAddress': emailAddress, 'postToken':Globals.POST_TOKEN},
                success : function(data){getEmailAccountDataSuccess(data, emailAddress)},
                error :  WCC.utils.handleError
            });

            return true;
        }


    };

}());




/* WCC cal account access
 * 
 * ... by Jon Roig.... jroig@godaddy.com
 *
 */


var WCC = WCC || {};

WCC.calAccount = (function(){
    
    
    /**
     * AJAX success for getCalAccountData
     * ... triggers calAccountDataUpdate
     * 
     * @param obj data
     * @return boolean true
     */
    var getCalAccountDataSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);

        if (dataCheck == true)
        {
            // cache that stuff
            var cacheObj = WCC.cache.returnCacheObject();
            for (var k in cacheObj)
            {
                if (cacheObj[k]['calUser'] == data.calUser)
                {
                    WCC.cache.setAttribute(cacheObj[k]['realName'], 'calAccountDataObj', data);
                }
            }
            
        }
        else
        {
             WCC.cache.setAttribute(data.calUser, 'calAccountDataObj', null);
        }
        $(document).trigger('calAccountDataUpdate', data.calUser);
        
        return true;
    };

    
    return {
        
        /**
         * Generic interface to get cal data
         * 
         * @param string calendar user
         * @return boolean true
         */
        getCalAccountData: function(calUser)
        {
            // otherwise grab it from the server...
             $.ajax({
                type: "POST",
                url: 'ajaxcalendar/getcaldata/',
                dataType : 'json',
                data: {'calUser': calUser, 'postToken':Globals.POST_TOKEN},
                success : getCalAccountDataSuccess,
                error :  WCC.utils.handleError 
            });

            return true;
        }
            

    };
    
}());




/* WCC off account access
 * 
 * ... by Jon Roig.... jroig@godaddy.com
 *
 * 
 */


var WCC = WCC || {};

WCC.offAccount = (function(){
    // private methods
    
    
    /**
     * getOffAccountData AJAX success...
     * 
     * triggers offAccountDataUpdate
     */
    var getOffAccountDataSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);

        if (dataCheck == true)
        {   
             // go through and locate the thing then add it to the cache...
            var cacheObj = WCC.cache.returnCacheObject();
            for (var k in cacheObj)
            {
                if (cacheObj[k]['offUser'] == data.offUser)
                {
                    WCC.cache.setAttribute(cacheObj[k]['realName'], 'offAccountDataObj', data);
                }
            }
        }
        else
        {
            WCC.cache.setAttribute(data.offUser, 'offAccountDataObj', null);
        }
        
       
        
        $(document).trigger('offAccountDataUpdate', data.offUser);
    };

    
    return {
        
        /**
         * Generic interface for OFF data
         * 
         * @param string offUser
         * @return boolean true
         */
        getOffAccountData: function(offUser)
        {
            // otherwise grab it from the server...
            $.ajax({
                type: "POST",
                url: 'ajaxfiles/getoffdata/',
                dataType : 'json',
                data: {'offUser': offUser, 'postToken':Globals.POST_TOKEN},
                success : getOffAccountDataSuccess,
                error :  WCC.utils.handleError 
            });

            return true;
        }
            

    };
    
}());




/**
 * Server settings dialog
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.serverSettings = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentServerSettingDiv';
    properties.template = '#componentServerSetting';
    properties.title = BRAVO.Translate._("WCC_MAIN_serverSettingsTitle");
    properties.url = '/ajax/domainsetting/';

    properties.data = {};


    // success? Let us then load the dialog box 'n' stuff....
    var ajaxSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck != false)
        {
            properties.data = data;

            this.renderDialog();
        }
    };

    var fixMXSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck != false)
        {

            if (data['error'] != undefined)
            {
                $('#componentServerSettingsUpdateMX').html(BRAVO.Translate._("WCC_MAIN_mxRecordsUpdateError"));
                return;
            }
            if (data['forcedMX'] != undefined)
            {
                 $('#componentServerSettingsUpdateMX').html(BRAVO.Translate._("WCC_MAIN_mxRecordsUpdated"));
                 $('#componentServerSettingsMXError').html(BRAVO.Translate._("WCC_MAIN_mayTakeSeveralHours"));

            }
        }
    };

    /**
     * If you the SRV record set worked, update the switch in screen
     */
    var setSrvSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck != false)
        {

            if (data['error'] != undefined)
            {
                return;
            }
            if (data['updated'] != undefined)
            {
                $('#srvStatus').attr('domain', data['domain']);
                var status = (data['updated']==true||data['updated']=='true');
            	var srvtext = status ? BRAVO.Translate._("WCC_MAIN_lcon") : BRAVO.Translate._("WCC_MAIN_lcoff");
                $('#srvStatusText').html(srvtext);
                var srvclass = status ? "on" : "off";
                var srvanticlass =  status ? "off" : "on";
                $('#srvStatus').addClass(srvclass);
                $('#srvStatusText').addClass(srvclass);

                $('#srvStatus').removeClass(srvanticlass);
                $('#srvStatusText').removeClass(srvanticlass);
            }
        }
    };


    /**
     * nuttin special yo, just checkin if the srv record is set for the domain and updatin the page accordingly
     */
    var getSrvSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck != false)
        {

            if (data['error'] != undefined)
            {
                return;
            }
            if (data['status'] != undefined)
            {
            	 var status = (data['status']==true||data['status']=='true');
            	 if(data['controlled']==true||data['controlled']=='true') {
            		$('#componentServerSettingsSrv').parent().show();
            	 } else {
             		$('#componentServerSettingsSrv').parent().hide();
            	 }

            	 var srvtext = status ? BRAVO.Translate._("WCC_MAIN_lcon") : BRAVO.Translate._("WCC_MAIN_lcoff");
                 $('#srvStatusText').html(srvtext);
                 var srvclass = status ? "on" : "off";
                 var srvanticlass = status ? "off" : "on";
                 $('#srvStatus').attr('domain', data['domain']);
                 $('#srvStatus').addClass(srvclass);
                 $('#srvStatusText').addClass(srvclass);

                 $('#srvStatus').removeClass(srvanticlass);
                 $('#srvStatusText').removeClass(srvanticlass);
                 if (srvtext != 'on' && srvtext != 'off')
                 {
                     $('#srvStatus').css('background-image', "url('')");
                 }
            }
        }
    };

    return{

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function()
        {
            WCC.components.analytics.trackView('modal', 'wcc-serversettings');

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                WCC.utils.centerThisDialog(properties.dialogDivId);

                WCC.utils.showLoading(properties.dialogDivId);
                WCC.utils.centerThisDialog(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 630 ,
                title: properties.title,
                position: 'center'
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");

            // fix for ie 9
            //var newLeft  =  ($(document).width() - 420) / 2; // old val 480
            //$('#componentServerSettingDiv').parent().css('left', newLeft + 'px')
            WCC.utils.centerThisDialog(properties.dialogDivId);

            // attach listeners

            // fire off the ajax request
            var that = this;
            $.ajax({
                type: "POST",
                url: properties.url,
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success: function(data) {ajaxSuccess.call(that, data);},
                error: WCC.utils.handleError
            });

            WCC.utils.handleUserAddressWidth();

            $(window).resize( function(){$("#componentServerSettingDiv").dialog( {position: 'center'} )});

            return true;


        },


        /**
         * Render the dialog...
         *
         */
        renderDialog: function()
        {
            var renderForDomain = $('#componentServerSettingDomainSelect').val();
            //@TODO - fix this - translation!
            // do you... like... actually have domains?
            if (properties.data.length == 0)
            {
                 require("starfield/sf.msg.overlay", function () {
                    $("#componentServerSettingDiv").sfMsgOverlay({ message:  BRAVO.Translate._("WCC_MAIN_noEmailAccounts"), style:null });
                    $('.sf-msg-overlay').css('z-index', 100005);
                    WCC.utils.centerThisDialog(properties.dialogDivId);

                });

                return;
            }

            var domainNameArray = new Array();
            for (var k in properties.data['dnsInfo'])
            {
                domainNameArray[domainNameArray.length] = {name:k, utf8:properties.data['dnsInfo'][k]['utf8']};
            }

            // render the template
            if (renderForDomain == undefined || renderForDomain == '')
            {
            	renderForDomain = domainNameArray[0]['name'];
                //var domainData = WCC.utils.getFirstElement(properties.data['dnsInfo']);
                var domainData = properties.data['dnsInfo'][renderForDomain];
            }
            else
            {
                var domainData = properties.data['dnsInfo'][renderForDomain];
            }

            domainData['domainNameArray'] = domainNameArray;
            domainData['renderForDomain'] = renderForDomain;

            var renderedOutput =  $(properties.template).tmpl(domainData);
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( {position: 'center'} );



            $("#componentServerSettingsMXs").find('tr:odd').addClass('odd');
            $("#componentServerSettingsHosts").find('tr:odd').addClass('odd');
            $("#componentServerSettingsCorrect").find('tr:odd').addClass('odd');
            $('#srvStatus').parent().click(function() {var domain=$("#srvStatus").attr('domain'); var status=!$("#srvStatus").hasClass('on'); WCC.components.serverSettings.setSRVRecord(domain, status);});
            WCC.components.serverSettings.getSRVRecord(renderForDomain);
            WCC.utils.centerThisDialog(properties.dialogDivId);


        },


        fixMXRecords: function(theDomain)
        {
            $('#componentServerSettingsUpdateMX').html(BRAVO.Translate._("WCC_MAIN_mxRecordsUpdating"));


             $.ajax({
                type: "POST",
                url: '/ajax/forcemx',
                dataType : 'json',
                data: {'domain': theDomain, 'postToken':Globals.POST_TOKEN},
                success: function(data) {fixMXSuccess.call(that, data)},
                error: WCC.utils.handleError
            });
        },

        /**
         * Return properties.data
         *
         */
        getData: function()
        {
            return properties.data;
        },


        /**
         * Close the dialog
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
        },

        /**
         * set the SRV record for a domain
         */
        setSRVRecord: function(srvDomain, srvStatus)
        {
            var that = this;
             $.ajax({
                type: "POST",
                url: '/ajax/setsrv',
                dataType : 'json',
                data: {'domain': srvDomain, 'status': srvStatus, 'postToken':Globals.POST_TOKEN},
                success: function(data) {setSrvSuccess.call(that, data);},
                error: WCC.utils.handleError
            });
        },

        /**
         * get the SRV record for a domain
         */
        getSRVRecord: function(srvDomain)
        {
        	var that = this;
             $.ajax({
                type: "POST",
                url: '/ajax/getsrv',
                dataType : 'json',
                data: {'domain': srvDomain, 'postToken':Globals.POST_TOKEN},
                success: function(data) {getSrvSuccess.call(that, data);},
                error: WCC.utils.handleError
            });
        }




    };


}());



/**
 * Create Account dialog
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.createAccount = (function()
{
    // props of thd dialog box itself
    var properties = {};

    properties.dialogDivId = 'componentCreateAccount';
    properties.template = '#componentCreateAccountTemplate';
    properties.title = BRAVO.Translate._("WCC_MAIN_createAccountTitle");

    var currentlyOpen = false;

    var myPlanTips = [];

    var defaultTab = 0;
    var defaultPlan = null;
    var returnTo = null;
    var advancedToggleStatus = false;

    var validationAttached = false;
    var anchorsAttached = false;

    var deleteKey = {};
    var submitObj = {};

    var passwordCurrentlyValid = false;
    var pendingValidation = false;



    /**
     * AJAX success for delete of plans
     *
     * @param object data
     */
    var deletePlansSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            // do some search and replace on the delete key...
            for (var key in deleteKey['account'])
            {
                for (var accountType in deleteKey['account'][key])
                {
                    WCC.cache.addAlert(key, accountType, 'penddel');
                }
            }

            if (WCC.allAccounts)
            {
                // WCC.allAccounts.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.domains.reset();
                WCC.model.emailPlans.reset();
                WCC.model.offPlans.reset();
                WCC.model.relayData.reset();
                WCC.model.availableCalPlans.reset();
                WCC.model.availableEmailPlans.reset();
                WCC.model.availableOffPlans.reset();
            }
            if (WCC.email)
            {
                //WCC.email.getAllAccounts();
                WCC.model.emailPlans.reset();
                WCC.model.availableEmailPlans.reset();
            }
            if (WCC.calendar)
            {
                // WCC.calendar.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.availableCalPlans.reset();
            }
            if (WCC.off)
            {
                // WCC.off.getAllAccounts();
                WCC.model.offPlans.reset();
                WCC.model.availableOffPlans.reset();
            }

            $(document).trigger('infoRowRefresh');
        } else {
            WCC.components.createAccount.clearErrors();
            WCC.components.createAccount.deleteError(data.error);
        }
        return true;
    };


    /**
     * AJAX create account success handler...
     */
    var createAccountSuccess = function(data)
    {

        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true && undefined==data.error &&  undefined==data.altTriggers )
        {
           $('#'+properties.dialogDivId).dialog("close");
           $('#'+properties.dialogDivId).remove();

           var doInsert = false;
           // do a live insert into the records
           var insertObj = {};
           insertObj['displayName'] = submitObj['emailAddress'];
           insertObj['utf8'] = WCC.utils.utf8Address(submitObj['emailAddress']);
           insertObj['realName'] = submitObj['emailAddress'];
           insertObj['status'] = 'pending';
           insertObj['isPass'] = true;

           if (submitObj['includeCalendar'] == true && (WCC.allAccounts || WCC.calendar) )
           {
               insertObj.calUser = submitObj['emailAddress'];
               insertObj.calPlan = submitObj.selectCalPlan;

               insertObj.calAccountDataObj = {};
               insertObj.calAccountDataObj.accountUid = submitObj.selectCalPlan;
               insertObj.calAccountDataObj.pack_uid = submitObj.selectCalPlan;
               insertObj.calAccountDataObj.status = 'pending';
               insertObj.calAccountDataObj.calUser = submitObj['emailAddress'];
               doInsert = true;

           }
           if (submitObj['includeEmail'] == true )
           {
               if  (WCC.allAccounts || WCC.email)
               {
                   doInsert = true;
               }
               insertObj.emailAddress = submitObj['emailAddress'];
               insertObj.delivery_mode = 'local';

               insertObj.emailAccountDataObj = {};
               insertObj.emailAccountDataObj.emailAddress = submitObj['emailAddress'];

               insertObj.emailAccountDataObj.editStatus = false;

               var emailPlans = WCC.model.emailPlans.get();
               for (var k in emailPlans)
               {
                   if (emailPlans[k]['pack_uid'] == submitObj.selectEmailPlan)
                   {
                       insertObj.pack_id = emailPlans[k]['pack_id']
                   }
               }
               insertObj.emailAccountDataObj.pack_id = submitObj.selectEmailPlan;
               WCC.userSettings.set('planOpen' + submitObj.selectEmailPlan, "open");
           }
           if (submitObj['includeFiles'] == true && (WCC.allAccounts || WCC.off))
           {
               insertObj.offUser = submitObj['emailAddress'];
               insertObj.offPlan = submitObj.selectOffPlan ;

               insertObj.offAccountDataObj = {};
               insertObj.offAccountDataObj.accountUid = submitObj.selectOffPlan;

               doInsert = true;
           }

           if (doInsert == true)
           {
               WCC.cache.cacheThing(submitObj['emailAddress'], insertObj);
           }


           // now make it pend setup
           if (submitObj['includeCalendar'] == true)
           {
               WCC.cache.addAlert(submitObj['emailAddress'], 'cal', 'pendsetup');
               setTimeout(function(){WCC.components.updateWatcher.watchCalendar(submitObj.emailAddress)}, 1000);
           }
           if (submitObj['includeEmail'] == true)
           {
               WCC.cache.addAlert(submitObj['emailAddress'], 'email', 'pendsetup');
               setTimeout(function(){WCC.components.updateWatcher.watchEmail(submitObj.emailAddress)}, 1000);
           }
           if (submitObj['includeFiles'] == true)
           {
               WCC.cache.addAlert(submitObj['emailAddress'], 'off', 'pendsetup');
               setTimeout(function(){WCC.components.updateWatcher.watchOff(submitObj.emailAddress)}, 1000);
           }

           $(document).trigger('infoRowRefresh');

           //
           //WCC.cache.reset();
           if (WCC.allAccounts)
            {
                // WCC.allAccounts.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.domains.reset();
                WCC.model.emailPlans.reset();
                WCC.model.offPlans.reset();
                WCC.model.relayData.reset();
                WCC.model.availableCalPlans.reset();
                WCC.model.availableEmailPlans.reset();
                WCC.model.availableOffPlans.reset();
            }
            if (WCC.email)
            {
                //WCC.email.getAllAccounts();
                WCC.model.emailPlans.reset();
                WCC.model.availableEmailPlans.reset();
            }
            if (WCC.calendar)
            {
                // WCC.calendar.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.availableCalPlans.reset();
            }
            if (WCC.off)
            {
                // WCC.off.getAllAccounts();
                WCC.model.offPlans.reset();
                WCC.model.availableOffPlans.reset();
            }

            var accountIsBeingCreated = BRAVO.Translate._("WCC_MAIN_accountIsBeingCreated");
            accountIsBeingCreated = accountIsBeingCreated.replace('#VALUE#', insertObj['displayName']);

            if (submitObj['includeEmail'] == true) {
	            WCC.components.welcomeEmail.setData('displayName', WCC.utils.utf8Address(insertObj['displayName']));
	            WCC.components.welcomeEmail.open();
            }

            WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), accountIsBeingCreated);

        } else {
        	if (data.altTriggers && data.altTriggers.forceOffRestoreChoice) {
        		if (data.altTriggers.forceOffRestoreChoice) {
        			handleRestoreChoice(data);
        		}
                WCC.spinKontrol.close();
                $("#saveButton").attr('disabled', null);

        		return false;
        	} else {
            	handleError(data);
                return false;
        	}
        }
        return true;
    };


    /**
     * Got an error back on the create request?  better display it
     *
     * $('#componentCreateAccountErrorDomain').html('');
            $('#componentCreateAccountErrorPassword').html('');
            $('#componentCreateAccountErrorPlan').html('');
            $('#componentCreateAccountErrorMisc').html('');


     *
     */
    var handleError = function (data) {


        WCC.spinKontrol.close();
        $("#saveButton").attr('disabled', null);

        WCC.components.createAccount.clearErrors();
    	for (var errorType in data.error)
        {
            for (var singleError in data.error[errorType])
            {
                switch (errorType)
                {
                    case 'mailbox':
                        WCC.components.createAccount.handleTabError('email');
                        $('#componentCreateAccountErrorMailbox').html(data.error[errorType][singleError]);
                        break;
                    case 'plan':
                        WCC.components.createAccount.handleTabError('email');
                        $('#componentCreateAccountErrorPlan').html(data.error[errorType][singleError]);
                        break;
                    case 'ccAddress':
                        WCC.components.createAccount.handleTabError('email');
                        $('#componentCreateAccountErrorCC').html(data.error[errorType][singleError]);
                        break;
                    case 'domain':
                        $('#componentCreateAccountErrorDomain').html(data.error[errorType][singleError]);
                        break;
                    case 'emailAddress':
                        $('#componentCreateAccountErrorDomain').html(data.error[errorType][singleError]);
                        break;
                    case 'password':
                        $('#componentCreateAccountErrorPassword').html(data.error[errorType][singleError]);
                        break;
                    case 'catchall':
                        WCC.components.createAccount.handleTabError('email');
                        $('#componentCreateAccountErrorCatchall').html(data.error[errorType][singleError]);
                        break;
                    case 'calendar':
                        WCC.components.createAccount.handleTabError('calendar');
                        $('#componentCreateAccountErrorMisc').html(data.error[errorType][singleError]);
                        break;
                    case 'off':
                        WCC.components.createAccount.handleTabError('off');
                        $('#componentCreateAccountErrorOff').html(data.error[errorType][singleError]);
                        break;
                    case 'autoResponder':
                        WCC.components.createAccount.handleTabError('email');
                        WCC.components.createAccount.handleAutoReplyClick();
                        $('#componentCreateAccountErrorAutoReply').html(data.error[errorType][singleError]);
                        break;
                    default:
                        $('#componentCreateAccountErrorMisc').html(data.error[errorType][singleError]);
                }
            }
    	}
    };




    var validateOffSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true )
        {
            if (data.validate == true)
            {
                $('#createAccountTrialUpgradeVerification').html('<span style="color: green">' + BRAVO.Translate._("WCC_MAIN_accountValidated") + '</span>');
                $("#saveButton").attr('disabled', null);
            }
            else
            {
                $('#createAccountTrialUpgradeVerification').html('<span style="color: red">' +BRAVO.Translate._("WCC_MAIN_accountValidateFailed") + '</span>');
                $("#saveButton").attr('disabled', 'disabled');
            }
        }
    };


    /**
     * Wow, Choosing a Restore sure is a tough call, aint it?
     * same =  resurrected with old info
     * clean = reborn with a clean slate
     */
    var handleRestoreChoice = function (data)
    {
        var renderObj = {};
        renderObj.user = data['altTriggers']['forceOffRestoreChoice'][0]['user_id'];
        renderObj.quota_used = WCC.utils.bytesToReadable(data['altTriggers']['forceOffRestoreChoice'][0]['used_bytes']);

        var renderedOutput =  $('#componentCreateAccountRestoreTemplate').tmpl(renderObj);

        // create the dialog box div... if it's not there
        if ( $('#handleRestoreChoiceDiv').length == 0)
        {
            var newDiv = document.createElement('div');
            newDiv.id = 'handleRestoreChoiceDiv';
            $(document.body).append(newDiv);
        }

        $('#handleRestoreChoiceDiv').dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 400,
                title: "Account Restore"
            });

        $('#handleRestoreChoiceDiv').html(renderedOutput);
        $('#handleRestoreChoiceDiv').dialog("open");
        $('#handleRestoreChoiceDiv').dialog( 'option', 'position', 'center' );
    };


    // the next two funcs are for the autocomplete
    function split( val )
    {
        return val.split( /,\s*/ );
    };
    function extractLast( term ) {
    	if (undefined===term) return term;
        return split( term ).pop();
    };

    var getPendingValidationSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true )
        {
            pendingValidation = data.count;
                $(document).trigger('updatePendingValidationData');

		};
	};



    var getPendingValidationSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true )
        {
        		pendingValidation = data.count;
                $(document).trigger('updatePendingValidationData');

        };
    };


    return{

        doRestoreTest: function()
        {
            handleRestoreChoice();
        },

        doRestore: function()
        {
            WCC.spinKontrol.open('componentCreateAccount');
            $("#saveButton").attr('disabled', 'disabled');

            if ($('#doResurrect').attr('checked') == true)
            {
                this.doRestoreJesus();
            }
            else
            {
                this.doRestoreBuddha();
            }
            $('#handleRestoreChoiceDiv').remove();

        },


        doRestoreBuddha: function()
        {
            // submit obj stuff goes here!
            submitObj.offRestore = 'clear';
            $.ajax({
                type: "POST",
                url: 'ajax/createaccount/',
                dataType : 'json',
                data: submitObj,
                success : function(data) {createAccountSuccess(data);},
                error :  handleError
            });
        },

        doRestoreJesus: function()
        {
            submitObj.offRestore = 'wakeUp';
             $.ajax({
                type: "POST",
                url: 'ajax/createaccount/',
                dataType : 'json',
                data: submitObj,
                success : function(data) {createAccountSuccess(data);},
                error :  handleError
            });
        },





        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(myTab, defaultPlanInput, returnToInput)
        {
            currentlyOpen = false;


            WCC.components.analytics.trackView('modal', 'wcc-crete-email');


            // see if we should go back to, say, to the bulkCreate or whatever
            // after we're done with stuff
            if (returnToInput != undefined)
            {
                returnTo = returnToInput;
            }
            else
            {
                returnTo = null;
            }

            switch (myTab) {
            case 'email':
            	defaultTab = 0;
            	break;
            case 'calendar':
            	defaultTab = 1;
            	break;
            case 'off':
            	defaultTab = 2;
            	break;
            default:
                defaultTab = 0;
            }

            passwordCurrentlyValid = false;

            // if there's a default plan, cool... otherwise, we'll try to figure it out...
            if (defaultPlanInput != undefined)
            {
                defaultPlan = defaultPlanInput;
            }
            else
            {
                // email
                if (WCC.sortAndSearch.returnFilterField() == 'pack_id' && WCC.sortAndSearch.returnFilterValue() != null)
                {
                    defaultPlan = WCC.sortAndSearch.returnFilterValue();
                }

                // calendar
                else if (WCC.sortAndSearch.returnFilterField() == 'calPlan' && WCC.sortAndSearch.returnFilterValue() != null)
                {
                    defaultPlan = WCC.sortAndSearch.returnFilterValue();
                }
                // off
                else if (WCC.sortAndSearch.returnFilterField() == 'offPlan' && WCC.sortAndSearch.returnFilterValue() != null)
                {
                    defaultPlan = WCC.sortAndSearch.returnFilterValue();
                }
                else
                {
                    defaultPlan = null;
                }
            }

            // insert the AT sign into the ui keycode stack...
            $.ui.keyCode['AT'] = 64;

            // now, let's make sure we've got the info that we need
            var that = this;


            // bind the heck out of that stuff!
            $(document).bind('updateAvailableEmailPlans.createAccount', function(){WCC.components.createAccount.renderDialog()});
            $(document).bind('updateAvailableCalPlans.createAccount', function(){WCC.components.createAccount.renderDialog()});
            $(document).bind('updateAvailableOffPlans.createAccount', function(){WCC.components.createAccount.renderDialog()});
            $(document).bind('updateDomains.createAccount', function(){WCC.components.createAccount.renderDialog()});
            $(document).bind('updateRelayData.createAccount', function(){WCC.components.createAccount.renderDialog()});
            $(document).bind('updateCalPlans.createAccount', function(){WCC.components.createAccount.renderDialog()});
            $(document).bind('updateEmailPlans.createAccount', function(){WCC.components.createAccount.renderDialog()});
            $(document).bind('updateOffPlans.createAccount', function(){WCC.components.createAccount.renderDialog()});
            $(document).bind('handleProducts.createAccount', function(){WCC.components.createAccount.handleProducts()});

            $(document).bind('updatePendingValidationData.createAccount', function(){WCC.components.createAccount.renderDialog();});


            WCC.model.availableCalPlans.reset();
            WCC.model.availableEmailPlans.reset(true);
            WCC.model.availableOffPlans.reset();

            WCC.components.muiPod.hasFreeAccounts();

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);

                WCC.utils.showLoading(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 548,
                title: properties.title,
                beforeClose: function()
                {
                    WCC.components.createAccount.hideAllInfo();
                    $('.sf-flyout-client-sf-context').remove()
                    $('.sf-tipper').remove();
                },
                close: function(){WCC.utils.detatchToolTip();$('#'+properties.dialogDivId).remove();WCC.components.createAccount.unbindEvents();WCC.components.createAccount.destroyTheDroplist();WCC.components.createAccount.clearDefaultPlan();}
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");

            //return;

            // and render!
            this.renderDialog();

            WCC.utils.centerThisDialog(properties.dialogDivId);

//            var parentWidth = $('#'+properties.dialogDivId).parent().parent().width() ;
//            var myWidth = $('#'+properties.dialogDivId).parent().width() ;
//            var unusedSpace = parentWidth - myWidth;
//            var position = unusedSpace /2 ;
//            $('#'+properties.dialogDivId).parent().offset({'left': position });

            // set the correct tab
            $("#createAccountPopinTabs").tabs('select',defaultTab);


            // attach the orient dialog func to window resize... we want ti to move
            $(window).resize(function(){WCC.components.createAccount.orientDialog();});


            return true;
        },


        /**
         * Send everything out for processing....
         * ... maybe? Gotta pass some validations first...
         */
        submit: function(offValidationObj)
        {

            //dont do it if the button is disabled, dude
            if($("#saveButton").attr('disabled')=='disabled') {
                return;
            }

            WCC.components.createAccount.clearErrors();

            var that = this;
            // do some quick checks
            if (!$("#createAccountIncludeCalendar").prop("checked") && !$("#createAccountIncludeFiles").prop("checked") && !$("#createAccountIncludeEmail").prop("checked"))
            {
                $('#componentCreateAccountErrorMisc').html(BRAVO.Translate._("WCC_MAIN_noAccountTypeSelected"));
        	return false;
            }
            /*
            var passValidate = WCC.utils.validatePassword($('#createAccountPassword1').val() , $('#createAccountPassword2').val() );
            if (passValidate == false)
            {
                WCC.components.componentErrorDisplay.open('Password Fail', 'Fix your passwords!', function(){
                    $('#createAccountPassword1Label1').addClass('attention');
                    $('#createAccountPassword1Label2').addClass('attention');
                } );
                return false;
            }
            */
            // check and see if you need to show the terms and conditions (for free accounts)
            requireTermsAgreement = false;

            //for (var arrayIndex in WCC.components.createAccount.getEmailPlans()) {
            for (var arrayIndex in WCC.model.emailPlans.get() ) {
            	if (WCC.model.emailPlans.get()[arrayIndex].isFree && WCC.model.emailPlans.get()[arrayIndex].pack_uid == $("#createAccountEmailPlanSelect").val()) {
            		x = WCC.model.emailPlans.get()[arrayIndex];
            		requireTermsAgreement = true;
            	}
            }

            //okay now show em
            if ($("#createAccountIncludeEmail").prop("checked") && requireTermsAgreement) {
            	if($("#termsAcceptTerms").attr("checked")!= "checked") {
                    $('#componentCreateAccountErrorMisc').html(BRAVO.Translate._("WCC_MAIN_mustAgreeToTerms"));
                    return false;
            	} else {
                    //$('#termsAcceptTermsLabel').addClass('ok-icon');
                    //$('#termsAcceptTermsLabel').removeClass('alert-icon');

            	}
            } else {
                //$('#termsAcceptTermsLabel').addClass('alert-icon');
                //$('#termsAcceptTermsLabel').removeClass('ok-icon');
            }


            // OFF... err... online storage upgrade stuff
            if ($('#createAccountTrialUpgradeOk').prop('checked') && offValidationObj == undefined )
            {
              this.doOffTrialValidation(true);
              return false;
            }

            if ($('#createAccountTrialUpgradeOk').prop('checked') && offValidationObj != undefined)
            {
                if (offValidationObj.validate != true)
                {
                    WCC.components.createAccount.handleTabError('off');
                    $('#componentCreateAccountErrorOff').html(BRAVO.Translate._("WCC_MAIN_validLoginToUpgradeOFF"));
                    return;
                }
            }

            WCC.spinKontrol.open('componentCreateAccount');
            $("#saveButton").attr('disabled', 'disabled');


            /*
             * Holding off on this part for now because folks might need to create email addresses for stuff not hosted or shared
             * anyway, they can do it in old ECC, soo...no check now, my need to resurrect this later
            if (WCC.utils.checkValidEmailAddress($('#createAccountEmailAddress').val(), this.getDomains() ) == false)
            {
                WCC.components.componentErrorDisplay.open('Email address fail', 'There is a problem with your email!', function(){
                    $('#createAccountEmailAddressLabel').addClass('attention');
                } );
                return false;
            }
            */



            // we're building a submit obj!
            submitObj = {};

            submitObj.includeEmail = $("#createAccountIncludeEmail").prop("checked");
            submitObj.includeCalendar = $("#createAccountIncludeCalendar").prop("checked");
            submitObj.includeFiles = $("#createAccountIncludeFiles").prop("checked");
            submitObj.includeFax = $("#createAccountIncludeFax").prop("checked");

            submitObj.emailAddress = $("#createAccountEmailAddress").val();

            submitObj.password1 = $("#createAccountPassword1").val();
            submitObj.password2 = $("#createAccountPassword2").val();

            submitObj.selectEmailPlan = $("#createAccountEmailPlanSelect").val();

            submitObj.useEmailQuota = $("#createAccountUseEmailQuota").prop("checked");

            var planObj = WCC.components.createAccount.getEmailPlanByPackUid(submitObj.selectEmailPlan);
            if (planObj!==undefined && planObj['unlimited_quota'] == true)
            {
                submitObj.quota = -1;
            } else {
                submitObj.quota = $("#createAccountQuota").val();
            }

            submitObj.useCatchAll = $("#createAccountUseCatchall").prop("checked");
            submitObj.useSendEmailTo = $("#createAccountUseSendEmailTo").prop("checked");

            if($("#createAccountSendEmailTo").val() == "(separate with commas)") {
                submitObj.sendEmailTo = "";
            } else {
                submitObj.sendEmailTo = $("#createAccountSendEmailTo").val();
            }

            submitObj.relays = $("#createAccountSMTPRelays").val();
            submitObj.useSpamFilter = $("#createAccountUseSpamFilter").prop("checked");
            submitObj.deliveryBehavior = $("#createAccountDeliveryBehavior").val();
            submitObj.selectCalPlan = $("#createAccountSelectCalPlan").val();
            submitObj.calendarMessage = $('#createAccountCalendarMessage').val();
            submitObj.selectOffPlan = $("#createAccountSelectOffPlan").val();
            submitObj.enableAutoReply = $("#createAccountEnableAutoReply").prop("checked");
            submitObj.autoReplyFrequency = $("#createAccountAutoReplyFrequency").val();
            submitObj.autoReplySourceDefault = $("#createAccountAutoReplySourceChoiceDefault").prop("checked");

            if($("#createSetupInstructionEmail").val()=="e.g., email@domain.com, email2@domain.com, etc.") {
            	submitObj.autoReplySourceEmail = "";
            } else {
            	submitObj.autoReplySourceEmail = $("#createSetupInstructionEmail").val();
            }

            submitObj.autoReplySourceEmail = $("#createAccountAutoReplySourceEmail").val();
            submitObj.autoReplySubjectDefault = $("#createAccountAutoReplySubjectChoiceOriginalSubject").prop("checked");
            submitObj.autoReplySubject = $("#createAccountAutoReplySubject").val();
            submitObj.autoReplyMessage = $("#createAccountAutoReplyMessage").val();
            submitObj.autoReplyUseStart = $("#createAccountAutoReplyUseStart").prop("checked");
            submitObj.autoReplyUseEnd = $("#createAccountAutoReplyUseEnd").prop("checked");

            if ($('#createAccountAutoReplyUseStart').prop('checked'))
            {
                submitObj.autoReplyStart = $("#createAccountAutoReplyStart").val();
                submitObj.autoReplyStartOffset = $("#createAccountAutoReplyStart").datetimepicker('getSelectedTimezone')
                if (submitObj.autoReplyStartOffset == null)
                {
                    var tzObj = WCC.components.datePicker.returnTimezone();
                    submitObj.autoReplyStartOffset = tzObj.timezone_id;
                };
            }
            else
            {
                submitObj.autoReplyStart = '';
            }

            if ($('#createAccountAutoReplyUseEnd').prop('checked'))
            {
                submitObj.autoReplyEnd = $("#createAccountAutoReplyEnd").val();
                submitObj.autoReplyEndOffset = $("#createAccountAutoReplyEnd").datetimepicker('getSelectedTimezone');
                if (submitObj.autoReplyEndOffset == null)
                {
                    var tzObj = WCC.components.datePicker.returnTimezone();
                    submitObj.autoReplyEndOffset = tzObj.timezone_id;
                }
            }
            else
            {
                submitObj.autoReplyEnd = '';
            }


            submitObj.createAccountTrialUpgradeOk = $('#createAccountTrialUpgradeOk').prop('checked');
            submitObj.offUser = $("#createAccountOffAddress").val();
            submitObj.offPassword1 = $("#createOffPassword1").val();
            submitObj.offPassword2 = $("#createOffPassword1").val();

            submitObj.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajax/createaccount/',
                dataType : 'json',
                data: submitObj,
                success : function(data) {createAccountSuccess(data);},
                error :  handleError
            });
        },

        getPendingValidation: function()
        {
            submitData = {};
            submitData.postToken = Globals.POST_TOKEN;
          $.ajax({
                type: "POST",
                url: 'ajaxemail/getpendingvalidation/',
                dataType : 'json',
                data: submitData,
                success : function(data) {getPendingValidationSuccess(data);},
                error :  handleError
            });
        },



        getPendingValidation: function()
        {
            data = {};
            data.postToken = Globals.POST_TOKEN;
        	$.ajax({
                type: "POST",
                url: 'ajaxemail/getpendingvalidation/',
                dataType : 'json',
                data: data,
                success : function(data) {getPendingValidationSuccess(data);},
                error :  handleError
            });
        },


        /**
         * Render the dialog...
         * ... won't render unless all the plans are loaded and ready
         */
        renderDialog: function()
        {

            if (currentlyOpen == true)
            {
                return;
            }

            if ($('#componentCreateAccount').length == 0)
            {
                return;
            }

            var renderedOutput = null;


            if (WCC.model.availableEmailPlans.get() == null)
            {
                return;
            }
            if (WCC.model.availableCalPlans.get() == null)
            {
                return;
            }
            if (WCC.model.availableOffPlans.get() == null)
            {
                return;
            }
            if (WCC.model.domains.get() == null)
            {
                return;
            }
            if (WCC.model.domainsutf8.get() == null)
            {
                return;
            }
            if (WCC.model.relayData.get() == null)
            {
                return;
            }
            if (WCC.model.emailPlans.get() == null)
            {
                return;
            }
            if (WCC.model.calPlans.get() == null)
            {
                return;
            }
            if (WCC.model.offPlans.get() == null)
            {
               return;
            }

            if(pendingValidation === false) {
            	this.getPendingValidation();
            	return ;
            } else {
            	if (pendingValidation >= Globals.PV_THRESHHOLD) {
                    // attach the orient dialog func to window resize... we want ti to move

            		renderedOutput =  $('#pendingValidation').tmpl({closeId: '#'+properties.dialogDivId});
                    $('#'+properties.dialogDivId).html(renderedOutput);
                    $('#'+properties.dialogDivId).parent().css('width', '415px');

                    $(window).resize(function(){WCC.components.createAccount.orientDialog();});
                    currentlyOpen = true;
                    pendingValidation = false;

                    return true;
            	}
            	pendingValidation = false;
            }

            if (WCC.components.muiPod.hasFreeAccounts() == null)
            {
               setTimeout(function(){WCC.components.createAccount.renderDialog();}, 100)
               return;
            }


            var data = {};

            data['hasFreeAccounts'] = WCC.components.muiPod.hasFreeAccounts();

            var sDate = new Date();
            var thisMonth = sDate.getMonth() + 1;
            if (thisMonth < 10)
            {
                thisMonth = '0' + thisMonth;
            }

            var thisDate = sDate.getDate();
            if (thisDate < 10)
            {
                thisDate = '0' + thisDate;
            }

            data["today"] = Date.today().toString("M/d/yyyy");
            data["nextYear"] = thisMonth +'/' + thisDate + '/' + (sDate.getFullYear()+1);


            data["nextWeek"] = Date.today().addWeeks(1).toString("M/d/yyyy");


            for(var idx in WCC.model.calPlans.get()) {
            	WCC.model.calPlans.get()[idx]['settings']['t_friendly_name'] = WCC.model.calPlans.get()[idx]['settings']['friendly_name'];
            }

            // render it all to the page...
            renderedOutput =  $(properties.template).tmpl(data);
            $('#'+properties.dialogDivId).html(renderedOutput);


            WCC.components.createAccount.makeTheDroplist();

            // show advanced options?
            var pinState = WCC.userSettings.get('createAccountAdditionalOptionsVisible');
            if(pinState == "true" || pinState == true)
            {
                $(".additional-options-hider").css('display', 'inline-block');
            }
            else
            {
            	$(".additional-options-hider").css('display', 'none');
            }



            WCC.components.createAccount.handleToggleVisibility()



            switch (defaultTab) {
            case 1:
                if (WCC.model.availableCalPlans.get().length > 0)
                {
                    $("#createAccountIncludeCalendar").attr("checked","checked");
                    WCC.components.createAccount.openCalInfo();
                }
            	break;
            case 2:
                if (WCC.model.availableOffPlans.get().length > 0)
                {
                    $("#createAccountIncludeFiles").attr("checked","checked");
                    WCC.components.createAccount.openOffInfo();
                }

            	break;
            default:
                if (WCC.model.availableEmailPlans.get().length > 0)
                {
                    $("#createAccountIncludeEmail").attr("checked","checked");
                    WCC.components.createAccount.openEmailInfo();
                }

            }

            $("#createAccountPopinTabs").tabs({selected: defaultTab});

            $('#createAccountTrialArea').hide();

            WCC.components.createAccount.handleProducts();

            $('#createAccountIncludeEmail').click(function(){defaultTab = 0;WCC.components.createAccount.handleProducts(this);});
            $('#createAccountIncludeCalendar').click(function(){defaultTab = 1;WCC.components.createAccount.handleProducts(this);});
            $('#createAccountIncludeFiles').click(function(){defaultTab = 2;WCC.components.createAccount.handleProducts(this);});

            var cCA = $('#componentCreateAccount');
            //cCA.find('#createAccountEmailPlanSelect').change(function(){WCC.components.createAccount.handleQuotaForEmailPlanSwitch();});
            cCA.find('#createAccountIncludeEmail').change(function(){WCC.components.createAccount.handleQuotaForEmailPlanSwitch();});

            cCA.find('#createAccountAutoReplySourceChoiceDefault').change(function(altEvent){WCC.components.createAccount.handleAutoReplyFromDisplay(altEvent);});
            cCA.find('#createAccountAutoReplySourceChoiceOther').change(function(altEvent){WCC.components.createAccount.handleAutoReplyFromDisplay(altEvent);});

            cCA.find('#createAccountAutoReplySubjectChoiceOriginalSubject').change(function(altEvent){WCC.components.createAccount.handleAutoReplySubjectDisplay(altEvent);});
            cCA.find('#createAccountAutoReplySubjectChoiceOtherSubject').change(function(altEvent){WCC.components.createAccount.handleAutoReplySubjectDisplay(altEvent);});

            cCA.find('#createSetupInstructionHide').click(function(){$('#createSetupInstructionInput').hide();$('#createSetupInstructionPrompt').show();});
            cCA.find('#createSetupInstructionShow').click(function(){$('#createSetupInstructionInput').show();$('#createSetupInstructionPrompt').hide();});
            cCA.find('#advancedToggler').click(function(){WCC.components.createAccount.toggleAdditionalOptions();});
            cCA.find('#autoReplyToggler').click(function(){WCC.components.createAccount.toggleAutoReply();});

            cCA.find('#createAccountEnableAutoReply').click(function(){WCC.components.createAccount.handleAutoReplyClick();});

            cCA.find('#termsLink').click(function(){WCC.components.componentTermsAndConditions.open(BRAVO.Translate._("WCC_MAIN_termsTitle"), '', ''  );});

            cCA.find('#purchaseCalendarLink').click(function(){window.open('/productpurchase?product=calendar');});
            cCA.find('#purchaseOffLink').click(function(){window.open('/productpurchase?product=off');});
            cCA.find('#termsAcceptTerms').click(function(){WCC.components.componentTermsAndConditions.setTermsClass();});

            cCA.find('#createAccountTrialUpgradeOk').click(function(){WCC.components.createAccount.handleTrialUpgradeClick();});
            cCA.find('#createAccountsTrialValidate').click(function(){WCC.components.createAccount.doOffTrialValidation();});

            cCA.find('#createAccountCreateManyLink').click(function(){WCC.components.createAccount.closeDialog();WCC.components.bulkCreation.open();});
            cCA.find('#createAccountForwardingLink').click(function(){WCC.components.createAccount.closeDialog(); WCC.components.createForwarding.open();});

            cCA.find('#createAccountEmailPlanChangeLink').click(function(){WCC.components.createAccount.handleChangeEmailPlan()});
            cCA.find('#createAccountCalPlanChangeLink').click(function(){WCC.components.createAccount.handleChangeCalPlan()});
            cCA.find('#createAccountOffPlanChangeLink').click(function(){WCC.components.createAccount.handleChangeOffPlan()});

            cCA.find('#cancelButton').click(function(){WCC.components.createAccount.closeDialog() });
            cCA.find('#saveButton').click(function(){WCC.components.createAccount.submit() });

            // a couple of remaining google analytics things
            $('#componentCreateAccount').parent().find('.ui-dialog-titlebar-close').click(
                function(){ WCC.components.analytics.trackEvent('wcc-create', 'cancel-create', 'x-button', 0, '');}
            );



            // setup behavor for the autocomplete
            $('#createAccountEmailAddress')
                .bind('change keydown keyup', function(){WCC.components.createAccount.handleEmailEntryUpdate();})
                .bind("keydown", function (event)
                {
                    if ( event.keyCode === $.ui.keyCode.TAB && $( this ).data( "autocomplete" ).menu.active )
                    {
                        event.preventDefault();
                    }
                })
                .keyup(function(event)
                {
                    if ( event.which == $.ui.keyCode['AT'])
                    {
                        $('#createAccountEmailAddress').autocomplete("search", "");
                        if(WCC.model.domains.get().length!=0) {
                            event.preventDefault();
                        }
                    }
                })
                .autocomplete(
                {
                    minLength: 0,
                    source: function( request, response ) {

                        // delegate back to autocomplete, but extract the last term
                    	if(WCC.model.domainsutf8.get()!=0) {
                    		domainSearch = new String(request.term);
                    		domainSearch = domainSearch.split('@')[1];
                    		if (undefined!==domainSearch) {
                    			var dList = new Array();
                    			$.each(WCC.model.domainsutf8.get(), function(index,value) {
                    				dList.push(value.utf8);
                    			});
    	                        response( $.ui.autocomplete.filter(
    	                        		dList, extractLast( domainSearch ) ) );
                    		}
                    	}
                    },
                    focus: function() {
                        // prevent value inserted on focus
                        return false;
                    },
                    select: function( event, ui ) {
                        // this be the static selektah!
                        var explodedArray = this.value.split('@');

                        this.value = explodedArray[0] + '@'+ punycode.toASCII(ui.item.value);

                        WCC.components.createAccount.handleEmailEntryUpdate();
                        $("#createAccountEmailAddress").focus();
                        return false;
                    }
                }
            );

            // oh... but what if they person chooses a domain they're not using
            $('#createAccountEmailAddress').blur(
                function()
                {
                    var domainArray = WCC.model.domains.get();
                    var emailAddressVal = $('#createAccountEmailAddress').val();

                    var emailArray = emailAddressVal.split('@');
                    var domainVal = emailArray[1];
                    if (jQuery.inArray(domainVal, domainArray) == -1 && jQuery.trim(emailAddressVal) != '')
                    {

                        if (WCC.utils.checkValidEmailAddress(emailAddressVal) == false )
                        {
                            $('#createAccountEmailAddressOK')
                                .removeClass('ok-icon')
                                .addClass('notok-icon')
                                .html('&nbsp;');

                        }
                        else
                        {
                           $('#createAccountEmailAddressOK')
                                .removeClass('notok-icon')
                                .removeClass('ok-icon')
                                .html('<span id="componentCreateAccountBadDomain"><img src="' + Globals.CDNPath + '/../css/images/circleI.png" style="height:13px; position: relative"/><a href="#" id="createAccountPossiblyBadDomain" onclick="return false">' + BRAVO.Translate._("WCC_Main_areYouSureThatsCorrect") + '</a></span>');

                            require("starfield/sf.context", function () {
                              $("#componentCreateAccountConfirmCorrectDomain").sfContext({
                                anchor: $('#createAccountPossiblyBadDomain'),
                                positionIdeal: 'ul',
                                singleInstanceOnly: false
                              });

                            });
                        }


                    }
                    else
                    {
                        if ($('#createAccountEmailAddress').val() != '')
                        {
                            // domain is cool... remove the warning...
                            $('#createAccountEmailAddressOK')
                                .removeClass('notok-icon')
                                .addClass('ok-icon')
                                .html('&nbsp;');

                            if ($('#createAccountIncludeEmail').is(':checked') == true)
                            {
                                WCC.components.createAccount.setRegionForDomain($('#createAccountEmailAddress').val(), $('#createAccountEmailPlanSelect').val() );

                            }

                        }

                    }
                })
                .focus(function(){
                    $("#createAccountEmailAddressOK")
                        .removeClass('notok-icon')
                        .removeClass('ok-icon')
                        .html('&nbsp;');

                });


            $('#createAccountPassword2')
                .blur(function(){
                    if ($('#createAccountPassword2').val() == '')
                    {
                        return;
                    }
                    else if ($('#createAccountPassword2').val() == $('#createAccountPassword1').val() )
                    {
                        $("#createAccountPassword2OK")
                            .removeClass('notok-icon')
                            .addClass('ok-icon');
                    }
                    else
                    {
                        $("#createAccountPassword2OK")
                            .addClass('notok-icon')
                            .removeClass('ok-icon');
                    }

                })
                .focus(function(){
                    $("#createAccountPassword2OK")
                        .removeClass('notok-icon')
                        .removeClass('ok-icon');
                });

            $('#createAccountPassword1')
                .blur(function(){
                    if (passwordCurrentlyValid == true)
                    {
                        $("#createAccountPassword1OK")
                            .removeClass('notok-icon')
                            .addClass('ok-icon');
                    }
                    else
                    {
                        $("#createAccountPassword1OK")
                            .addClass('notok-icon')
                            .removeClass('ok-icon');
                    }

                    return true;
                })

                .focus(function(){
                    $("#createAccountPassword1OK")
                        .removeClass('notok-icon')
                        .removeClass('ok-icon');

                    return true;
                });

            // set up the datepicker
            WCC.components.datePicker.add($("#createAccountAutoReplyStart") );
            WCC.components.datePicker.add($("#createAccountAutoReplyEnd") );

            $('#createAccountSetPin').click(function(){WCC.components.createAccount.setPin();return false;});

            //attach the generic tooltip
            WCC.utils.attachToolTip('tip');

            //$("#createAccountSelectCalPlan").change(function(){WCC.components.createAccount.handleCalPlanSwitch(); });
            //$("#createAccountSelectOffPlan").change(function(){WCC.components.createAccount.handleOffPlanSwitch(); });


            $("#createAccountPopinTabs").tabs('select',defaultTab);



            WCC.placeholder.attach('componentCreateAccount');

            $('#createAccountEmailAddress').focus();
              //$('#createAccountPassword2').keyup(function(){ WCC.components.createAccount.checkPassword();});
            //$('#createAccountPassword1').keyup(function(){ WCC.components.createAccount.checkPassword();});





            // do the plan switch stuff
            WCC.components.createAccount.handleQuotaForEmailPlanSwitch();
            WCC.components.createAccount.handleCalPlanSwitch();
            WCC.components.createAccount.handleOffPlanSwitch();

            this.attachPlanIndicators();
            this.handlePinstate();

            setTimeout(function(){WCC.components.createAccount.attachValidation()}, 100);

            if (WCC.model.availableEmailPlans.get().length==0 &&  WCC.model.availableCalPlans.get().length == 0 && WCC.model.availableOffPlans.get().length == 0)
            {
                if ($(".additional-options-hider").css('display') == "none")
                {
                    WCC.components.createAccount.toggleAdditionalOptions();

                }
            }
            $('.generic-tabs-menu').width(505);

            WCC.components.analytics.init(cCA);

            currentlyOpen = true;

            WCC.utils.centerThisDialog(properties.dialogDivId);

//            var parentWidth = $('#'+properties.dialogDivId).parent().parent().width() ;
//            var myWidth = $('#'+properties.dialogDivId).parent().width() ;
//            var unusedSpace = parentWidth - myWidth;
//            var position = unusedSpace /2 ;
//            $('#'+properties.dialogDivId).parent().offset({'left': position });


        },





        setRegionForDomain: function(emailAddress, currentPlan)
        {
            var emailAccounts = WCC.model.emailAccounts.get();
            if (emailAccounts == null)
            {

                setTimeout(function(){WCC.components.createAccount.setRegionForDomain(emailAddress, currentPlan)}, 100);
                return;
            }

            var emailAddressArray = emailAddress.split('@');
            var searchDomain = emailAddressArray[1];

            var domainMatch = false;
            var domainMatchCountryCode = false;
            for (var arrayIndex in emailAccounts )
            {
                if (searchDomain == emailAccounts[arrayIndex]['domain'])
                {
                    domainMatch = emailAccounts[arrayIndex]['pack_id'];
                    domainMatchCountryCode = emailAccounts[arrayIndex]['country_code'];
                    break;
                }
            }

            if (domainMatch == false)
            {
                return;
            }

            var emailPlanList = WCC.model.emailPlans.get();
            var currentPlanCountryCode = null;
            for (var arrayIndex in emailPlanList )
            {
                if (emailPlanList[arrayIndex]['pack_uid'] == currentPlan)
                {
                    currentPlanCountryCode = emailPlanList[arrayIndex]['country_code'];
                    break;
                }
            }

            if (currentPlanCountryCode == domainMatchCountryCode)
            {
                return true;
            }

            // otherwise, we need to change the plan...
            var availableEmailPlans = WCC.model.availableEmailPlans.get();
            var newPlan = null;
            for (var arrayIndex in availableEmailPlans )
            {
                if (availableEmailPlans[arrayIndex]['country_code'] == domainMatchCountryCode)
                {
                    newPlan = availableEmailPlans[arrayIndex]['pack_uid'];
                    break;
                }
            }

            if (newPlan == null)
            {
                return;
            }
            require("starfield/sf.droplist", function () {
               $("#createAccountEmailPlanList").sfDropList('selectItemByValue', {value: newPlan, forceRefresh: true});
            });


        },


        makeTheDroplist: function()
        {
            // deal with the special dropdown lists....
            require("starfield/sf.droplist", function () {


              while ($("#createAccountEmailPlanList").hasClass('sf-droplist') == false)
              {
                  var defaultThing = $('#componentCreateAccount #createAccountEmailPlanSelect').val();

                  require("starfield/sf.droplist", function() {
                      $("#createAccountEmailPlanList").sfDropList
                      ({
                          ensureTopZIndex: true,
                          width: 463,
                          listHeight: 200,
                          valueChangeElement: '#createAccountEmailPlanSelect',
                          onOpen: function(){WCC.components.createAccount.hideExtraMenuStuff();return true;},
                          onClose: function(){WCC.components.createAccount.showExtraMenuStuff();return true;},
                          onValueChanged: function(){setTimeout(function(){WCC.components.createAccount.handleQuotaForEmailPlanSwitch()}, 1);}
                      });
              	  });

                    $("#createAccountCalPlanList").sfDropList
                    ({
                        ensureTopZIndex: true,
                        width: 463,
                        listHeight: 200,
                        valueChangeElement: '#createAccountSelectCalPlan',
                        onOpen: function(){WCC.components.createAccount.hideExtraMenuStuff();return true;},
                        onClose: function(){WCC.components.createAccount.showExtraMenuStuff();return true;},
                        onValueChanged: function(){setTimeout(function(){WCC.components.createAccount.handleCalPlanSwitch()}, 1);}
                    });

                    $("#createAccountOffPlanList").sfDropList
                    ({
                        ensureTopZIndex: true,
                        width: 463,
                        listHeight: 200,
                        valueChangeElement: '#createAccountSelectOffPlan',
                        onOpen: function(){WCC.components.createAccount.hideExtraMenuStuff();return true;},
                        onClose: function(){WCC.components.createAccount.showExtraMenuStuff();return true;},
                        onValueChanged: function(){setTimeout(function(){WCC.components.createAccount.handleOffPlanSwitch()}, 1);}
                    });

                    // GOOGLE ANALYTICS stuff
                    $('#componentCreateAccount #emailTab .sf-droplist-select').click(
                        function(){ WCC.components.analytics.trackEvent('wcc-create-email', 'select-plan', 'dropdown', 0, '');}
                    );

                    $('#componentCreateAccount #calendarTab .sf-droplist-select').click(
                        function(){ WCC.components.analytics.trackEvent('wcc-create-calendar', 'select-plan', 'dropdown', 0, '');}
                    );

                    $('#componentCreateAccount #filesTab .sf-droplist-select').click(
                        function(){ WCC.components.analytics.trackEvent('wcc-create-files', 'select-plan', 'dropdown', 0, '');}
                    );

              }

              if (defaultPlan != 'freeCredit' && defaultThing == '' && $('#componentCreateAccount #createAccountEmailPlanSelect').val() == 'freeCredit')
              {
                   $('#componentCreateAccount #createAccountEmailPlanSelect').val('');
              }

              if (defaultPlan == 'freeCredit')
              {
                   $('#componentCreateAccount #createAccountEmailPlanSelect').val('freeCredit');
              }

              WCC.components.createAccount.orientDialog();
              WCC.components.createAccount.handleQuotaForEmailPlanSwitch();

            });
        },


        destroyTheDroplist: function()
        {
             $("#createAccountEmailPlanList").remove();
             $("#createAccountCalPlanList").remove();
             $("#createAccountOffPlanList").remove();
        },


        attachValidation: function()
        {
            //attach the frickin password validator
            require("starfield/sf.validator", function () {WCC.components.createAccount.doTheAttach();});
        },

        doTheAttach: function()
        {
            $.fn.sfValidator.rules.checkLength.msg = function(c,g){return BRAVO.Translate._("WCC_Main_passValidateCheckLength");};
            $.fn.sfValidator.rules.startLetter.msg = function(c,g){return BRAVO.Translate._("WCC_Main_passValidateStartLetter");};
            $.fn.sfValidator.rules.isEmail.msg = function(c,g){return BRAVO.Translate._("WCC_Main_sfValidEmail");};
            $.fn.sfValidator.rules.isEmail.test = function (a,b){
            	b=WCC.utils.asciiAddress(b);
            	return/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9\u0000-\uFFFF]+\.)+[a-zA-Z\-\u0000-\uFFFF]{2,}))$/.test(b);
			};

            // validate password
            $("#createAccountPassword1").sfValidator({
                    title: BRAVO.Translate._("WCC_MAIN_passwordCriteria"),
                    minLength: 5, maxLength: 32,
	            	inputExp: /[^\sa-zA-z0-9\!\@\#\$\%\^\&\*\(\)\-\=\_\+\[\]\{\}\;\:\'\"\,\<\.\>\/\?].*?/gi,
                    rules: [
                            $.fn.sfValidator.rules.checkLength //,
                            //$.fn.sfValidator.rules.startLetter
                    ],
                    onTest: function(instance, settings, success, failed_rule){
                        if (success == true)
                        {
                            passwordCurrentlyValid = true;
                        }
                        else
                        {
                            passwordCurrentlyValid = false;
                        }
                    }
            });

            // validate emaul address
            $("#createAccountEmailAddress").sfValidator({
            	title: BRAVO.Translate._("WCC_Main_emailAddress")+":",
            	//inputExp: /[^\sa-zA-z0-9\@\#\-\=\_\+\.].*?/gi,
            	inputExp: /[^\sa-zA-z0-9\@\#\-\=\_\+\.\u0000-\uFFFF].*?/gi,
                rules: [
                    $.fn.sfValidator.rules.isEmail
                ]

            });

            validationAttached = true;
        },

        unbindEvents: function()
        {
            $(document).unbind('.createAccount');
        },

        /**
         * Close!
         */
        closeDialog: function()
        {
            currentlyOpen = false;

            WCC.utils.detatchToolTip();
            WCC.components.createAccount.hideAllInfo();
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
            WCC.components.createAccount.unbindEvents();
            WCC.components.createAccount.destroyTheDroplist();
            WCC.components.createAccount.clearDefaultPlan();
        },


        /**
         * Move the dialog to the right place
         */
        orientDialog: function()
        {
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );

            // fix for ie 9
            var newLeft  =  ($(document).width() - 548) / 2;
            $('#componentServerSettingDiv').parent().css('left', newLeft + 'px');

            WCC.utils.centerThisDialog(properties.dialogDivId);
            //WCC.components.createAccount.repositionAllInfo();
        },


        /**
         * Expand
         */
        handleAutoReplyClick: function()
        {
            if ($('#createAccountEnableAutoReply').is(':checked') && $('#autoReplyToggler').hasClass('show-button') )
            {
                $("#autoReplyToggler").addClass('hide-button');
                $("#autoReplyToggler").removeClass('show-button');
                $("#createAccountAutoReplyContainer").slideToggle("slow");
                WCC.components.createAccount.orientDialog();
            }
        },


        /**
         * Expand or contract the account trial on click...
         */
        handleTrialUpgradeClick: function()
        {
            $('#createAccountTrialArea').slideToggle("slow", function(){

                if ($('#createAccountTrialUpgradeOk').is(':checked') && $('#createAccountOffAddress').val() != '' )
                {
                    $("#saveButton").attr('disabled', 'disabled');
                    WCC.components.createAccount.doOffTrialValidation();
                }
                else
                {

                    $("#saveButton").attr('disabled', null);
                    $('#createAccountTrialUpgradeVerification').html('');
                }
            });
        },


        /**
         * Off trial validator...
         * You can do this asynchronous / sync...
         *
         * We do sync during pre-submission validation
         *
         */
        doOffTrialValidation: function(doForSubmit)
        {
            var offTrialSubmitObj = {};
            offTrialSubmitObj.offUser = $('#createAccountOffAddress').val();
            offTrialSubmitObj.offPassword = $('#createOffPassword1').val();
            offTrialSubmitObj.postToken = Globals.POST_TOKEN;

            var that = this;

            if (doForSubmit == true)
            {
                $.ajax({
                    type: "POST",
                    url: 'ajaxfiles/validateaccount/',
                    dataType : 'json',
                    data: offTrialSubmitObj,
                    success : that.submit,
                    error :  handleError
                });
            }
            else
            {
                 $.ajax({
                    type: "POST",
                    url: 'ajaxfiles/validateaccount/',
                    dataType : 'json',
                    data: offTrialSubmitObj,
                    success : validateOffSuccess,
                    error :  handleError
                });
            }
        },


        /**
         * Handle the products
         */
        handleProducts: function(clickedThing)
        {
            if($(clickedThing).attr('name'))
            {
            	clickedThing = $(clickedThing).attr('name');
            }

            if (clickedThing == undefined)
            {
                var clickedThing = 'all';
            }

        	//quick and dirty, but this is ripe for turning into a function to avoid the copy/paste BS
            if ($("#createAccountIncludeEmail").prop('checked')==false) {
                    require("starfield/sf.msg.overlay", function ()
                    {
                        if(WCC.model.emailPlans.get() !== undefined && WCC.model.emailPlans.get().length==0)
                        {
                            if (WCC.components.muiPod.hasFreeAccounts() == true)
                            {
                                var accountMessage = '<p> ' + BRAVO.Translate._("WCC_MAIN_youHaveNotSetupYourFreeAccount") + ' <a href="#" onclick="WCC.components.muiPod.openMuiDialogFromCreate(); return false">' + BRAVO.Translate._("WCC_MAIN_setupNow") + '</a></p>';
                                accountMessage += "<p style='font-weight: normal'>" + BRAVO.Translate._("WCC_MAIN_noOwnedEmailPlan") + ' <a id="buyOnlineStorageLink" href="/productpurchase?product=email" onclick="WCC.components.analytics.trackEvent(\'wcc-create-email\', \'buy-email-plan\', \'link\', 0, \'\'); return true" target="_blank" >' + BRAVO.Translate._("WCC_MAIN_buyOneNow") + '</a></p>';

                                $("#emailTab").sfMsgOverlay({message: accountMessage, style:null});
                            }
                            else
                            {
                                $("#emailTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noOwnedEmailPlan") + ' <a id="buyOnlineStorageLink" href="/productpurchase?product=email" onclick="WCC.components.analytics.trackEvent(\'wcc-create-email\', \'buy-email-plan\', \'link\', 0, \'\'); return true" target="_blank" >' + BRAVO.Translate._("WCC_MAIN_buyOneNow") + '</a>', style:null});

                            }

                            $('.sf-msg-overlay').css('z-index', 100005);
                            $('.sf-msg-overlay').css('margin-left', '5%');
                            $('.sf-msg-overlay').css('margin-right', '5%');
                            $('.sf-msg-overlay').css('top', '35%');
                            if (WCC.utils.isIE() )
                            {
                                $("#emailTab").find('.sf-msg-overlay').click(function(){window.open('/productpurchase?product=email', '_blank');return false});
                            }
                        } else if(WCC.model.availableEmailPlans.get().length==0) {
                                // var accountMessage = '<p> ' + BRAVO.Translate._("WCC_MAIN_youHaveNotSetupYourFreeAccount") + ' <a href="#" onclick="WCC.components.muiPod.openMuiDialogFromCreate(); return false">' + BRAVO.Translate._("WCC_MAIN_setupNow") + '</a></p>';
                                var accountMessage = "<p style='font-weight: normal'>" + BRAVO.Translate._("WCC_MAIN_noOwnedEmailPlan") + ' <a id="buyOnlineStorageLink" href="/productpurchase?product=email" target="_blank" >' + BRAVO.Translate._("WCC_MAIN_buyOneNow") + '</a></p>';

                                $("#emailTab").sfMsgOverlay({message: accountMessage, style:null});
                            if (WCC.utils.isIE() )
                            {
                                $("#emailTab").find('.sf-msg-overlay').click(function(){WCC.components.analytics.trackEvent('wcc-create-email', 'buy-email-plan', 'link', 0, ''); window.open('/productpurchase?product=email', '_blank');return false});
                            }
                        } else {
                            $("#emailTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_haveNotAddedEmail") + ' <a  href="#" onclick=\'WCC.components.analytics.trackEvent("wcc-create-email", "select-email", "link", 0, ""); $("#createAccountIncludeEmail").prop("checked",true); $(document).trigger("handleProducts"); $("#createAccountPopinTabs").tabs("select","emailTab"); \'>'+ BRAVO.Translate._("WCC_MAIN_addNow") + '</a>', style:null});
                            $('.sf-msg-overlay').css('z-index', 100005);
                            $('.sf-msg-overlay').css('margin-left', '5%');
                            $('.sf-msg-overlay').css('margin-right', '5%');
                            $('.sf-msg-overlay').css('top', '35%');
                        }
                    });
            } else {
                require("starfield/sf.msg.overlay", function () {
                    if(WCC.model.emailPlans.get() !== undefined && WCC.model.emailPlans.get().length==0) {
                        $("#emailTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noOwnedEmailPlan") + ' <a id="buyOnlineStorageLink" href="/productpurchase?product=email" onclick="WCC.components.analytics.trackEvent(\'wcc-create-email\', \'buy-email-plan\', \'link\', 0, \'\'); return true" target="_blank" >' + BRAVO.Translate._("WCC_MAIN_buyOneNow") + '</a>', style:null});
                        $('.sf-msg-overlay').css('z-index', 100005);
                        $('.sf-msg-overlay').css('margin-left', '5%');
                        $('.sf-msg-overlay').css('margin-right', '5%');
                        $('.sf-msg-overlay').css('top', '35%');

                        if (WCC.utils.isIE() )
                        {
                            $("#emailTab").find('.sf-msg-overlay').click(function(){WCC.components.analytics.trackEvent('wcc-create-email', 'buy-email-plan', 'link', 0, ''); window.open('/productpurchase?product=email', '_blank');return false});
                        }
                    } else if (WCC.model.availableEmailPlans.get().length ==0)
                    {

                        $("#createAccountIncludeEmail").removeAttr("checked");
                        $("#emailTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noMoreEmailAccounts") + '<br/>' + BRAVO.Translate._("WCC_MAIN_pleaseBuyMoreEmail"), style:null});
                        $('.sf-msg-overlay').css('z-index', 100005);
                        $('.sf-msg-overlay').css('margin-left', '5%');
                        $('.sf-msg-overlay').css('margin-right', '5%');
                        $('.sf-msg-overlay').css('top', '35%');
                        if (WCC.utils.isIE() )
                        {
                            $("#emailTab").find('.sf-msg-overlay').click(function(){WCC.components.analytics.trackEvent('wcc-create-email', 'buy-email-plan', 'link', 0, ''); window.open('/productpurchase?product=email', '_blank');return false});
                        }
                    } else {
                        $("#emailTab").sfMsgOverlay({message: null});
                        $('.sf-msg-overlay').css('z-index', 100005);
                        $('.sf-msg-overlay').css('margin-left', '5%');
                        $('.sf-msg-overlay').css('margin-right', '5%');
                        $('.sf-msg-overlay').css('top', '35%');
                    }
                 });
            }

            if ($("#createAccountIncludeCalendar").prop('checked')==false) {
                require("starfield/sf.msg.overlay", function () {
                    if(WCC.model.calPlans.get() !== undefined && WCC.model.calPlans.get().length == 0)
                    {
                        $("#calendarTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_dontOwnCalendarAccounts") + ' <a id="buyCalendarLink" onclick="WCC.components.analytics.trackEvent(\'wcc-create-calendar\', \'buy-calendar-plan\', \'link\', 0, \'\'); return true" href="/productpurchase?product=calendar" target="_blank">' + BRAVO.Translate._("WCC_MAIN_buyOneNow") +'</a>', style:null});
                        $('.sf-msg-overlay').css('z-index', 100005);
                        $('.sf-msg-overlay').css('margin-left', '5%');
                        $('.sf-msg-overlay').css('margin-right', '5%');
                        $('.sf-msg-overlay').css('top', '35%');
                        if (WCC.utils.isIE() )
                        {
                             $("#calendarTab").find('.sf-msg-overlay').click(function(){WCC.components.analytics.trackEvent('wcc-create-calendar', 'buy-calendar-plan', 'link', 0, ''); window.open('/productpurchase?product=calendar', '_blank');return false});
                        }

                    }
                    else
                    {
                        $("#calendarTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_haveNotAddedCalendar") + ' <a  href="#" onclick=\'WCC.components.analytics.trackEvent("wcc-create-calendar", "select-calendar", "link", 0, ""); $("#createAccountIncludeCalendar").prop("checked",true);  $(document).trigger("handleProducts"); $("#createAccountPopinTabs").tabs("select","calendarTab");\'>' + BRAVO.Translate._("WCC_MAIN_addNow") + '</a>', style:null});
                        $('.sf-msg-overlay').css('z-index', 100005);
                        $('.sf-msg-overlay').css('margin-left', '5%');
                        $('.sf-msg-overlay').css('margin-right', '5%');
                        $('.sf-msg-overlay').css('top', '35%');
                    }
                });
            } else {
                require("starfield/sf.msg.overlay", function () {
                    if (WCC.model.calPlans.get()!== undefined && WCC.model.calPlans.get().length == 0) {
                        $("#calendarTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_dontOwnCalendarAccounts") + '<br/><a id="buyCalendarLink" href="/productpurchase?product=calendar" target="_blank" >' + BRAVO.Translate._("WCC_MAIN_buyOneNow") + '</a>', style:null});
                        $('.sf-msg-overlay').css('z-index', 100005);
                        $('.sf-msg-overlay').css('margin-left', '5%');
                        $('.sf-msg-overlay').css('margin-right', '5%');
                        $('.sf-msg-overlay').css('top', '35%');
                        if (WCC.utils.isIE() )
                        {
                            $("#calendarTab").find('.sf-msg-overlay').click(function(){WCC.components.analytics.trackEvent('wcc-create-calendar', 'buy-calendar-plan', 'link', 0, ''); window.open('/productpurchase?product=calendar', '_blank');return false});
                        }
                    } else if (WCC.model.availableCalPlans.get().length == 0) {
                        $("#calendarTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noMoreCalendarAccounts") + '<br/><a id="buyCalendarLink" onclick="WCC.components.analytics.trackEvent(\'wcc-create-calendar\', \'buy-calendar-plan\', \'link\', 0, \'\'); return true" href="/productpurchase?product=calendar" target="_blank" >' + BRAVO.Translate._("WCC_MAIN_buyMore") + '</a>', style:null});
                        $('.sf-msg-overlay').css('z-index', 100005);
                        $('.sf-msg-overlay').css('margin-left', '5%');
                        $('.sf-msg-overlay').css('margin-right', '5%');
                        $('.sf-msg-overlay').css('top', '35%');
                        if (WCC.utils.isIE() )
                        {
                            $("#calendarTab").find('.sf-msg-overlay').click(function(){WCC.components.analytics.trackEvent('wcc-create-calendar', 'buy-calendar-plan', 'link', 0, ''); window.open('/productpurchase?product=calendar', '_blank');return false});
                        }
                    } else {
                        $("#calendarTab").sfMsgOverlay({message: null});
                    }
                });
            }

            if ($("#createAccountIncludeFiles").prop('checked')==false) {
                require("starfield/sf.msg.overlay", function () {
                    if (WCC.model.offPlans.get()!== undefined && WCC.model.offPlans.get().length==0) {
                        $("#filesTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noOnlineStorageOwned") + ' <a id="buyOnlineStorageLink" onclick="WCC.components.analytics.trackEvent(\'wcc-create-files\', \'buy-files-plan\', \'link\', 0, \'\'); return true" href="/productpurchase?product=off" target="_blank" >' + BRAVO.Translate._("WCC_MAIN_buyOneNow") + '</a>', style:null});
                        $('.sf-msg-overlay').css('z-index', 100005);
                        $('.sf-msg-overlay').css('margin-left', '5%');
                        $('.sf-msg-overlay').css('margin-right', '5%');
                        $('.sf-msg-overlay').css('top', '35%');
                        if (WCC.utils.isIE() )
                        {
                            $("#filesTab").find('.sf-msg-overlay').click(function(){WCC.components.analytics.trackEvent('wcc-create-files', 'buy-files-plan', 'link', 0, ''); window.open('/productpurchase?product=off', '_blank');return false});
                        }
                    }
                    else
                    {
                        $("#filesTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_haveNotAddedOnlineStorage")+ ' <a href="#" onclick=\'WCC.components.analytics.trackEvent("wcc-create-files", "select-files", "link", 0, ""); $("#createAccountIncludeFiles").prop("checked",true); $(document).trigger("handleProducts"); $("#createAccountPopinTabs").tabs("select","filesTab");\'>' + BRAVO.Translate._("WCC_MAIN_addNow") + '</a>', style:null});
                        $('.sf-msg-overlay').css('z-index', 100005);
                        $('.sf-msg-overlay').css('margin-left', '5%');
                        $('.sf-msg-overlay').css('margin-right', '5%');
                        $('.sf-msg-overlay').css('top', '35%');
                    }
                });
            } else {
                require("starfield/sf.msg.overlay", function () {
                    if (WCC.model.offPlans.get()!== undefined && WCC.model.offPlans.get().length==0) {
                        $("#filesTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noOnlineStorageOwned") + ' <a id="buyOnlineStorageLink" onclick="WCC.components.analytics.trackEvent(\'wcc-create-files\', \'buy-files-plan\', \'link\', 0, \'\'); return true" href="/productpurchase?product=off" target="_blank" >' + BRAVO.Translate._("WCC_MAIN_buyOneNow") + '</a>', style:null});
                        $('.sf-msg-overlay').css('z-index', 100005);
                        $('.sf-msg-overlay').css('margin-left', '5%');
                        $('.sf-msg-overlay').css('margin-right', '5%');
                        $('.sf-msg-overlay').css('top', '35%');
                        if (WCC.utils.isIE() )
                        {
                            $("#filesTab").find('.sf-msg-overlay').click(function(){WCC.components.analytics.trackEvent('wcc-create-files', 'buy-files-plan', 'link', 0, ''); window.open('/productpurchase?product=off', '_blank');return false});
                        }
                         WCC.components.createAccount.closeOffInfo();
                    } else if (WCC.model.availableOffPlans.get().length == 0) {

                        $('#createAccountIncludeFiles').attr('checked', false);
                         WCC.components.createAccount.closeOffInfo();
                        $("#filesTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noMoreOnlineStorageAccounts") + '<br/>'+ BRAVO.Translate._("WCC_MAIN_pleaseBuyMoreOnlineStorage"), style:null});
                        $('.sf-msg-overlay').css('z-index', 100005);
                        $('.sf-msg-overlay').css('margin-left', '5%');
                        $('.sf-msg-overlay').css('margin-right', '5%');
                        $('.sf-msg-overlay').css('top', '35%');
                        if (WCC.utils.isIE() )
                        {
                            $("#filesTab").find('.sf-msg-overlay').click(function(){WCC.components.analytics.trackEvent('wcc-create-files', 'buy-files-plan', 'link', 0, ''); window.open('/productpurchase?product=off', '_blank');return false});
                        }
                         if ($(".additional-options-hider").css('display') == "none")
                        {
                            WCC.components.createAccount.toggleAdditionalOptions();

                        }

                    } else {
                        $("#filesTab").sfMsgOverlay({message: null});
                    }
                });
            }

            // deal with tab select
            if(clickedThing == 'all' || clickedThing == 'createAccountIncludeEmail' )
            {
            	$("#createAccountPopinTabs").tabs('select','emailTab');
            }
            else if (clickedThing == 'createAccountIncludeCalendar')
            {
            	$("#createAccountPopinTabs").tabs('select','calendarTab');
            }
            else if (clickedThing == 'createAccountIncludeFiles')
            {
            	$("#createAccountPopinTabs").tabs('select','filesTab');
            }

            setTimeout(function(){WCC.components.createAccount.handleProductInfoOnClick(clickedThing)}, 1);
        },


        handleProductInfoOnClick: function(clickedThing)
        {
            if ($('#componentCreateAccount').length == 0)
            {
                return;
            }

            // now handle the additional info
            if (clickedThing == 'createAccountIncludeEmail' || clickedThing == 'all' )
            {
                if ($("#createAccountIncludeEmail").prop('checked') == true)
                {
                    WCC.components.createAccount.openEmailInfo();
                }
                else
                {
                    WCC.components.createAccount.closeEmailInfo();
                }
            }

            if (clickedThing == 'createAccountIncludeCalendar' )
            {
                if ($("#createAccountIncludeCalendar").prop('checked') == true)
                {
                    WCC.components.createAccount.openCalInfo();
                }
                else
                {
                    WCC.components.createAccount.closeCalInfo();
                }
            }

            if (clickedThing == 'createAccountIncludeFiles' )
            {
                if ($("#createAccountIncludeFiles").prop('checked') == true  )
                {
                    WCC.components.createAccount.openOffInfo();
                }
                else
                {
                    WCC.components.createAccount.closeOffInfo();
                }
            }
        },


        /**
         * Toggle for additional stuff
         */
        toggleAdditionalOptions: function(toggleSpeed)
        {
            require("starfield/sf.droplist", function () {
                $("#createAccountEmailPlanList").sfDropList('close');
                if (toggleSpeed == undefined)
                {
                    toggleSpeed = "slow";
                }

                $(".additional-options-hider").slideToggle({
                    duration: toggleSpeed,
                    complete: function()
                    {
                        WCC.components.createAccount.handleToggleVisibility();
                        WCC.components.createAccount.orientDialog();
                    }
                 });
            });


        },


        handleToggleVisibility: function()
        {
            if ($(".additional-options-hider").css('display') == "none")
            {
                // it is hidden
                $('#advancedToggler').text(BRAVO.Translate._("WCC_MAIN_showAdditionalOptions"));
                $("#advancedToggler").addClass('show-button');
                $("#advancedToggler").removeClass('hide-button');
                //WCC.userSettings.set('createAccountAdditionalOptionsVisible', "false");
                $('#createAccountSetPin').css('display', 'none');
            }
            else
            {
                //it is showing
                $('#advancedToggler').text(BRAVO.Translate._("WCC_MAIN_hideAdditionalOptions"));
                $("#advancedToggler").removeClass('show-button');
                $("#advancedToggler").addClass('hide-button');
                $('#createAccountSetPin').css('display', 'inline-block');
                //WCC.userSettings.set('createAccountAdditionalOptionsVisible', "true");
            }

            WCC.components.createAccount.handlePinstate();
        },



        /**
         * get the toggle status
         */
        getAdvancedToggleStatus: function()
        {
            return advancedToggleStatus;
        },


        /**
         * Open or close the auto reply
         */
        toggleAutoReply: function()
        {
            $("#createAccountAutoReplyContainer").slideToggle("slow");
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );

            if ($("#autoReplyToggler").hasClass('show-button')) {
            	$("#autoReplyToggler").addClass('hide-button');
            	$("#autoReplyToggler").removeClass('show-button');
            } else {
            	$("#autoReplyToggler").removeClass('hide-button');
            	$("#autoReplyToggler").addClass('show-button');
            }
            WCC.utils.centerThisDialog(properties.dialogDivId)
            return false; //Prevent the browser jump to the link anchor
        },


        /**
         * Pin the additional options open
         * ... or closed. Or whatever.
         */
        setPin: function()
        {
            // get the current state of this thing...
            var pinState = WCC.userSettings.get('createAccountAdditionalOptionsVisible');
            if (pinState == "true" || pinState == true)
            {
                WCC.userSettings.set('createAccountAdditionalOptionsVisible', "false");
            }
            else
            {
                 WCC.userSettings.set('createAccountAdditionalOptionsVisible', "true");
            }

            var pinLink = $('#createAccountSetPin');
            if (pinLink.hasClass('pin-this-button'))
            {
                pinLink.removeClass('pin-this-button');
                pinLink.addClass('pinned-this-button');
            }
            else
            {
                pinLink.addClass('pin-this-button');
                pinLink.removeClass('pinned-this-button');
            }

            WCC.components.createAccount.handlePinstate();


        },


        /**
         * Get plans by UID
         */
        getEmailPlanByPackUid: function(packUid)
        {
            var planObj = WCC.cache.searchByField(WCC.model.availableEmailPlans.get(),'pack_uid', packUid);
            return planObj[0];
        },
        getCalPlanByAccountUid: function(accountUid)
        {
            var planObj = WCC.cache.searchByField(WCC.model.availableCalPlans.get(),'accountUid', accountUid);
            return planObj[0];
        },
        getOffPlanByAccountUid: function (accountUid)
        {
            var planObj = WCC.cache.searchByField(WCC.model.availableOffPlans.get(),'accountUid', accountUid);
            return planObj[0];
        },


        returnDefaultTab: function()
        {
            return defaultTab;
        },


        clearDefaultPlan: function()
        {
            defaultPlan = null;
        },

        returnDefaultPlan: function()
        {
            if (defaultTab == 0)
            {
                return this.returnDefaultEmailPlan();
            }

            if (defaultTab == 1)
            {
                return this.returnDefaultCalPlan();
            }

            if (defaultTab == 2)
            {
                return this.returnDefaultOffPlan();
            }

            return null;
        },

        returnDefaultEmailPlan: function()
        {
            var emailPlans = WCC.model.availableEmailPlans.get();
            if (emailPlans.length == 0)
            {
                return false;
            }

            if (defaultPlan != undefined)
            {
                for (var arrayIndex in emailPlans )
                {
                    if (emailPlans[arrayIndex]['pack_id'] == defaultPlan)
                    {
                        return emailPlans[arrayIndex]['pack_uid'];
                    }
                    if (emailPlans[arrayIndex]['pack_uid'] == defaultPlan)
                    {
                        return emailPlans[arrayIndex]['pack_uid'];
                    }
                }

            }

            return emailPlans[0];
        },

        returnDefaultCalPlan: function()
        {

            var calPlans = WCC.model.availableCalPlans.get();
            if (calPlans.length == 0)
            {
                return false;
            }
            if (defaultPlan != undefined)
            {
                for (var arrayIndex in calPlans )
                {
                    if (calPlans[arrayIndex]['accountUid'] == defaultPlan)
                    {
                        return calPlans[arrayIndex]['accountUid'];
                    }
                }

            }

            return calPlans[0];
        },

        returnDefaultOffPlan: function()
        {
            var offPlans = WCC.model.availableOffPlans.get();
            if (offPlans.length == 0)
            {
                return false;
            }
            return offPlans[0];
        },


        /**
         * Password validation
         */
        checkPassword: function()
        {
            var passValidate = WCC.utils.validatePassword($('#createAccountPassword1').val() , $('#createAccountPassword2').val() );
            if (passValidate == true)
            {
                $('#createAccountPasswordOK').html('<span class="ok-icon"></span>');
                $('#createAccountPassword1Label1').removeClass('attention');
                $('#createAccountPassword1Label2').removeClass('attention');
            }
            else
            {
                $('#createAccountPasswordOK').html('<span class="notok-icon"></span> ' + passValidate);

            }
        },




        /**
         * handle the autoReply 'from' display attributes and values
         */
        handleAutoReplyFromDisplay: function (altEvent)
        {
        	//focus
        	var target = "#" + altEvent.target.id;
        	var cSIE = $("#createAccountAutoReplySourceChoiceOther");
        	var field = $("#createAccountAutoReplySourceEmail");
        	//set the text class
        	if (cSIE.prop("checked")) {
        		field.removeClass("exampleText")
        			.removeAttr("disabled");
        	} else {
        		field.addClass("exampleText")
        			.attr("disabled", "disabled");
        	}
        },


        /**
         * handle the autoReply 'subject' display attributes and values
         */
        handleAutoReplySubjectDisplay: function (altEvent)
        {
        	//focus
        	var target = "#" + altEvent.target.id;
        	var cARS = $("#createAccountAutoReplySubjectChoiceOtherSubject");
        	var field = $("#createAccountAutoReplySubject");
        	//set the text class
        	if (cARS.prop("checked")) {
        		field.removeClass("exampleText")
        			.removeAttr("disabled");
        	} else {
        		field.addClass("exampleText")
        			.attr("disabled", "disabled");
        	}
        },


        /**
         * handle the send setup instructions display attributes and values
         */
        handleSendInstructionsDisplay: function (altEvent)
        {
        	//focus
        	var exampleText= "e.g., email@domain.com, email2@domain.com, etc.";
        	var cSIE = $("#createSetupInstructionEmail");
        	if(altEvent && altEvent.type && altEvent.type=="focus" && cSIE.val() == exampleText) {
        		cSIE.val("");
        	}
        	//blur
        	if(altEvent && altEvent.type && altEvent.type=="blur" && cSIE.val() == "") {
        		cSIE.val(exampleText);
        	}

        	//set the text class
        	if (cSIE.val() == exampleText) {
        		cSIE.addClass("exampleText");
        	} else {
        		cSIE.removeClass("exampleText");
        	}
        },


        /**
         * What should happen when the user switched the calendar plan
         */
        handleCalPlanSwitch : function ()
        {
            var planId = $('#createAccountSelectCalPlan').val();

            var planObj = this.getCalPlanByAccountUid(planId);
            if (planObj)
            {
                var friendlyUsersStr = planObj['availableAccounts'];
                if (friendlyUsersStr == -1)
                {
                    friendlyUsersStr = BRAVO.Translate._("WCC_MAIN_UNLIMITED");
                }

                var planString = planObj['productName'] + ' (' + planObj['usedAccounts'] + '/' + friendlyUsersStr + ') - Exp: ' + date(WCC.format.date, planObj['calendarExpireTimestamp']);

                $('#createAccountCalPlanInfoText').html(planString);
                //$('#createAccountIncludeCalendar').attr('title', planString);
                //$('#createAccountIncludeCalendarLabel').attr('title', planString);
            }
        },


        /**
         * Handle the off plan switch
         */
        handleOffPlanSwitch : function()
        {
            var planId = $('#createAccountSelectOffPlan').val();
            var planObj = this.getOffPlanByAccountUid(planId);
            if (planObj)
            {
                var planString = (planObj['disk_space_mb']/1000) + ' GB - '+ BRAVO.Translate._("WCC_MAIN_exp") +': ' + date(WCC.format.date, planObj['offExpireTimestamp']);
                //$('#createAccountIncludeFiles').attr('title', planString);
                //$('#createAccountIncludeFilesLabel').attr('title', planString);

                $('#createAccountOffPlanInfoText').html(planString);
            }
        },


        /**
         * Handler for the email plan dropdown... switches the text next to the quota box
         *
         */
        handleQuotaForEmailPlanSwitch: function()
        {
            var planVal = $('#componentCreateAccount #createAccountEmailPlanSelect').val();

            if (planVal == 'freeCredit')
            {
                if (returnTo == null)
                {
                    WCC.components.muiPod.openMuiDialogFromCreate();
                }
                else
                {
                    WCC.components.muiPod.openMuiDialogFromBulkCreate();
                }
                return;
            }
            else
            {
                var planObj = this.getEmailPlanByPackUid(planVal);
                if (planObj)
                {
                    if (planObj['unlimited_quota'] == true)
                    {
                        $('#componentCreateAccount #emailPlanQuotaAmount').html(BRAVO.Translate._("WCC_MAIN_unlimitedPlan"));
                        $('#componentCreateAccount #createAccountQuota').attr('disabled', 'disabled');
                        $('#componentCreateAccount #createAccountUseEmailQuota').attr('disabled', 'disabled');

                        $('#componentCreateAccount #createAccountQuota').hide();
                        $('#componentCreateAccount #createAccountUseEmailQuota').hide();
                    }
                    else
                    {
                        var availableQuotaMb = (planObj['max_size'] - planObj['used_quota'])/1024 + planObj['addl_disk_space_mb'];
                        var unusedAddresses = planObj['address_count'] - planObj['used_address_count'];
                        var avgSpace = Math.round(availableQuotaMb / unusedAddresses);
                        if(planObj['address_count']==-1)
                        {
                            $('#componentCreateAccount #createAccountQuota').val( 1 );
                        }
                        else
                        {
                            $('#componentCreateAccount #createAccountQuota').val( Math.abs(avgSpace) );
                        }

                        $('#componentCreateAccount #emailPlanQuotaAmount').html(Math.round(availableQuotaMb) + ' MB ' + BRAVO.Translate._("WCC_MAIN_available"));
                        $('#componentCreateAccount #createAccountQuota').removeAttr('disabled');
                        $('#componentCreateAccount #createAccountUseEmailQuota').removeAttr('disabled');
                        $('#componentCreateAccount #createAccountQuota').show();
                        $('#componentCreateAccount #createAccountUseEmailQuota').show();
                    }

                    if ($("#createAccountIncludeEmail").prop("checked") && planObj['isFree'])
                    {
                        $('#termsAcceptTermDisplay').show();
                    }
                    else
                    {
                        $('#termsAcceptTermDisplay').hide();
                    }

                    // change out the alt on the checkbox
                    var planString = WCC.utils.truncateAfterXChars(planObj['pack_name'], 55);
                    planString += ' (' + planObj['used_address_count'] + '/';
                    if (planObj['address_count'] == -1)
                    {
                        planString += ' ' + BRAVO.Translate._("WCC_MAIN_unlimited");
                    }
                    else
                    {
                        planString += planObj['address_count'];
                    }

                    planString += ') ';
                    if (planObj['isFree'] != true)
                    {
                        planString += BRAVO.Translate._("WCC_MAIN_exp") + ': ' + date(WCC.format.date, planObj['expire_date_timestamp']);
                    }

                    //$('#createAccountIncludeEmail').attr('title', planString);
                    //$('#createAccountIncludeEmailLabel').attr('title', planString);

                    $('#createAccountEmailPlanInfoText').html(planString);


                }
            }


        },




        /**
         * Make the checkbox appear next to the email address, assuming we're cool
         *
         */
        handleEmailEntryUpdate: function()
        {
            WCC.components.createAccount.attachValidation();

            var emailAddressVal = $('#createAccountEmailAddress').val();
            if (WCC.utils.checkValidEmailAddress(emailAddressVal) == true)
            {
                $('#createAccountAutoReplySourceDefaultChoiceValue').html(emailAddressVal);
            }


            // Don't do this any more
            //if (WCC.utils.checkValidEmailAddress(emailAddressVal, WCC.model.domains.get(), true ) == true)
            //{
            //    $('#createAccountEmailAddressOK').addClass("ok-icon");
            //    $('#createAccountEmailAddressOK').removeClass("notok-icon");
            //
            //}
            //else
            //{
            //    $('#createAccountEmailAddressOK').addClass("notok-icon");
            //    $('#createAccountEmailAddressOK').removeClass("ok-icon");
            //    $('#createAccountEmailAddress').removeClass('attention');
            //}
        },


        // handler to open specific tabs
        openEmailTab: function()
        {
            $("#createAccountPopinTabs").tabs('select',0);
            return true;
        },
        openCalTab: function()
        {
            $("#createAccountPopinTabs").tabs('select',1);
            return true;
        },
        openOffTab: function()
        {
            $("#createAccountPopinTabs").tabs('select',2);
            return true;
        },


        /**
         * Confirm the delete
         *
         */
        confirmDelete: function(tab, injectedValue) {

            if (WCC.cache.returnCheckedObjects().length == 0 && injectedValue == undefined )
            {
                WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_selectAnAccountTitle"), BRAVO.Translate._("WCC_MAIN_eMustChooseAccountToDelete"));
                return;
            }

            var titleMessage = BRAVO.Translate._("WCC_MAIN_confirmDeleteTitle");
            var confirmMessage = BRAVO.Translate._("WCC_MAIN_qDeleteAccounts");

            var selectedTab = tab;
            var okCallback = function(){
                WCC.spinKontrol.open('componentConfirmationDiv');
        		WCC.components.createAccount.deleteAccounts(selectedTab, injectedValue);
        		WCC.components.componentConfirmation.closeDialog();
        		WCC.utils.uncheckAllThePossibleBoxes();
            };
            var notOkCallback =  function(){WCC.components.componentConfirmation.closeDialog();};

            WCC.components.componentConfirmation.open(titleMessage, confirmMessage, okCallback, notOkCallback, null, null );

        },

        /**
         * Delete Error
         *
         */
        deleteError: function(data) {

            var titleMessage = BRAVO.Translate._("WCC_MAIN_deleteErrorTitle");
            var oMessage = BRAVO.Translate._("WCC_MAIN_eDeleteError")+"<br/>";
            var confirmMessage = oMessage;
            for (var m in data) {
            	if(confirmMessage == oMessage) {
            		confirmMessage = '';
            	}
                confirmMessage += data[m] + "<br/>";
            }

            var okCallback = function(){
        		WCC.components.componentConfirmation.closeDialog();
            };

            WCC.components.componentConfirmation.open(titleMessage, confirmMessage, okCallback, okCallback, null, null );

        },


        /**
         * Shut up, errors!
         *
         */
        clearErrors: function()
        {
            $('#createAccountPopinTabs').find('ul:first li a').css('color', 'black');

            $('#componentCreateAccountErrorDomain').html('');
            $('#componentCreateAccountErrorPassword').html('');
            $('#componentCreateAccountErrorPlan').html('');
            $('#componentCreateAccountErrorMisc').html('');
            $('#componentCreateAccountErrorOff').html('');

            $('#createAccountTrialUpgradeVerification').html('');
        },

        // handle that additonal info stuff
        attachPlanIndicators: function()
        {


            require("starfield/sf.context", function ()
            {

                var isSFContext = $("#createAccountEmailPlanInfo").is('.sf-context');

                $("#createAccountEmailPlanInfo").sfContext({
                    anchor: $('#createAccountIncludeEmail'),
                    positionIdeal: 'ul',
                    autoOpen: false,
                    width: 500,
                    closeOnBlur: false,
                    onOpen: function()
                    {
                        $('.sf-context-mode-tabs').height(25);
                        $('.sf-context-mode-tabs .sf-flyout-content').css('padding', '5px');
                    }
                    });



                  $("#createAccountCalPlanInfo").sfContext({
                    anchor: $('#createAccountIncludeCalendar'),
                    positionIdeal: 'ul',
                    autoOpen: false,
                    width: 410,
                    closeOnBlur: false,
                    onOpen: function()
                    {
                        $('.sf-context-mode-tabs').height(25);
                        $('.sf-context-mode-tabs .sf-flyout-content').css('padding', '5px');
                    }
                  });




                  $("#createAccountOffPlanInfo").sfContext({
                        anchor: $('#createAccountIncludeFiles'),
                        positionIdeal: 'ul',
                        autoOpen: false,
                        width: 305,
                        closeOnBlur: false,
                        onOpen: function()
                        {
                            $('.sf-context-mode-tabs').height(25);
                            $('.sf-context-mode-tabs .sf-flyout-content').css('padding', '5px');
                        }
                      });


                      anchorsAttached =true;

            });

            WCC.components.createAccount.orientDialog();
        },


        // utility function for the special dropdowns...
        hideExtraMenuStuff: function()
        {
            setTimeout(function(){$('.sf-droplist-extracontent').hide()}, 0);
            $('.sf-droplist-shortName').hide();
            $('.sf-droplist-longName').show();

            $('.sf-droplist-select').css('background-color', 'white');
        },

        // another utility function for the special dropdowns
        showExtraMenuStuff: function()
        {
            $('.sf-droplist-extracontent').show();
            $('.sf-droplist-shortName').show();
            $('.sf-droplist-longName').hide();
        },



        openEmailInfo: function()
        {
            if (WCC.model.availableEmailPlans.get().length == 0)
            {
                return;
            }

            if ($('div#createAccountEmailPlanInfo.sf-context').length == 0)
            {
                setTimeout(function(){WCC.components.createAccount.openEmailInfo()}, 100);
                return;
            }
            require("starfield/sf.context", function () {
                $("#createAccountEmailPlanInfo").sfContext('open');
            });
        },

        closeEmailInfo: function()
        {
            require("starfield/sf.context", function () {
                $("#createAccountEmailPlanInfo").sfContext('close');
            });
        },

        openCalInfo: function()
        {
            if (WCC.model.availableCalPlans.get().length == 0)
            {
                return;
            }
            if ($('div#createAccountCalPlanInfo.sf-context').length == 0)
            {
                setTimeout(function(){WCC.components.createAccount.openCalInfo()}, 100);
                return;
            }
            require("starfield/sf.context", function () {
                $("#createAccountCalPlanInfo").sfContext('open');
            });
        },

        closeCalInfo: function()
        {
            require("starfield/sf.context", function () {
                $("#createAccountCalPlanInfo").sfContext('close');
            });
        },

        openOffInfo: function()
        {
            if (WCC.model.availableOffPlans.get().length == 0)
            {
                return;
            }
            if ($('div#createAccountOffPlanInfo.sf-context').length == 0)
            {
                setTimeout(function(){WCC.components.createAccount.openOffInfo()}, 100);
                return;
            }
            require("starfield/sf.context", function () {
                $("#createAccountOffPlanInfo").sfContext('open');
            });
        },

        closeOffInfo: function()
        {
            require("starfield/sf.context", function () {
                $("#createAccountOffPlanInfo").sfContext('close');
            });
        },


        // kill 'em all... let G-d sort 'em out
        hideAllInfo: function()
        {
            WCC.components.createAccount.closeEmailInfo();
            WCC.components.createAccount.closeCalInfo();
            WCC.components.createAccount.closeOffInfo();

            require("starfield/sf.context", function () {
                $("#createAccountEmailPlanInfo").sfContext('destroy');
                $("#createAccountEmailPlanInfo").remove();

                $("#createAccountCalPlanInfo").sfContext('destroy');
                $("#createAccountCalPlanInfo").remove();

                $("#createAccountOffPlanInfo").sfContext('destroy');
                $("#createAccountOffPlanInfo").remove();

                $('.sf-droplist-drop').remove();
            });
        },


        repositionAllInfo: function()
        {
            if ($('#componentCreateAccount').length == 0)
            {
                return;
            }

            require("starfield/sf.context", function () {
                $("#createAccountEmailPlanInfo").sfContext('reposition');
                $("#createAccountCalPlanInfo").sfContext('reposition');
                $("#createAccountOffPlanInfo").sfContext('reposition');
            });



        },


        handleChangeEmailPlan: function()
        {
            WCC.components.createAccount.openEmailTab();
            this.dealWithThePlanChange();
        },

        handleChangeCalPlan: function()
        {
            WCC.components.createAccount.openCalTab();
            this.dealWithThePlanChange();
        },

        handleChangeOffPlan: function()
        {
            WCC.components.createAccount.openOffTab();
            this.dealWithThePlanChange();
        },

        dealWithThePlanChange: function()
        {
            if ($(".additional-options-hider").css('display') == "none")
            {
                WCC.components.createAccount.toggleAdditionalOptions();

            }
            $('.sf-droplist-select').css('background-color', '#FFFFCC');
        },


        /**
         * Change the color of the tab and select it.
         *
         */
        handleTabError: function(theTab)
        {
            var selectTab = 0;

            switch (theTab)
            {
                case 'email':
                    selectTab = 0;
                    break;
                case 'calendar':
                    selectTab = 1;
                    break;
                case 'off':
                    selectTab = 2;
                    break;
                default:
                    selectTab = 0;
            }

            // select the tab and then color it RED
            $("#createAccountPopinTabs").tabs('select',selectTab);
            $($('#createAccountPopinTabs').find('ul:first li a')[selectTab]).css('color', 'red');

            if ($(".additional-options-hider").css('display') == "none")
            {
                WCC.components.createAccount.toggleAdditionalOptions();

            }
        },


        showPassAccountVerify: function ()
        {
            $('#componentCreateAccountVerifyAccountArea').show();
            $('#componentCreateAccountPassword1').hide();
            $('#componentCreateAccountPassword2').hide();
        },

        hidePassAccountVerify: function ()
        {
            $('#componentCreateAccountVerifyAccountArea').hide();
            $('#componentCreateAccountPassword1').show();
            $('#componentCreateAccountPassword2').show();
        },



        handlePinstate: function()
        {
            var pinState = WCC.userSettings.get('createAccountAdditionalOptionsVisible');
            if (pinState == "true" || pinState == true)
            {
                $('#createAccountSetPin').attr('title', BRAVO.Translate._("WCC_MAIN_removeThePin"));
            }
            else
            {
                $('#createAccountSetPin').attr('title', BRAVO.Translate._("WCC_MAIN_pinThisOpenForMe"));
            }
        },


        /**
         * Delete some accounts
         *
         */
        deleteAccounts: function(tab, injectedValue) {
        	var that = this;
        	var checkedKey = {};
        	checkedKey.account = {};
        	for(var key in WCC.cache.returnCacheObject()) {
        		if(injectedValue && key!= injectedValue) {
        			continue;
        		}
        		var cacheItem = WCC.cache.getByKey(key);
        		if (injectedValue ||(cacheItem.checked && cacheItem.checked == true) ) {
                	account = {};
        			switch (tab) {
        			case 'all':
        				if(cacheItem.email_address_id) {
        					account['email']= {'email_address_id': cacheItem.email_address_id};
        				}
        				if (cacheItem.calUser) {
            				account['calendar'] = {'calUser': cacheItem.calUser};
        				}
        				if(cacheItem.offUser) {
            				account['off'] = {
	        					'emailAddress' : cacheItem.emailAddress,
	        					'accountUid' : cacheItem.accountUid,
	        					'offUser' : cacheItem.offUser
        					};
        				}
        				break;
        			case 'email':
        				account['email']= {'email_address_id': cacheItem.email_address_id};
        				break;
        			case 'cal':
        				account['calendar'] = {'calUser': cacheItem.calUser};
        				break;
        			case 'off':
        			case 'files':
        				account['off'] = {
        					'emailAddress' : cacheItem.emailAddress,
        					'accountUid' : cacheItem.accountUid,
        					'offUser' : cacheItem.offUser
    					};
        				break;

        			default:
        				return false;
        			}
        			checkedKey.account[key] = account.valueOf();

        		}
        	}

            // save for later...
            deleteKey = checkedKey;



            // delete that stuff


            checkedKey.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajax/deleteaccounts/',
                data: checkedKey,
                dataType : 'json',
                success :  function(data) {deletePlansSuccess.call(that, data);},
                error :  WCC.utils.handleError
            });
        }

    };


}());



/**
 * Bulk
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.bulkCreation = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentBulkCreationDiv';
    properties.template = '#componentBulkCreation';
    properties.title = BRAVO.Translate._("WCC_MAIN_createBulkTitle");

    var createEmailAddressArray = [];
    var pendingValidation = false;
    var domainArray = null;
    var submitObj = {};

    var defaultPlan = null;

    var renderHandler = function(){WCC.components.bulkCreation.renderDialog();};



    /**
     * AJAX create account success
     * @TODO - fix!
     *
     */
    var createAccountSuccess = function(data)
    {
    	if(data.error)
        {
            //WCC.components.bulkCreation.open();
            handleBulkError(data);
    	}
        else
        {
            $(document).unbind('.bulkCreate');
            WCC.components.bulkCreation.closeDialog();

            for (var key in submitObj.emailArray)
            {
                var completeEmailAddress = submitObj.emailArray[key] + '@' + submitObj.domain;
                var insertObj = {};
                insertObj.delivery_mode = 'local';
                insertObj.emailAddress = completeEmailAddress;
                insertObj.displayName = completeEmailAddress;
                insertObj.utf8 = WCC.utils.utf8Address( WCC.utils.asciiAddress(completeEmailAddress) );
                WCC.cache.cacheThing(completeEmailAddress, insertObj);
                WCC.cache.addAlert(completeEmailAddress, 'email', 'pendsetup');
            }

            $(document).trigger('infoRowRefresh');

            if (WCC.allAccounts)
            {
                // WCC.allAccounts.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.domains.reset();
                WCC.model.emailPlans.reset();
                WCC.model.offPlans.reset();
                WCC.model.relayData.reset();
                WCC.model.availableCalPlans.reset();
                WCC.model.availableEmailPlans.reset();
                WCC.model.availableOffPlans.reset();
            }
            if (WCC.email)
            {
                //WCC.email.getAllAccounts();
                WCC.model.emailPlans.reset();
                WCC.model.availableEmailPlans.reset();
            }
            if (WCC.calendar)
            {
                // WCC.calendar.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.availableCalPlans.reset();
            }
            if (WCC.off)
            {
                // WCC.off.getAllAccounts();
                WCC.model.offPlans.reset();
                WCC.model.availableOffPlans.reset();
            }

            var bulkCreationSuccess = BRAVO.Translate._("WCC_MAIN_bulkCreationSuccess");

            WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), bulkCreationSuccess);

            submitObj = {};
            createEmailAddressArray = [];
    	}

        return;
    };

    /**
     * Got an error back on the create request?  better display it
     */
    var handleBulkError = function (data) {
        WCC.spinKontrol.close();
        $("#bulkSaveButton").attr('disabled', null);

        WCC.components.bulkCreation.clearErrors();
    	for (var bulkError in data.error)
        {
            for (var singleError in data.error[bulkError])
            {
                switch (singleError)
                {
                    case 'mailbox':
                        $('#componentBulkCreationErrorMailbox').html(data.error[bulkError][singleError] + ' ');
                        break;
                    case 'password':
                        $('#componentBulkCreationErrorPassword').html(data.error[bulkError][singleError] + ' ');
                        break;
                    case 'plan':
                        $('#componentBulkCreationErrorPlan').html(data.error[bulkError][singleError] + ' ');
                        break;
                    case 'domain':
                        $('#componentBulkCreationErrorDomain').html(data.error[bulkError][singleError] + ' ');
                        break;
                    default:
                        $('#componentBulkCreationErrorMisc').html(data.error[bulkError][singleError] + ' ');
                }
            }
    	}

    };


    /**
     * AJAX create account fail
     * @TODO - finish this off!
     */
    var createAccountError = function(data)
    {
        konsole.log('create account error!');
    };

    var getPendingValidationSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true )
        {
        		pendingValidation = data.count;
                $(document).trigger('updatePendingValidationData');

        };
    };


    return{


        // UTILITY STUFF...
        //
        // retrieve plan data from the depths of the obj
        getEmailPlans: function()
        {
            var emailPlanArray = WCC.model.availableEmailPlans.get();
            if (emailPlanArray == null)
            {
                return [];
            }

            var outputArray = [];
            for (var k in emailPlanArray)
            {
                // only non-forward accounts
                if (emailPlanArray[k]['delivery_mode'] != 'forward')
                {
                    outputArray[outputArray.length] = emailPlanArray[k];
                }
            }

            if (outputArray.length==0)
            {
                var freeMessage = '';
                if (WCC.components.muiPod.hasFreeAccounts() == true)
                {
                    freeMessage = '<p style="padding-bottom: 15px;">' + BRAVO.Translate._("WCC_MAIN_youHaveNotSetupYourFreeAccount");
                    freeMessage += ' <a href="#" onclick="WCC.components.bulkCreation.closeDialog();WCC.components.bulkCreation.open( \'freeCredit\'); return false">';
                    freeMessage +=  BRAVO.Translate._("WCC_MAIN_setupNow") + '</a><br/></p>';
                }

                var theMessage = '<div style="position:relative;z-index:9998;"><span style="z-index:9999;">'+ freeMessage + BRAVO.Translate._("WCC_MAIN_noMoreEmailAccounts") + BRAVO.Translate._("WCC_MAIN_pleaseBuyMoreEmail") + '</span></div>'

                require("starfield/sf.msg.overlay", function () {
                    $("#bulkPanel").sfMsgOverlay({message: theMessage, style:null});
                	$('#bulkPanel .sf-msg-overlay').css('left','5%');

                    if (freeMessage != '')
                    {
                        setTimeout(function(){$('#componentBulkCreationDiv .sf-msg-overlay').css('margin-top','-100px').css('height', '60px');}, 100);
                    }
                });

                $('#pasteManyDiv').remove();
            }
            else
            {
                require("starfield/sf.msg.overlay", function () {
                    $("#bulkPanel").sfMsgOverlay({message: null});
                });
            }

            return outputArray;
        },


        /**
         * Return an email plan by the packUid
         *
         */
        getEmailPlanByPackUid: function(packUid)
        {
            var planObj = WCC.cache.searchByField(this.getEmailPlans(),'pack_uid', packUid);
            return planObj[0];
        },


        returnAvailableUsersForPlan: function()
        {
            var planObjArray = WCC.model.availableEmailPlans.get();
            var packUid = $('#createBulkAccountEmailPlanSelect').val();
            var availableUsers = 0;
            for (var k in planObjArray)
            {
                if (planObjArray[k]['pack_uid'] == packUid)
                {
                    availableUsers = planObjArray[k]['address_count'] - planObjArray[k]['used_address_count'];
                    if(planObjArray[k]['address_count']==-1) {
                    	availableUsers = planObjArray[k]['address_count'];
                    }
                }
            }

            return availableUsers;
        },


        /**
         * Return the createEmailAddressArray
         */
        returnAddAccountArray: function()
        {
            if (createEmailAddressArray == null)
            {
                return [];
            }

            return createEmailAddressArray;
        },


        /**
         * Add an account to the account array
         */
        addAccount: function(newAccount, bulkMode)
        {
            newAccount = jQuery.trim(newAccount);
            if (newAccount == '')
            {
                return false;
            }

            var newAccountArray = newAccount.split(",");

            if (newAccountArray.length + createEmailAddressArray.length > this.returnAvailableUsersForPlan() && this.returnAvailableUsersForPlan() != -1 )
            {
                this.showTooManyAccountsWarning(bulkMode);
                return;
            }

            var validateEmailPrefix = WCC.utils.validateEmailPrefix(newAccount);
            if (validateEmailPrefix == false)
            {
                if (bulkMode != true)
                {
                    $('#componentBulkCreationErrorEmailAddress').html(BRAVO.Translate._("WCC_MAIN_eInvalidEmailAddress"));
                }

                return false;
            }

            for (var k in newAccountArray)
            {
                var newThing =  jQuery.trim(newAccountArray[k]);
                if (jQuery.inArray(newThing, createEmailAddressArray) == -1 && newThing != '')
                {
                   createEmailAddressArray[createEmailAddressArray.length] = newThing;
                }
            }

            $('#createAccountEmailAddressEntry').val('');
            $('#componentBulkCreationErrorEmailAddress').html('');
            setTimeout("$('#createAccountEmailAddressEntry').focus();", 10); // YEAH! SETTIMEOUT!!!!! Needed for ie...

            this.renderAccountList();
        },


        /**
         * Delete an account from the account array
         */
        deleteAccount: function(source)
        {
            var sourceObj = $(source);

            var idx = jQuery.inArray(sourceObj.data('emailAddress'), createEmailAddressArray);

            delete createEmailAddressArray[idx];
            createEmailAddressArray.splice(idx,1);

            this.renderAccountList();
        },


        /**
         * Handle the enter to add ability on the user name field....
         */
        handleKeyDown: function(event)
        {
            if (event.keyCode == 13)
            {
                var entryField = $('#createAccountEmailAddressEntry');
                WCC.components.bulkCreation.addAccount(entryField.val() );
            }
        },


        /**
         * Handle the changing of the plan dropdown...
         * ... bound during the rendering of the dialog box
         */
        handlePlanChange_O: function()
        {
            // get the plan
            var planId = $('#createBulkAccountEmailPlanSelect').val();

            var planObj = this.getEmailPlanByPackUid(planId);
            if (planObj.unlimited_quota == true)
            {
                $('#createBulkAccountUseEmailQuota').val(-1);
                $('#createBulkAccountUseEmailQuota').hide();
                $('#emailBulkPlanQuotaAmount').html('Unlimited quota');
            }
            else
            {
                $('#createBulkAccountUseEmailQuota').show();
                var totalAvail = (planObj['max_size'] * 1024) + (planObj['addl_disk_space_mb'] * 1024 * 1024);
                var totalQuota = Math.round((planObj['addl_disk_space_mb'] * 1024 * 1024) + (planObj['max_size'] * 1024)/1024/1024);

                $('#emailBulkPlanQuotaAmount').html(totalQuota + ' MB ' + BRAVO.Translate._("WCC_MAIN_available"));
            }
        },


        /**
         * Handler for the email plan dropdown... switches the text next to the quota box
         *
         */
        handlePlanChange: function()
        {

            if (createEmailAddressArray.length > this.returnAvailableUsersForPlan() && this.returnAvailableUsersForPlan() !=-1 )
            {
                this.showTooManyAccountsWarning();
                $('#bulkSaveButton').attr('disabled','disabled');
                return;
            }
            $('#bulkSaveButton').attr('disabled',null);
            $('#componentBulkCreationErrorPlan').html('');

            var planVal = $('#createBulkAccountEmailPlanSelect').val();
            if (planVal == 'freeCredit')
            {
                WCC.components.bulkCreation.closeDialog();
                WCC.components.createAccount.open('email', 'freeCredit', 'bulkforwarding');

                return;
            }

            var planObj = this.getEmailPlanByPackUid(planVal);
            if (planObj)
        	{
                if (planObj['isFree']) {
                	$('#termsAcceptTermDisplay').show();
                } else {
                	$('#termsAcceptTermDisplay').hide();
                }

                if (planObj['unlimited_quota'] == true)
	            {
	            	$('#emailBulkPlanQuotaAmount').html(BRAVO.Translate._("WCC_MAIN_unlimitedPlan"));
	            	//$('#createBulkAccountUseEmailQuota').attr('disabled', 'disabled');
	            	$('#createBulkAccountUseEmailQuota').val(-1);

	            	$('#createBulkAccountUseEmailQuota').hide();
	            }
	            else
	            {
	                var totalQuota = Math.round(planObj['addl_disk_space_mb'] * 1024 * 1024) + (planObj['max_size'] * 1024);
                    var totalAddresses =  planObj['address_count'];
                    var amtPerAddress = Math.round(((totalQuota / totalAddresses) / 1024) / 1024);
                    var displayTotalQuota = Math.round(totalQuota / 1024 / 1024);

	                $('#emailBulkPlanQuotaAmount').html(' ' + displayTotalQuota + ' MB ' + BRAVO.Translate._("WCC_MAIN_available"));
	            	$('#createBulkAccountUseEmailQuota')
                            .val(amtPerAddress)
                            .removeAttr('disabled')
                            .show();
//////
	                var availableQuotaMb = (planObj['max_size'] - (isNaN(planObj['used_quota'])? 0 : planObj['used_quota']))/1024 + planObj['addl_disk_space_mb'];
	                var unusedAddresses = planObj['address_count'] - planObj['used_address_count'];
	                var avgSpace = Math.round(availableQuotaMb / unusedAddresses);
	                if (avgSpace == Infinity) {
	                	avgSpace = planObj['max_size']/1024 + planObj['addl_disk_space_mb'];
	                }

	                if ($("#editAccountQuota").val()>0) {

	                } else {
	                    $('#editAccountQuota').val( avgSpace );
	                }

	                //stuff is unlimited, dude
	                if(planObj['address_count'] == -1) {
	                	$('#createBulkAccountUseEmailQuota').val( 1 );
	                }


	                $('#emailBulkPlanQuotaAmount').html(Math.round(availableQuotaMb) + ' MB ' + BRAVO.Translate._("WCC_MAIN_available"));
	            	$('#editAccountQuota').removeAttr('disabled');
	            	$('#createBulkAccountUseEmailQuota').removeAttr('disabled');
	            	$('#editAccountQuota').show();
	            	$('#createBulkAccountUseEmailQuota').show();

//////
	            }

	            if ($("#createAccountIncludeEmail").prop("checked") && planObj['isFree']) {
	            	$('#createAcceptTermDisplay').show();
	            } else {
	            	$('#createAcceptTermDisplay').hide();
	            }
        	}

        },




        /**
         * Gather the data... do a bit of validation... and SUBMIT!
         * @TODO validation?
         */
        submit: function()
        {
            //dont do it if the button is disabled, dude
            if($("#bulkSaveButton").attr('disabled')=='disabled') {
                return;
            }

            WCC.components.bulkCreation.clearErrors();


            if( $("#createBulkAccountPassword1").val() != $("#createBulkAccountPassword2").val() )
            {
                $('#componentBulkCreationErrorMisc').html(BRAVO.Translate._("WCC_MAIN_ePasswordsDoNotMatch"));
                return;
            }

            if (WCC.components.bulkCreation.returnAddAccountArray().length == 0)
            {
                $('#componentBulkCreationErrorMisc').html(BRAVO.Translate._("WCC_MAIN_eEnterEmailAddressesToCreate"));
                return;
            }

            // check and see if you need to show the terms and conditions (for free accounts)
            requireTermsAgreement = false;

            for (var arrayIndex in WCC.model.emailPlans.get() ) {
            	if (WCC.model.emailPlans.get()[arrayIndex].isFree && WCC.model.emailPlans.get()[arrayIndex].pack_uid == $("#createBulkAccountEmailPlanSelect").val()) {
            		x = WCC.model.emailPlans.get()[arrayIndex];
            		requireTermsAgreement = true;
            	}
            }

            //okay now show em
            if (requireTermsAgreement) {
            	if($("#termsAcceptTerms").attr("checked")!= "checked") {
                    $('#componentBulkCreationErrorMisc').html(BRAVO.Translate._("WCC_MAIN_mustAgreeToTerms"));
                    return false;
            	}
            }

            WCC.spinKontrol.open('componentBulkCreationDiv');
            $("#bulkSaveButton").attr('disabled', 'disabled');

            // we're gonna build us an object
            submitObj = {};
            submitObj.emailArray = this.returnAddAccountArray() ? this.returnAddAccountArray() : '';
            submitObj.domain = $('#createAccountDomainSelect').val();
            submitObj.emailPlan = $('#createBulkAccountEmailPlanSelect').val();
            submitObj.quotaPerMailbox = $('#createBulkAccountUseEmailQuota').val();
            submitObj.password1 =  $('#createBulkAccountPassword1').val();
            submitObj.password2 =  $('#createBulkAccountPassword2').val();
            submitObj.postToken = Globals.POST_TOKEN;


            $.ajax({
                type: "POST",
                url: 'ajax/createbulkaccounts/',
                dataType : 'json',
                data: submitObj,
                success : createAccountSuccess,
                error :  createAccountError
            });
        },


        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(defaultPlanInput)
        {
            WCC.components.analytics.trackView('modal', 'wcc-bulk-create');

            // email
            if (defaultPlanInput != undefined)
            {
                defaultPlan = defaultPlanInput;
            }
            else if (WCC.sortAndSearch.returnFilterField() == 'pack_id' && WCC.sortAndSearch.returnFilterValue() != null)
            {
                defaultPlan = WCC.sortAndSearch.returnFilterValue();
            }
            else
            {
                defaultPlan = null;
            }

            createEmailAddressArray = [];

            // now, let's make sure we've got the info that we need
            var that = this;

            $(document).bind('updateAvailableEmailPlans.bulkCreate', renderHandler );
            $(document).bind('updateDomains.bulkCreate', renderHandler );
            $(document).bind('updatePendingValidationData.bulkCreate', renderHandler );

            // create the dialog box div... if it's not there
            if ( $('#componentBulkCreationDiv').length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                WCC.utils.centerThisDialog(properties.dialogDivId);

                WCC.utils.showLoading(properties.dialogDivId);
            }

            // create the dialog
            $('#componentBulkCreationDiv').dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 700,
                height: 510,
                title: properties.title,
                close: function(){WCC.components.bulkCreation.unbindEvents(); WCC.components.bulkCreation.destroyTheDroplist(); $('#componentBulkCreationDiv').remove(); }
            });

            // open it...
            $('#componentBulkCreationDiv').dialog("open");
            WCC.utils.centerThisDialog(properties.dialogDivId);

            WCC.model.availableEmailPlans.get();
            WCC.model.domains.get();

            this.renderDialog();
        	$('#bulkPanel .sf-msg-overlay').css('left','5%');
            return true;
        },

        getPendingValidation: function()
        {
            submitData = {};
            submitData.postToken = Globals.POST_TOKEN;
          $.ajax({
                type: "POST",
                url: 'ajaxemail/getpendingvalidation/',
                dataType : 'json',
                data: submitData,
                success : function(data) {getPendingValidationSuccess(data);},
                error :  handleBulkError
            });
        },


        /**
         * Render the dialog... waits for the emailPlanArray and domainArray to
         * get populated first....
         *
         */
        renderDialog: function()
        {


            if (WCC.model.availableEmailPlans.get() == null)
            {
                return;
            }

            if (WCC.model.domains.get() == null)
            {
                return;
            }

            if(pendingValidation === false) {
            	this.getPendingValidation();
            	return ;
            } else {
            	if (pendingValidation >= Globals.PV_THRESHHOLD) {
                    // attach the orient dialog func to window resize... we want ti to move

            		renderedOutput =  $('#pendingValidation').tmpl({closeId: '#'+properties.dialogDivId});
                    $('#'+properties.dialogDivId).html(renderedOutput);
                    $('#'+properties.dialogDivId).parent().css('width', '415px');
                    WCC.utils.centerThisDialog(properties.dialogDivId);

                    $(window).resize(function(){WCC.components.createAccount.orientDialog();});
                    currentlyOpen = true;

                    pendingValidation = false;
                    return true;
            	}
            	pendingValidation = false;
            }
            if (WCC.model.domainsutf8.get() == null)
            {
                return;
            }


            var renderedOutput =  $(properties.template).tmpl({'createEmailAddressArray':WCC.components.bulkCreation.returnAddAccountArray(), hasFreeAccounts: WCC.components.muiPod.hasFreeAccounts()});
            $('#componentBulkCreationDiv').html(renderedOutput);
            WCC.utils.centerThisDialog(properties.dialogDivId);

            $('#componentBulkCreationDiv').dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);

            this.renderAccountList();

            $('#createAccountEmailAddressEntry').keypress(function(event){WCC.components.bulkCreation.handleKeyDown(event);});
            $('#createAccountEmailAddressEntry').focus();

            $('#createBulkAccountEmailPlanSelect').change(function(){WCC.components.bulkCreation.handlePlanChange();});

			var dList = new Array();
			$.each(WCC.model.domainsutf8.get(), function(index,value) {
				dList.push(value.utf8);
			});
			$('#createAccountDomainSelect').autocomplete({
				minLength: 0,
				source: dList,
                select: function( event, ui ) {

                    this.value = punycode.toASCII(ui.item.value);

                    $("#createAccountDomainSelect").focus();
                    return false;
                }

			});

            $('#createBulkAccountPassword2').keyup(function(){WCC.components.bulkCreation.checkPassword();});
            $('#createBulkAccountPassword1').keyup(function(){WCC.components.bulkCreation.checkPassword();});

            $('#termsLink').click(function(){WCC.components.componentTermsAndConditions.open(BRAVO.Translate._("WCC_MAIN_termsTitle"), '', ''  );});

            WCC.components.bulkCreation.makeTheDroplist();

            this.handlePlanChange();

            //Link in the password validator
            require("starfield/sf.validator" , function ()
    		{
                // validate password
				$("#createBulkAccountPassword1").sfValidator(
				{
					title: BRAVO.Translate._("WCC_MAIN_passwordCriteria"),
	            	minLength: 5,
	            	maxLength: 32,
	            	inputExp: /[^\sa-zA-z0-9\!\@\#\$\%\^\&\*\(\)\-\=\_\+\[\]\{\}\;\:\'\"\,\<\.\>\/\?].*?/gi,
	                rules: [
	                    $.fn.sfValidator.rules.checkLength
					]
				});

            });

            $('#componentBulkCreationDiv #componentBulkCreationAddForwarders').click(function(){
                WCC.components.bulkCreation.closeDialog();
                WCC.components.bulkCreateForwarding.open();
            });

            $('#componentBulkCreationDiv #componentBulkCreationAddAccount').click(function(){
                WCC.components.bulkCreation.addAccount( $('#createAccountEmailAddressEntry').val() );
            });

            $('#componentBulkCreationDiv #componentBulkCreationPasteButton').click(function(){
                WCC.components.bulkCreation.openPaste();
            });

            $('#componentBulkCreationDiv #bulkSaveButton').click(function(){
                WCC.components.bulkCreation.submit();
            });

            $('#componentBulkCreationDiv #bulkCancelButton').click(function(){
                WCC.components.bulkCreation.closeDialog();
            });

            WCC.components.analytics.init($('#componentBulkCreationDiv'));

            $('#componentBulkCreationDiv').parent().find('.ui-dialog-titlebar-close').click(
                function(){ WCC.components.analytics.trackEvent('wcc-bulk-create', 'cancel-create', 'x-button', 0, '');}
            );

            WCC.utils.centerThisDialog(properties.dialogDivId);

        },



        makeTheDroplist: function()
        {

            // deal with the special dropdown lists....
            require("starfield/sf.droplist", function () {


              while ($("#createBulkAccountEmailPlanList").hasClass('sf-droplist') == false)
              {
                  var defaultThing = $('#createBulkAccountEmailPlanSelect').val();

                  $("#createBulkAccountEmailPlanList").sfDropList
                    ({
                        ensureTopZIndex: true,
                        width: 463,
                        listHeight: 200,
                        valueChangeElement: '#createBulkAccountEmailPlanSelect',
                        onOpen: function(){WCC.components.bulkCreation.hideExtraMenuStuff();return true;},
                        onClose: function(){WCC.components.bulkCreation.showExtraMenuStuff();return true;},
                        onValueChanged: function(){setTimeout(function(){WCC.components.bulkCreation.handlePlanChange()}, 1);}
                    });



              }

              if (defaultPlan != 'freeCredit' && defaultThing == '' && $('#createBulkAccountEmailPlanSelect').val() == 'freeCredit')
              {
                   $('#createBulkAccountEmailPlanSelect').val('');
              }

              if (defaultPlan == 'freeCredit')
              {
                   $('#createBulkAccountEmailPlanSelect').val('freeCredit');
              }

              WCC.components.bulkCreation.orientDialog();
              WCC.components.bulkCreation.handlePlanChange();
            });
        },



        // utility function for the special dropdowns...
        hideExtraMenuStuff: function()
        {
            setTimeout(function(){$('.sf-droplist-extracontent').hide()}, 0);
            $('.sf-droplist-shortName').hide();
            $('.sf-droplist-longName').show();

            $('.sf-droplist-select').css('background-color', 'white');
        },

        // another utility function for the special dropdowns
        showExtraMenuStuff: function()
        {
            $('.sf-droplist-extracontent').show();
            $('.sf-droplist-shortName').show();
            $('.sf-droplist-longName').hide();
        },

        /**
         * Password validation
         */
        checkPassword: function()
        {
            var passValidate = WCC.utils.validatePassword($('#createBulkAccountPassword1').val() , $('#createBulkAccountPassword2').val() );
            if (passValidate == true)
            {
                $('#createBulkPasswordOK').html('<span class="ok-icon"></span>');
                $('#createBulkAccountPassword1Label').removeClass('attention');
                $('#createBulkAccountPassword2Label').removeClass('attention');
            }
            else
            {
                //$('#createBulkPasswordOK').html('<span class="notok-icon"></span> ' + passValidate);
                $('#createBulkPasswordOK').html('<span class="notok-icon"></span> ');
            }
        },


        destroyTheDroplist: function()
        {
             $("#createBulkAccountEmailPlanList").remove();
        },

        /**
         * Render the list of email addresses we're gonna create...
         */
        renderAccountList: function()
        {
            var renderedOutput;
            var renderCount = 0;

            if (createEmailAddressArray.length <= this.returnAvailableUsersForPlan() )
            {
                $('#bulkSaveButton').attr('disabled',null);
            }

            var componentBulkCreationAddAddressArea = $('#componentBulkCreationAddAddressArea');

            var emailArray = WCC.components.bulkCreation.returnAddAccountArray();
            if (emailArray.length == 0)
            {
                componentBulkCreationAddAddressArea.html(BRAVO.Translate._("WCC_MAIN_enterEmailAddressAbove"));
            }
            else
            {
                componentBulkCreationAddAddressArea.empty();
            }

            emailArray.reverse();

            for (var k in emailArray)
            {
                var emailAddress = emailArray[k];

                if (emailAddress != undefined)
                {
                    renderCount++;
                    renderedOutput = $('#componentBulkCreationAccountList').tmpl({'emailAddress':emailAddress});

                    // attach the delete function
                    renderedOutput.find('a').data({'emailAddress':emailAddress}).click(function(){WCC.components.bulkCreation.deleteAccount(this);});
                    renderedOutput.find('.flyout-delete').mouseover(function(){$(this).find('.flyoutDeleteButton').show();});
                    renderedOutput.find('.flyout-delete').mouseleave(function(){$(this).find('.flyoutDeleteButton').hide();});

                    renderedOutput.appendTo( componentBulkCreationAddAddressArea );
                }
            }

            emailArray.reverse();

            if (renderCount > 3)
            {
                $('#componentBulkCreationAddAddressArea').css('overflow-y', 'scroll');
            }
            else
            {
                $('#componentBulkCreationAddAddressArea').css('overflow-y', 'hidden');
            }

            $('#componentBulkCreationAddAddressArea').find('.flyoutDeleteButton').hide();

            WCC.components.analytics.init($('#componentBulkCreationAddAddressArea'));
        },


        unbindEvents: function()
        {
            $(document).unbind('.bulkCreate');
        },

        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            WCC.components.bulkCreation.unbindEvents();
            $('#componentBulkCreationDiv').dialog("close");
            $('#componentBulkCreationDiv').remove();
            WCC.components.bulkCreation.destroyTheDroplist();
        },


        /**
         * Open the paste dialog box
         */
        openPaste: function(inputTxt)
        {
           if (inputTxt == undefined)
           {
               inputTxt = '';
           }
           var renderedOutput =  $('#componentBulkCreationPaste').tmpl({'inputTxt': inputTxt});
           var properties = {'height': 500, 'width':550, 'contents' : renderedOutput};
           properties.okCallback = function(){WCC.components.bulkCreation.processPaste();};
           properties.cancelCallback = function(){WCC.overlayer.close();};

           WCC.overlayer.open('componentBulkCreationDiv', properties);
           $('#componentBulkCreationPasteTextarea').focus();

           WCC.components.analytics.init($('#overlayedThingDiv'));
        },


        /**
         * Take the result contents of the paste dialog, chunk it up
         * into an array by commas, tabs, or line breaks, add the accounts, and proceed
         *
         */
        processPaste: function()
        {
            var pasteVal = $('#componentBulkCreationPasteTextarea').val();

            var pasteArray = WCC.utils.processPastedBulkInputIntoArray(pasteVal);

            if (pasteArray.length > this.returnAvailableUsersForPlan() && this.returnAvailableUsersForPlan() != -1  )
            {
                this.showTooManyAccountsWarning(true);

                return;
            }

            // let's see if any of those accounts are invalid... cuz... you know...
            // they totally might be invalid...
            for (var k in pasteArray)
            {
                if (pasteArray[k]!="" && WCC.utils.validateEmailPrefix(pasteArray[k]) == false)
                {
                    $('#componentBulkCreationErrorPaste').text("' " + pasteArray[k] + "' " + BRAVO.Translate._("WCC_MAIN_isNotValidEmailPrefix")).html();
                    return false;
                }
            }

            for (var k in pasteArray)
            {
                WCC.components.bulkCreation.addAccount(pasteArray[k], true);
            }

            WCC.overlayer.close();
        },


        showTooManyAccountsWarning: function(bulkMode)
        {
            if (!jQuery.isEmptyObject(submitObj))
            {
                return;
            }
            var acctTxt = BRAVO.Translate._("WCC_MAIN_lcAccounts");
            if (this.returnAvailableUsersForPlan() == 1)
            {
                acctTxt = BRAVO.Translate._("WCC_MAIN_lcAccount");
            }

            var txtMsg = BRAVO.Translate._("WCC_MAIN_youOnlyHave") + this.returnAvailableUsersForPlan() + ' ' + acctTxt + BRAVO.Translate._("WCC_MAIN_availableForThisPlan");
            if (bulkMode == true)
            {
                $('#componentBulkCreationErrorPaste').html(txtMsg);
            }
            else
            {
                $('#componentBulkCreationErrorPlan').html(txtMsg);
            }
        },


        clearErrors: function()
        {
            $('#componentBulkCreationErrorPassword').html('');
            $('#componentBulkCreationErrorPlan').html('');
            $('#componentBulkCreationErrorMisc').html('');
            $('#componentBulkCreationErrorDomain').html('');
        },

        returnDefaultPlan: function()
        {
            return defaultPlan;
        },


        orientDialog: function()
        {
             $("#componentBulkCreationDiv").dialog( 'option', 'position', 'center' );
        }


    };


}());



/**
 * Forwarding interface
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.createForwarding = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentCreateForwardingDiv';
    properties.template = '#componentCreateForwarding';
    properties.title = BRAVO.Translate._("WCC_MAIN_forwardEmailTitle");

    var defaultPlan = null;

    var returnTo = null;
    var submitObj = null;
    var fetchingPV = false;
    var pendingValidation = false;

    /**
     * Yay! You created a forwarding account! It's your birthday!
     */
    var createForwardingSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true && undefined==data.error)
        {

           $('#'+properties.dialogDivId).dialog("close");
           WCC.cache.reset();
           if (WCC.allAccounts) {
	           WCC.allAccounts.getAllAccounts();
           }
           if (WCC.email) {
	           WCC.email.getAllAccounts();
           }
           if (WCC.calendar) {
	           WCC.calendar.getAllAccounts();
           }
           if (WCC.off) {
	           WCC.off.getAllAccounts();
           }

            var forwardingAccountCreated = BRAVO.Translate._("WCC_MAIN_forwardingAccountCreated");
            forwardingAccountCreated = forwardingAccountCreated.replace('#VALUE#', WCC.utils.utf8Address(submitObj.forwardAddress));
            WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), forwardingAccountCreated);

           setTimeout(function(){WCC.components.updateWatcher.watchEmail(submitObj.emailAddress)}, 1000);

        } else {
        	handleError(data);
            return false;
        }
        return true;
    };


    /**
     * Got an error back on the create request?  better display it
     */
    var handleError = function (data) {

        WCC.spinKontrol.close();
        $("#saveButton").attr('disabled', null);

        WCC.components.createForwarding.clearErrors();

        for (var errorType in data.error)
        {
            for (var singleError in data.error[errorType])
            {
                switch (errorType)
                {
                    case 'mailbox':
                        $('#componentCreateForwardingErrorEmail').html(data.error[errorType][singleError]);
                        break;
                    case 'plan':
                        $('#componentCreateForwardingErrorPlan').html(data.error[errorType][singleError]);
                        break;
                    case 'ccAddress':
                        $('#componentCreateForwardingErrorCC').html(data.error[errorType][singleError]);
                        break;
                    case 'domain':
                        $('#componentCreateForwardingErrorEmail').html(data.error[errorType][singleError]);
                        break;
                    case 'emailAddress':
                        $('#componentCreateForwardingErrorEmail').html(data.error[errorType][singleError]);
                        break;
                    case 'autoResponder':
                        WCC.components.createForwarding.handleAutoReplyClick();
                        $('#componentCreateForwardingErrorAutoReply').html(data.error[errorType][singleError]);
                        break;
                    case 'catchall':
                        $('#componentCreateForwardingErrorCatchall').html(data.error[errorType][singleError]);
                        break;
                    default:
                        $('#componentCreateForwardingErrorMisc').html(data.error[errorType][singleError]);
                }
            }
    	}


    	return true;
    };


     // the next two funcs are for the autocomplete
    function split( val )
    {
        return val.split( /,\s*/ );
    };

    function extractLast( term ) {
    	if (undefined===term) return term;
        return split( term ).pop();
    };

    var getPendingValidationSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true )
        {
        	pendingValidation = data.count;
            $(document).trigger('updatePendingValidationData');

		};
		fetchingPV = false;
	};

    return{

    	setPV: function(value) {
    		pendingValidation = value;
    	},

    	getPV: function() {
    		return pendingValidation;
    	},

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(defaultPlanInput, returnToInput)
        {
        	pendingValidation = false;
            // see if we should go back to, say, to the bulkCreate or whatever
            // after we're done with stuff
            if (returnToInput != undefined)
            {
                returnTo = returnToInput;
            }
            else
            {
                returnTo = null;
            }

            // define the new at symbolkey code...

            $.ui.keyCode['AT'] = 64;
            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);

                WCC.utils.showLoading(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 550,
                title: properties.title,
                close: function(){WCC.utils.detatchToolTip();$(document).unbind('.createForwarding');},
                beforeClose: function(){WCC.components.createForwarding.destroyTheDroplist();}
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");

            var that = this;
            $(document).bind('updateDomains.createForwarding', function(){that.renderDialog();});
            $(document).bind('updateAvailableForwardingPlans.createForwarding', function(){that.renderDialog();});
            $(document).bind('updatePendingValidationData.createForwarding', function(){that.renderDialog();});

             //WCC.components.muiPod.hasFreeForwardingAccounts();

            this.renderDialog();
            WCC.utils.centerThisDialog(properties.dialogDivId);

            // email
            if (defaultPlanInput != undefined)
            {
                defaultPlan = defaultPlanInput;
            }
            else if (WCC.sortAndSearch.returnFilterField() == 'pack_id' && WCC.sortAndSearch.returnFilterValue() != null)
            {
                defaultPlan = WCC.sortAndSearch.returnFilterValue();
            }
            else
            {
                defaultPlan = null;
            }

            return true;
        },




        placeSpecialDiv: function()
        {
            var newdiv2 = document.createElement('div');
            $(newdiv2).attr('id', 'buyMoreDiv');
            //$(newdiv2).css('background-color', 'green');
            $(newdiv2).css('position', 'absolute');
            $(newdiv2).width($('#buyForwardingLink').width());
            $(newdiv2).height($('#buyForwardingLink').height());
            $(newdiv2).css('z-index', 2147483643);
            var bfOffset = $('#buyForwardingLink').offset();
            $('.sf-msg-overlay').append(newdiv2);

            //$('#buyMoreDiv').offset(bfOffset);
            if (bfOffset.left != undefined)
            {
                $('#buyMoreDiv').css('left', bfOffset.left + 'px');
                $('#buyMoreDiv').css('top', bfOffset.top + 'px');
            }

            $('#buyMoreDiv').click(function(){window.open('/productpurchase?product=forwarding');return false;}); //


        },


        getPendingValidation: function()
        {
        	that = this;
            submitData = {};
            submitData.postToken = Globals.POST_TOKEN;
          $.ajax({
                type: "POST",
                url: 'ajaxemail/getpendingvalidation/',
                dataType : 'json',
                data: submitData,
                success : function(data) {getPendingValidationSuccess.call(that, data);},
                error :  handleError
            });
        },


        /**
         * Render the dialog...
         *
         */
        renderDialog: function()
        {

            if (WCC.model.domains.get() == null)
            {
                return;
            }
            if (WCC.model.domainsutf8.get() == null)
            {
                return;
            }

            if (this.getForwardingPlans() == null)
            {
                return;
            }

            if (WCC.components.muiPod.hasFreeForwardingAccounts() == null)
            {
               //setTimeout(function(){WCC.components.createForwarding.renderDialog();}, 100);
               return;
            }

            if(WCC.components.muiPod.hasFreeAccounts()==null) {
            	return;
            }


            var data = {};

            data['hasFreeAccounts'] = WCC.components.muiPod.hasFreeAccounts();

            if(pendingValidation === false) {
            	this.getPendingValidation();
            	return ;
            } else {
            	if (pendingValidation >= Globals.PV_THRESHHOLD) {
                    // attach the orient dialog func to window resize... we want ti to move

            		renderedOutput =  $('#pendingValidation').tmpl({closeId: '#'+properties.dialogDivId});
                    $('#'+properties.dialogDivId).html(renderedOutput);
                    $('#'+properties.dialogDivId).parent().css('width', '415px');
                    WCC.utils.centerThisDialog(properties.dialogDivId);

                    $(window).resize(function(){WCC.components.createAccount.orientDialog();});
                    currentlyOpen = true;

                    return true;
            	}

            }

            var sDate = new Date();
            var thisMonth = sDate.getMonth() + 1;
            if (thisMonth < 10)
            {
                thisMonth = '0' + thisMonth;
            }

            var thisDate = sDate.getDate();
            if (thisDate < 10)
            {
                thisDate = '0' + thisDate;
            }

            data["today"] = Date.today().toString("M/d/yyyy");
            data["nextYear"] = thisMonth +'/' + thisDate + '/' + (sDate.getFullYear()+1);
            data["nextWeek"] = Date.today().addWeeks(1).toString("M/d/yyyy");

            var renderedOutput =  $(properties.template).tmpl(data);
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);


            if(this.getForwardingPlans().length == 0)
            {
                if (WCC.components.muiPod.hasFreeAccounts() == true)
                {
                    var accountMessage = '<p> ' + BRAVO.Translate._("WCC_MAIN_youHaveNotSetupYourFreeAccount") + ' <a href="#" onclick="WCC.components.muiPod.openMuiDialogFromCreateForwarding(); return false">' + BRAVO.Translate._("WCC_MAIN_setupNow") + '</a></p>';
                    accountMessage += "<p style='font-weight: normal'>" + BRAVO.Translate._("WCC_MAIN_noAvailableForwardBuyMore") + '</p>';

                    $("#forwardPanel").sfMsgOverlay({message: accountMessage, style:null});
                }
                else
                {
                    $("#forwardPanel").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noAvailableForwardBuyMore"), style:null});
                }

                $('.sf-msg-overlay').css('z-index', 110005);
                $('.sf-msg-overlay').css('left', '5%');

                if (WCC.utils.isIE() )
                {

                    $("#forwardPanel").find('.sf-msg-overlay').click(function(){window.open('/productpurchase?product=forwarding', '_blank');return false;});
                    WCC.components.createForwarding.placeSpecialDiv();
                }





                return;

            }
            else
            {

                require("starfield/sf.msg.overlay", function () {
                        $("#forwardPanel").sfMsgOverlay({message: null});
                });
            }

//            $("#createForwardingAutoReplyStart").datetimepicker({
//                ampm: true,
//                timeFormat: 'h:mmtt',
//                showOtherMonths: true,
//                selectOtherMonths: true
//            });
//
//		//Datepicker end temp
//            $("#createForwardingAutoReplyEnd").datetimepicker({
//                ampm: true,
//                timeFormat: 'h:mmtt',
//                showOtherMonths: true,
//                selectOtherMonths: true
//            });
//
             WCC.components.createForwarding.makeTheDroplist();

             WCC.components.datePicker.add($("#createForwardingAutoReplyStart") );
            WCC.components.datePicker.add( $("#createForwardingAutoReplyEnd") );


            var that = this;

            $('#createForwardingAutoReplySourceChoiceDefault').change(function(){that.handleAutoReplyFromDisplay();});
            $('#createForwardingAutoReplySourceChoiceOther').change(function(){that.handleAutoReplyFromDisplay();});
            $('#createForwardingAutoReplySubjectChoiceOriginalSubject').change(function(){that.handleAutoReplySubjectDisplay();});
            $('#createForwardingAutoReplySubjectChoiceOtherSubject').change(function(){that.handleAutoReplySubjectDisplay();});
            $('#createForwardingEnableAutoReply').click(function(){that.handleAutoReplyClick();});

            // setup behavor for the autocomplete
            $('#forwardThisAddress')
                .bind("keydown.createForwarding", function (event)
                {
                    if ( event.keyCode === $.ui.keyCode.TAB && $( this ).data( "autocomplete" ).menu.active )
                    {
                        event.preventDefault();
                    }
                })
                .keyup(function(event)
                {
                    if ( event.which == $.ui.keyCode['AT'])
                    {
                        $('#forwardThisAddress').autocomplete("search", "");
                        if(WCC.model.domainsutf8.get().length!=0) {
                            event.preventDefault();
                        }
                    }
                })
                .autocomplete(
                {
                    minLength: 0,
                    source: function( request, response ) {

                        // delegate back to autocomplete, but extract the last term
                    	if(WCC.model.domainsutf8.get()!=0) {
                    		var domainSearch = new String(request.term);
                    		domainSearch = domainSearch.split('@')[1];
                    		var dList = new Array();
                			$.each(WCC.model.domainsutf8.get(), function(index,value) {
                				dList.push(value.utf8);
                			});

                    		if (undefined!==domainSearch) {
    	                        response( $.ui.autocomplete.filter(
    	                        		dList, extractLast( domainSearch ) ) );
                    		}
                    	}
                    },
                    focus: function() {
                        // prevent value inserted on focus
                        return false;
                    },
                    select: function( event, ui ) {
                        // this be the static selektah!
                        var explodedArray = this.value.split('@');

                        this.value = explodedArray[0] + '@'+ punycode.toASCII(ui.item.value);

                        WCC.components.createAccount.handleEmailEntryUpdate();
                        return false;
                    }
                }
            );

            //attach the tooltip
            WCC.utils.attachToolTip('tip');
            if ($('#createForwardToAddresses').length > 0)
            {
                $('#createForwardToAddresses').limit('250','#forwardCharsLeft');
            }

            setTimeout(function(){WCC.placeholder.attach('componentCreateForwardingDiv');$('#forwardThisAddress').focus();}, 100);
            WCC.utils.centerThisDialog(properties.dialogDivId);

        },


        makeTheDroplist: function()
        {
            // deal with the special dropdown lists....
            require("starfield/sf.droplist", function () {


              while ($("#createForwardingPlanList").hasClass('sf-droplist') == false)
              {
                  var defaultThing = $('#componentCreateForwardingDiv #createForwardingPlanList').val();

                  $("#createForwardingPlanList").sfDropList
                    ({
                        ensureTopZIndex: true,
                        width: 463,
                        listHeight: 200,
                        valueChangeElement: '#createForwardingPlanSelect',

                        onValueChanged: function(){setTimeout(function(){WCC.components.createForwarding.handlePlanSwitch()}, 1);}
                    });
              }

              if (defaultPlan != 'freeCredit' && defaultThing == '' && $('#componentCreateForwardingDiv #createForwardingPlanSelect').val() == 'freeCredit')
              {
                   $('#componentCreateForwardingDiv #createForwardingPlanSelect').val('');
              }
              else if (defaultPlan == 'freeCredit')
              {
                  $('#componentCreateForwardingDiv #createForwardingPlanSelect').val('freeCredit');
              }

              //WCC.components.createAccount.orientDialog();
              setTimeout(function(){WCC.components.createForwarding.handlePlanSwitch()}, 100);

            });
        },


        destroyTheDroplist: function()
        {
             $("#createForwardingPlanList").remove();
             $('.sf-droplist-drop').remove();
        },

        handlePlanSwitch: function()
        {
            if ($('#createForwardingPlanSelect').val() == 'freeCredit')
            {
                if (returnTo == null)
                {
                    WCC.components.muiPod.openMuiDialogFromCreateForwarding();
                }
                else
                {
                    WCC.components.muiPod.openMuiDialogFromBulkForwarding();
                }

            }
        },

        /**
         * Handle the From field
         *
         */
        handleAutoReplyFromDisplay: function()
        {
            if ( $('#createForwardingAutoReplySourceChoiceOther').prop("checked") == true)
            {
                $('#createForwardingAutoReplySourceEmail').removeAttr("disabled").removeClass("exampleText");
            }
            else
            {
                $('#createForwardingAutoReplySourceEmail').attr("disabled", "disabled").addClass("exampleText");
            }
        },


        /**
         * Handle the auto reply subject field
         *
         */
        handleAutoReplySubjectDisplay: function()
        {
            if ( $('#createForwardingAutoReplySubjectChoiceOtherSubject').prop("checked") == true)
            {
                $('#createForwardingAutoReplySubject').removeAttr("disabled").removeClass("exampleText");
            }
            else
            {
                $('#createForwardingAutoReplySubject').attr("disabled", "disabled").addClass("exampleText");
            }
        },


        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            $(document).unbind('.createForwarding');
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        },


        /**
         * Open or close the auto reply
         *
         */
        toggleAutoReply: function()
        {
            $("#createForwardingAutoReplyContainer").slideToggle("slow", function(){$('#componentCreateForwardingDiv').dialog( 'option', 'position', 'center' );WCC.utils.centerThisDialog('componentCreateForwardingDiv');} );
            var myDiv = $("#componentCreateForwardingDiv");
            if (myDiv.find("#autoReplyToggler").hasClass('show-button')) {
            	myDiv.find("#autoReplyToggler").addClass('hide-button');
            	myDiv.find("#autoReplyToggler").removeClass('show-button');
            } else {
            	myDiv.find("#autoReplyToggler").removeClass('hide-button');
            	myDiv.find("#autoReplyToggler").addClass('show-button');
            }


            return false; //Prevent the browser jump to the link anchor
        },


        /**
         * Expand the auto reply
         *
         */
        handleAutoReplyClick: function()
        {
            if ($('#createForwardingEnableAutoReply').is(':checked') && $('#autoReplyToggler').hasClass('show-button') )
            {
                $("#autoReplyToggler").addClass('hide-button');
                $("#autoReplyToggler").removeClass('show-button');

                //$("#createForwardingAutoReplyContainer").slideToggle("slow", function(){$('#componentCreateForwardingDiv').dialog('option', 'position', 'center' );});
                $("#createForwardingAutoReplyContainer").slideToggle("slow", function(){ });


            }
        },


        returnDefaultPlan: function()
        {
            var emailPlans = WCC.model.availableForwardingPlans.get();
            for (var arrayIndex in emailPlans )
            {
                if (emailPlans[arrayIndex]['pack_id'] == defaultPlan)
                {
                    return emailPlans[arrayIndex]['pack_uid'];
                }
                if (emailPlans[arrayIndex]['pack_uid'] == defaultPlan)
                {
                    return emailPlans[arrayIndex]['pack_uid'];
                }
            }

            return null;
        },


        /**
         * Submit this mutha!
         *
         */
        submit: function()
        {
            //dont do it if the button is disabled, dude
            if($("#saveButton").attr('disabled')=='disabled') {
                return;
            }


            WCC.spinKontrol.open('componentCreateForwardingDiv');

            $("#saveButton").attr('disabled', 'disabled');

            WCC.components.createForwarding.clearErrors();

            var that = this;
            submitObj = {};

            submitObj.forwardAddress = $('#forwardThisAddress').val();
            submitObj.forwardToAddressesArray = $('#createForwardToAddresses').val().split(',');
            submitObj.plan = $('#createForwardingPlanSelect').val();
            submitObj.useCatchAll = $("#createForwardingUseCatchall").prop("checked");

            submitObj.enableAutoReply = $("#createForwardingEnableAutoReply").prop("checked");
            submitObj.autoReplyFrequency = $("#createForwardingAutoReplyFrequency").val();
            submitObj.autoReplySourceDefault = $("#createForwardingAutoReplySourceChoiceDefault").prop("checked");
            submitObj.autoReplySourceEmail = $("#createForwardingAutoReplySourceEmail").val();
            submitObj.autoReplySubjectDefault = $("#createForwardingAutoReplySubjectChoiceOriginalSubject").prop("checked");
            submitObj.autoReplySubject = $("#createForwardingAutoReplySubject").val();
            submitObj.autoReplyMessage = $("#createForwardingAutoReplyMessage").val();
            submitObj.autoReplyUseStart = $("#createForwardingAutoReplyUseStart").prop("checked");
            submitObj.autoReplyUseEnd = $("#createForwardingAutoReplyUseEnd").prop("checked");
            submitObj.autoReplyStart = $("#createForwardingAutoReplyStart").val();
            submitObj.autoReplyEnd = $("#createForwardingAutoReplyEnd").val();


             if ($('#createAccountAutoReplyUseStart').prop('checked'))
            {
                submitObj.autoReplyStart = $("#createForwardingAutoReplyStart").val();
                submitObj.autoReplyStartOffset = $("#createForwardingAutoReplyStart").datetimepicker('getSelectedTimezone');
                if (submitObj.autoReplyStartOffset == null)
                {
                    var tzObj = WCC.components.datePicker.returnTimezone();
                    submitObj.autoReplyStartOffset = tzObj.timezone_id;
                };
            }
            else
            {
                submitObj.autoReplyStart = '';
            }

            if ($('#createAccountAutoReplyUseEnd').prop('checked'))
            {
                submitObj.autoReplyEnd = $("#createForwardingAutoReplyEnd").val();
                submitObj.autoReplyEndOffset = $("#createForwardingAutoReplyEnd").datetimepicker('getSelectedTimezone');
                if (submitObj.autoReplyEndOffset == null)
                {
                    var tzObj = WCC.components.datePicker.returnTimezone();
                    submitObj.autoReplyEndOffset = tzObj.timezone_id;
                }
            }
            else
            {
                submitObj.autoReplyEnd = '';
            }



            submitObj.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajax/createforwarding/',
                dataType : 'json',
                data: submitObj,
                success : createForwardingSuccess,
                error :  WCC.utils.handleError
            });
        },


        /**
         * Get the forwarding plans
         *
         */
        getForwardingPlans: function()
        {
            var outputArray = [];

            var planArray = WCC.model.availableForwardingPlans.get();
            if(planArray) {
	            for (var k in planArray)
	            {
	                if (planArray[k]['delivery_mode'] == 'forward')
	                {
	                    outputArray[outputArray.length] = planArray[k];
	                }
	            }
            } else {
            	return null;
            }

//            if (outputArray.length == 0)
//            {
//                return null;
//            }

            return outputArray;
        },


        /**
         * Errors... they're like, sooo lame....
         *
         */
        clearErrors: function()
        {
            $('#componentCreateForwardingErrorEmail').html('');
            $('#componentCreateForwardingErrorCC').html('');
            $('#componentCreateForwardingErrorPlan').html('');
            $('#componentCreateForwardingErrorCatchall').html('');
            $('#componentCreateForwardingErrorMisc').html('');
            $('#componentCreateForwardingErrorAutoReply').html();
        }


    };


}());



/**
 * Bulk forwarding create...
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.bulkCreateForwarding = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentbulkCreateForwardingDiv';
    properties.template = '#componentBulkCreateForwarding';
    properties.title = BRAVO.Translate._("WCC_MAIN_createBulkForwardTitle");

    var createEmailAddressArray = [];

    var defaultPlan = null;

    var submitObj = null;

    /**
     * AJAX create account success
     * @TODO - fix!
     *
     */
    var createAccountSuccess = function(data)
    {
    	if(data.error) {
            handleBulkError(data);
    		//error dialog
    	} else {
            WCC.components.bulkCreateForwarding.closeDialog();

            for (var key in submitObj.emailArray)
            {
                var completeEmailAddress = submitObj.emailArray[key] + '@' + submitObj.domain;
                var insertObj = {};
                insertObj.delivery_mode = 'forward';
                insertObj.emailAddress = completeEmailAddress;
                insertObj.displayName = completeEmailAddress;
                insertObj.alias_redirect = submitObj.forwardDestination;
                WCC.cache.cacheThing(completeEmailAddress, insertObj);
                WCC.cache.addAlert(completeEmailAddress, 'email', 'pendsetup');
            }

            $(document).trigger('infoRowRefresh');

            if (WCC.allAccounts)
            {
                // WCC.allAccounts.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.domains.reset();
                WCC.model.emailPlans.reset();
                WCC.model.offPlans.reset();
                WCC.model.relayData.reset();
                WCC.model.availableCalPlans.reset();
                WCC.model.availableEmailPlans.reset();
                WCC.model.availableOffPlans.reset();
            }
            if (WCC.email)
            {
                //WCC.email.getAllAccounts();
                WCC.model.emailPlans.reset();
                WCC.model.availableEmailPlans.reset();
            }
            if (WCC.calendar)
            {
                // WCC.calendar.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.availableCalPlans.reset();
            }
            if (WCC.off)
            {
                // WCC.off.getAllAccounts();
                WCC.model.offPlans.reset();
                WCC.model.availableOffPlans.reset();
            }


            var bulkForwardingSuccess = BRAVO.Translate._("WCC_MAIN_bulkForwardingSuccess");

            WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), bulkForwardingSuccess);


            // clear shit out
            submitObj = {};
            createEmailAddressArray = [];

    	}
    };

    /**
     * Got an error back on the create request?  better display it
     */
    var handleBulkError = function (data) {
    };


    /**
     * AJAX create account fail
     * @TODO - finish this off!
     */
    var createAccountError = function(data)
    {
    };

    /**
     * Got an error back on the create request?  better display it
     */
    var handleBulkError = function (data) {
        WCC.spinKontrol.close();
        $("#bulkSaveButton").attr('disabled', null);
        WCC.components.bulkCreateForwarding.clearErrors();

    	for (var bulkError in data.error)
        {
            for (var singleError in data.error[bulkError])
            {
                switch (singleError)
                {
                    case 'mailbox':
                        $('#componentBulkForwardErrorEmailAddress').html(data.error[bulkError][singleError] + ' ');
                        break;
                    case 'plan':
                        $('#componentBulkCreationErrorPlan').html(data.error[bulkError][singleError] + ' ');
                        break;
                    case 'domain':
                        $('#componentBulkCreationErrorDomain').html(data.error[bulkError][singleError] + ' ');
                        break;
                    default:
                        $('#componentBulkCreationErrorMisc').html(data.error[bulkError][singleError] + ' ');
                }
            }
    	}

    };



    return{

        /**
         * Return the createEmailAddressArray
         */
        returnAddAccountArray: function()
        {
            if (createEmailAddressArray == null)
            {
                return [];
            }
            return createEmailAddressArray;
        },


        /**
         * Add an account to the account array
         */
        addAccount: function(newAccount, bulkMode)
        {
            newAccount = jQuery.trim(newAccount);
            if (newAccount == '')
            {
                return false;
            }

            var newAccountArray = newAccount.split(",");

            if (newAccountArray.length + createEmailAddressArray.length > this.returnAvailableUsersForPlan())
            {
                this.showTooManyAccountsWarning(bulkMode);
                return;
            }

            var validateEmailPrefix = WCC.utils.validateEmailPrefix(newAccount);
            if (validateEmailPrefix == false)
            {
                if (bulkMode != true)
                {
                    $('#componentBulkCreationErrorEmailAddress').html(BRAVO.Translate._("WCC_MAIN_eInvalidEmailAddress"));
                }

                return false;
            }

            for (var k in newAccountArray)
            {
                var newThing =  jQuery.trim(newAccountArray[k]);
                if (jQuery.inArray(newThing, createEmailAddressArray) == -1 && newThing != '')
                {
                   createEmailAddressArray[createEmailAddressArray.length] = newThing;
                }
            }

            $('#bulkCreateForwardAddressEntry').val('');
            setTimeout("$('#bulkCreateForwardAddressEntry').focus();", 10); // YEAH! SETTIMEOUT!!!!! Needed for ie...

            this.renderAccountList();
        },


        /**
         * Delete an account from the account array
         */
        deleteAccount: function(source)
        {
            var sourceObj = $(source);

            var idx = jQuery.inArray(sourceObj.data('emailAddress'),createEmailAddressArray);

            delete createEmailAddressArray[idx];
            createEmailAddressArray.splice(idx,1);

            this.renderAccountList();
        },


        /**
         * Handle the enter to add ability on the user name field....
         */
        handleKeyDown: function(event)
        {
            if (event.keyCode == 13)
            {
                var entryField = $('#bulkCreateForwardAddressEntry');
                this.addAccount(entryField.val() );
            }
        },


        /**
         * Handle the changing of the plan dropdown...
         * ... bound during the rendering of the dialog box
         */
        handlePlanChange: function()
        {
            if ($('#bulkCreateForwardPlanSelect').val() == 'freeCredit')
            {
                WCC.components.bulkCreateForwarding.closeDialog();
                WCC.components.createForwarding.open('freeCredit', 'bulkforwarding');
                return;
            }

            if ($('#componentbulkCreateForwardingDiv').length > 0)
            {
                return;
            }


            if (createEmailAddressArray.length > this.returnAvailableUsersForPlan())
            {
                this.showTooManyAccountsWarning();
                $('#bulkSaveButton').attr('disabled','disabled');
                return;
            }
            $('#bulkSaveButton').attr('disabled',null);
            $('#componentBulkCreationErrorPlan').html('');
        },



        makeTheDroplist: function()
        {
            // deal with the special dropdown lists....
            require("starfield/sf.droplist", function () {


              while ($("#bulkCreateForwardingPlanList").hasClass('sf-droplist') == false)
              {
                  var defaultThing = $('#bulkCreateForwardPlanSelect').val();

                  $("#bulkCreateForwardingPlanList").sfDropList
                    ({
                        ensureTopZIndex: true,
                        width: 463,
                        listHeight: 200,
                        valueChangeElement: '#bulkCreateForwardPlanSelect',
                        onOpen: function(){WCC.components.bulkCreateForwarding.hideExtraMenuStuff();return true;},
                        onClose: function(){WCC.components.bulkCreateForwarding.showExtraMenuStuff();return true;},
                        onValueChanged: function(){setTimeout(function(){WCC.components.bulkCreateForwarding.handlePlanChange()}, 1);}
                    });



              }

              if (defaultPlan != 'freeCredit' && defaultThing == '' && $('#createBulkAccountEmailPlanSelect').val() == 'freeCredit')
              {
                   $('#createBulkAccountEmailPlanSelect').val('');
              }

              if (defaultPlan == 'freeCredit')
              {
                   $('#createBulkAccountEmailPlanSelect').val('freeCredit');
              }

              WCC.components.bulkCreation.orientDialog();
              WCC.components.bulkCreation.handlePlanChange();
            });
        },



        // utility function for the special dropdowns...
        hideExtraMenuStuff: function()
        {
            setTimeout(function(){$('.sf-droplist-extracontent').hide()}, 0);
            $('.sf-droplist-shortName').hide();
            $('.sf-droplist-longName').show();

            $('.sf-droplist-select').css('background-color', 'white');
        },

        // another utility function for the special dropdowns
        showExtraMenuStuff: function()
        {
            $('.sf-droplist-extracontent').show();
            $('.sf-droplist-shortName').show();
            $('.sf-droplist-longName').hide();
        },


        destroyTheDroplist: function()
        {
             $("#bulkCreateForwardingPlanList").remove();
        },


        /**
         * Gather the data... do a bit of validation... and SUBMIT!
         * @TODO validation?
         */
        submit: function()
        {
            WCC.components.bulkCreateForwarding.clearErrors();

            // make sure we've got some stuff to submit
            if (WCC.components.bulkCreateForwarding.returnAddAccountArray().length == 0)
            {
                $('#componentBulkCreationErrorMisc').html(BRAVO.Translate._("WCC_MAIN_eSpecifyAddressToForward"));
                return;
            }

            //dont do it if the button is disabled, dude
            if($("#bulkSaveButton").attr('disabled')=='disabled') {
                return;
            }

            WCC.spinKontrol.open('componentbulkCreateForwardingDiv');
            $("#bulkSaveButton").attr('disabled', 'disabled');

            // we're gonna build us an object
            submitObj = {};
            submitObj.emailArray = this.returnAddAccountArray();
            submitObj.domain = $('#bulkCreateForwardDomain').val();
            submitObj.emailPlan = $('#bulkCreateForwardPlanSelect').val();
            submitObj.forwardDestination = $('#bulkCreateForwardDestination').val();
            submitObj.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajax/createbulkaccounts/',
                dataType : 'json',
                data: submitObj,
                success : createAccountSuccess,
                error :  createAccountError
            });
        },



        /**
         * Password validation
         *
         */
        checkPassword: function()
        {
            var passValidate = WCC.utils.validatePassword($('#createBulkAccountPassword1').val() , $('#createBulkAccountPassword2').val() );
            if (passValidate == true)
            {
                $('#createBulkPasswordOK').html('<span class="ok-icon"></span>');
                $('#createBulkAccountPassword1Label').removeClass('attention');
                $('#createBulkAccountPassword2Label').removeClass('attention');
            }
            else
            {
                $('#createBulkPasswordOK').html('<span class="notok-icon"></span> ' + passValidate);

            }
        },


        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(defaultPlanInput)
        {

            if (defaultPlanInput != undefined)
            {
                defaultPlan = defaultPlanInput;
            }

            createEmailAddressArray = [];

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);

                WCC.utils.showLoading(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 700,
                height: 510,
                title: properties.title,
                close: function(){WCC.components.bulkCreateForwarding.unbindEvents();WCC.components.bulkCreateForwarding.destroyTheDroplist()}
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");
            WCC.utils.centerThisDialog(properties.dialogDivId);

            var that = this;
            $(document).bind('updateDomains.bulkCreateForwarding', function(){that.renderDialog();});
            $(document).bind('updateAvailableForwardingPlans.bulkCreateForwarding', function(){that.renderDialog();});

            WCC.model.domains.get();
            this.getForwardingPlans();

            this.renderDialog();

            return true;
        },


        /**
         * Render the dialog... waits for the emailPlanArray and domainArray to
         * get populated first....
         *
         */
        renderDialog: function()
        {
            var that = this;
            if (WCC.model.domains.get() == null)
            {
                return;
            }

            if (this.getForwardingPlans() == null)
            {
                this.getForwardingPlans();
                setTimeout(function(){WCC.components.bulkCreateForwarding.renderDialog()}, 100);

                return;
            }


            var renderedOutput =  $(properties.template).tmpl({'componentBulkCreateForwardAddAddressArea':this.returnAddAccountArray(), hasFreeAccounts: WCC.components.muiPod.hasFreeAccounts()});
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );

            this.renderAccountList();

            if(this.getForwardingPlans().length == 0)
            {require("starfield/sf.msg.overlay", function () {
                    $("#bulkForwardPanel").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noAvailableForwardBuyMore"), style:null});
                    $('.sf-msg-overlay').css('z-index', 100005);
                	$('#bulkForwardPanel .sf-msg-overlay').css('left','5%');
                    $('#pasteManyDiv').remove();
                });

                return;
            }
            else
            {
                require("starfield/sf.msg.overlay", function () {
                        $("#bulkForwardPanel").sfMsgOverlay({message: null});
                });
            }

            WCC.components.bulkCreateForwarding.makeTheDroplist();

            $('#bulkCreateForwardAddressEntry').keypress(function(event){that.handleKeyDown(event);});
            $('#bulkCreateForwardAddressEntry').focus();

            $('#bulkCreateForwardPlanSelect').change(function(){that.handlePlanChange();});

            $('#bulkCreateForwardDomain').autocomplete({source: WCC.model.domains.get()});

            $('#bulkCreateForwardAddressEntry').focus();



            this.handlePlanChange();
            WCC.utils.centerThisDialog(properties.dialogDivId);

        },


        /**
         * Render the list of email addresses we're gonna create...
         */
        renderAccountList: function()
        {
            var renderedOutput;
            var renderCount = 0;

            if (createEmailAddressArray.length <= this.returnAvailableUsersForPlan() )
            {
                $('#bulkSaveButton').attr('disabled',null);
            }

            var componentBulkCreationAddAddressArea = $('#componentBulkCreateForwardAddAddressArea');

            var emailArray = this.returnAddAccountArray();
            if (emailArray.length == 0)
            {
                componentBulkCreationAddAddressArea.html(BRAVO.Translate._("WCC_MAIN_enterEmailAddressAbove"));
            }
            else
            {
                componentBulkCreationAddAddressArea.empty();
            }

            emailArray.reverse();

            for (var k in emailArray)
            {
                var emailAddress = emailArray[k];

                if (emailAddress != undefined)
                {
                    renderCount++;
                    renderedOutput = $('#componentBulkCreateForwardingAccountList').tmpl({'emailAddress':emailAddress});

                    // attach the delete function
                    renderedOutput.find('a').data({'emailAddress':emailAddress}).click(function(){WCC.components.bulkCreateForwarding.deleteAccount(this);});
                    renderedOutput.find('.flyout-delete').mouseover(function(){$(this).find('.flyoutDeleteButton').show();});
                    renderedOutput.find('.flyout-delete').mouseleave(function(){$(this).find('.flyoutDeleteButton').hide();});

                    renderedOutput.appendTo( componentBulkCreationAddAddressArea );
                }
            }

            emailArray.reverse();

            if (renderCount > 3)
            {
                $('#componentBulkCreationAddAddressArea').css('overflow-y', 'scroll');
            }
            else
            {
                $('#componentBulkCreationAddAddressArea').css('overflow-y', 'hidden');
            }

            $('#componentBulkCreateForwardAddAddressArea').find('.flyoutDeleteButton').hide();
        },


        unbindEvents: function()
        {
            $(document).unbind('.bulkCreateForwarding');
        },

        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            WCC.components.bulkCreateForwarding.destroyTheDroplist();
            WCC.components.bulkCreateForwarding.unbindEvents();
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        },


        /**
         * Open the paste dialog box
         */
        openPaste: function(inputTxt)
        {

           var renderedOutput =  $('#componentBulkCreateForwardingPaste').tmpl({'inputTxt': inputTxt});
           var properties = {'height': 500, 'width':550, 'contents' : renderedOutput};
           properties.okCallback = function(){WCC.components.bulkCreateForwarding.processPaste();};
           properties.cancelCallback = function(){WCC.overlayer.close();};

           WCC.overlayer.open('componentbulkCreateForwardingDiv', properties);
           $('#componentBulkCreateForwardingPasteTextarea').focus();
        },


        /**
         * Take the result contents of the paste dialog, chunk it up
         * into an array by commas, add the accounts, and proceed
         *
         */
        processPaste: function()
        {
            var pasteVal = $('#componentBulkCreateForwardingPasteTextarea').val();
            var pasteArray = WCC.utils.processPastedBulkInputIntoArray(pasteVal);

            if (pasteArray.length > this.returnAvailableUsersForPlan() )
            {
                this.showTooManyAccountsWarning(true);
                return;
            }

            // let's see if any of those accounts are invalid... cuz... you know...
            // they totally might be invalid...
            for (var k in pasteArray)
            {
                if (pasteArray[k]!="" && WCC.utils.validateEmailPrefix(pasteArray[k]) == false)
                {
                    $('#componentBulkCreationErrorPaste').text("' " + pasteArray[k] + "' " + BRAVO.Translate._("WCC_MAIN_isNotValidEmailPrefix")).html();
                    return false;
                }
            }

            for (var k in pasteArray)
            {
                this.addAccount(pasteArray[k]);
            }

            WCC.overlayer.close();
        },


        /**
         * Get the stuff from WCC.model.availableEmailPlans.get()
         * ... then filter it for forwarding accounts...
         */
        getForwardingPlans: function()
        {
            if (WCC.model.availableEmailPlans.get() == null)
            {
                return null;
            }
            var outputArray = [];

            var planArray = WCC.model.availableForwardingPlans.get();
            for (var k in planArray)
            {
                if (planArray[k]['delivery_mode'] == 'forward')
                {
                    outputArray[outputArray.length] = planArray[k];
                }
            }

            return outputArray;
        },

        returnAvailableUsersForPlan: function()
        {
            var planObjArray = this.getForwardingPlans();
            var packUid = $('#bulkCreateForwardPlanSelect').val();
            var availableUsers = 0;
            for (var k in planObjArray)
            {
                if (planObjArray[k]['pack_uid'] == packUid)
                {
                    availableUsers = planObjArray[k]['address_count'] - planObjArray[k]['used_address_count'];
                }
            }

            return availableUsers;
        },

        /**
         * The plan... it can't take that many accounts!
         *
         */
        showTooManyAccountsWarning: function(bulkMode)
        {
            var acctTxt = BRAVO.Translate._("WCC_MAIN_lcAccounts");
            if (this.returnAvailableUsersForPlan() == 1)
            {
                acctTxt = BRAVO.Translate._("WCC_MAIN_lcAccount");
            }
            var txtMsg = BRAVO.Translate._("WCC_MAIN_youOnlyHave") + this.returnAvailableUsersForPlan() + ' ' + acctTxt + BRAVO.Translate._("WCC_MAIN_availableForThisPlan");

           if (bulkMode == true)
           {
               $('#componentBulkCreationErrorPaste').html(txtMsg);
           }
           else
           {
               $('#componentBulkCreationErrorPlan').html(txtMsg);
           }

            //WCC.components.componentErrorDisplay.open('Bulk Create Fail', txtMsg, doAfterFunc);
        },


        returnDefaultPlan: function()
        {
            return defaultPlan;
        },


        /**
         * Shut up, errors!
         *
         */
        clearErrors: function()
        {
            $('#componentBulkCreationErrorPlan').html('');
            $('#componentBulkCreationErrorMisc').html('');
            $('#componentBulkCreationErrorDomain').html('');
            $('#componentBulkCreationErrorEmailAddress').html('');
        }

    };


}());



/**
 * Edit that there account!
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.editAccount = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentEditAccountDiv';
    properties.template = '#componentEditAccountTemplate';
    properties.title = BRAVO.Translate._("WCC_MAIN_editAccountTitle");

    var editAccountObj;
    var defaultTab = 0;

    var submitObj;

    // the next two funcs are for the autocomplete
    function split( val )
    {
        return val.split( /,\s*/ );
    };

    function extractLast( term ) {
    	if (undefined===term) return term;
        return split( term ).pop();
    };


    /**
     * AJAX create account success handler...
     */
    var createAccountSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true && undefined==data.error)
        {

           if(undefined !== $('#associatedAccountEmailAddress').val() ) {
               WCC.model.emailAccounts.reset(true);
               WCC.model.emailPlans.reset();
           }

           $('#'+properties.dialogDivId).dialog("close");

           if (WCC.allAccounts) {
	           WCC.allAccounts.getAllAccounts();
           }
           if (WCC.email) {
                WCC.email.resetAlertState();
	           WCC.email.getAllAccounts();

                WCC.alerts.init('email');
           }
           if (WCC.calendar) {
	           WCC.calendar.getAllAccounts();
           }
           if (WCC.off) {
	           WCC.off.getAllAccounts();
           }

           WCC.cache.deleteAttribute(submitObj.displayName, 'emailAccountDataObj');
           WCC.cache.deleteAttribute(submitObj.displayName, 'calAccountDataObj');
           WCC.cache.deleteAttribute(submitObj.displayName, 'offAccountDataObj');

           if (submitObj.emailAddress != undefined)
           {
                var accountHasBeenSaved = BRAVO.Translate._("WCC_MAIN_accountHasBeenSaved");
                accountHasBeenSaved = accountHasBeenSaved.replace('#VALUE#', WCC.utils.utf8Address(submitObj.emailAddress));

                WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), accountHasBeenSaved);

           }
           else if (submitObj.offUser != undefined)
           {
               var accountHasBeenSaved = BRAVO.Translate._("WCC_MAIN_accountHasBeenSaved");
               accountHasBeenSaved = accountHasBeenSaved.replace('#VALUE#', WCC.utils.utf8Address(submitObj.offUser));

               WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), accountHasBeenSaved);
           }
           else if (submitObj.calUser != undefined)
           {
               var accountHasBeenSaved = BRAVO.Translate._("WCC_MAIN_accountHasBeenSaved");
               accountHasBeenSaved = accountHasBeenSaved.replace('#VALUE#', WCC.utils.utf8Address(submitObj.calUser));

               WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), accountHasBeenSaved);
           }

            if (submitObj.includeEmail == true)
            {
                setTimeout(function(){WCC.components.updateWatcher.watchEmail(submitObj.emailAddress)}, 1000);
            }

            if (submitObj.includeFiles == true)
            {
                setTimeout(function(){WCC.components.updateWatcher.watchOff(submitObj.offUser)}, 1000);
            }

            if (submitObj.includeCalendar == true)
            {
                setTimeout(function(){WCC.components.updateWatcher.watchCalendar(submitObj.calUser)}, 1000);
            }

        } else {
        	handleError(data);
            return false;
        }



        return true;
    };


    /**
     * AJAX response handler for checking OFF accounts
     */
    var validateOffSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true )
        {
            if (data.validate == true)
            {
                $('#createAccountTrialUpgradeVerification').html('<span style="color: green">' + BRAVO.Translate._("WCC_MAIN_accountValidated")+ '</span>');
                $("#editSaveButton").attr('disabled', null);
            }
            else
            {
                $('#createAccountTrialUpgradeVerification').html('<span style="color: red">' + BRAVO.Translate._("WCC_MAIN_accountValidateFailed") + '</span>');
                $("#editSaveButton").attr('disabled', 'disabled');
            }
        }
    };



    /**
     * Got an error back on the create request?  better display it
     */
    var handleError = function (data) {

        WCC.spinKontrol.close();
        $("#editSaveButton").attr('disabled', null);

        WCC.components.editAccount.clearErrors();
    	for (var errorType in data.error)
        {
            for (var singleError in data.error[errorType])
            {
                switch (errorType)
                {

                    case 'ccAddress':
                        WCC.components.editAccount.openEmailTab();
                        $('#componentEditAccountErrorCC').html(data.error[errorType][singleError]);
                        break;

                    case 'password':
                        if (WCC.components.editAccount.editAccountObj['isPass'] != true)
                        {
                            WCC.components.editAccount.handleTabError('email');
                        }

                        $('#componentEditAccountErrorPassword').html(data.error[errorType][singleError]);
                        break;
                    case 'catchall':
                        WCC.components.editAccount.handleTabError('email');
                        $('#componentEditAccountErrorCatchall').html(data.error[errorType][singleError]);
                        break;
                    case 'calendar':
                        WCC.components.editAccount.handleTabError('calendar');
                        $('#componentEditAccountErrorCalendar').html(data.error[errorType][singleError]);
                        break;
                    case 'off':
                        WCC.components.editAccount.handleTabError('off');
                        $('#componentEditAccountErrorOff').html(data.error[errorType][singleError]);
                        break;
                    case 'autoResponder':
                        WCC.components.editAccount.handleTabError('email');
                        WCC.components.editAccount.handleAutoReplyClick();
                        $('#componentEditAccountErrorAutoReply').html(data.error[errorType][singleError]);
                        break;
                    default:
                        $('#componentEditAccountErrorMisc').html(data.error[errorType][singleError]);
                }
            }
    	}

    };


    return{



        openFromJS: function(displayName)
        {

            var wccCache = WCC.cache.returnCacheObject();
            var cacheData = wccCache[displayName];
            this.open(cacheData);
        },


        openFromJSByDisplayName: function(displayName)
        {
            var returnArray = WCC.cache.searchByField(WCC.cache.returnCacheObject(), 'displayName', displayName);
            this.open(returnArray[0]);
        },


        /**
         * A little tool to open from a flyout....
         * ... grabs the info from the flyoutArea data
         */
        openFromFlyout: function ()
        {
            var flyoutData = $('#flyoutArea').data('infoData');
            this.open(flyoutData);
        },

        openFromInfoRow: function (inputThis)
        {
            var infoData = $(inputThis).parent().parent().data('infoData');
            this.open(infoData);
        },


        returnUserCount: function()
        {
            var userCount = 0;
            if (this.editAccountObj.emailAddress != undefined && this.editAccountObj.emailAddress != '')
            {
                userCount++;
            }
            if (this.editAccountObj.calUser != undefined && this.editAccountObj.calUser != '')
            {
                userCount++;
            }
            if (this.editAccountObj.offUser != undefined && this.editAccountObj.offUser != '')
            {
                userCount++;
            }

            return userCount;
        },


        checkState: function()
        {
            if (WCC.components.editAccount.loading == true)
            {
                WCC.components.editAccount.renderDialog();
                setTimeout(function(){WCC.components.editAccount.checkState()}, 200);
            }

            return false;
        },


        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(editAccountObjInput)
        {
            WCC.components.editAccount.loading = true;
            WCC.components.editAccount.checkState();
            WCC.model.emailPlans.reset();
            this.editAccountObj = editAccountObjInput;

            if(this.editAccountObj && this.editAccountObj.isPass == false ) {

                var isPassMigrated = WCC.components.editAccount.isPassMigrated(this.editAccountObj.displayName);

                if(isPassMigrated== 0 || isPassMigrated < -1) {
                	//return;
                } else {
                	this.editAccountObj.isPass = true;
                	editAccountObjInput.isPass = true;
                }
            }


            // get the plan stuff
            $(document).bind('updateAvailableEmailPlans.editAccount', function(){WCC.components.editAccount.renderDialog();});
            $(document).bind('updateAvailableCalPlans.editAccount', function(){WCC.components.editAccount.renderDialog();});
            $(document).bind('updateAvailableOffPlans.editAccount', function(){WCC.components.editAccount.renderDialog();});
            $(document).bind('updateDomains.editAccount', function(){WCC.components.editAccount.renderDialog();});
            $(document).bind('updateRelayData.editAccount', function(){WCC.components.editAccount.renderDialog();});
            $(document).bind('updateOffPlans.editAccount', function(){WCC.components.editAccount.renderDialog();});
            $(document).bind('updateEmailPlans.editAccount', function(){WCC.components.editAccount.renderDialog();});
            $(document).bind('updateCalPlans.editAccount', function(){WCC.components.editAccount.renderDialog();});

            if (this.editAccountObj.emailAddress != undefined && this.editAccountObj.emailAccountDataObj == undefined)
            {
                $(document).bind('emailAccountDataUpdate.editAccount', function(){WCC.components.editAccount.renderDialog();});
                WCC.emailAccount.getEmailAccountData(this.editAccountObj.emailAddress);
            }
            else if (this.editAccountObj.emailAddress == undefined)
            {
                this.editAccountObj.emailAccountDataObj = {};
            }

            if (this.editAccountObj.calUser != undefined && this.editAccountObj.calAccountDataObj == undefined)
            {
                $(document).bind('calAccountDataUpdate.editAccount', function(){WCC.components.editAccount.renderDialog();});
                WCC.calAccount.getCalAccountData(this.editAccountObj.calUser);
            }

            if (this.editAccountObj.offUser != undefined && this.editAccountObj.offAccountDataObj == undefined)
            {
                $(document).bind('offAccountDataUpdate.editAccount', function(){WCC.components.editAccount.renderDialog();});
                WCC.offAccount.getOffAccountData(this.editAccountObj.offUser);
            }

            this.editAccountObj.autoReply = {};

            $('#componentEditAccountDiv').remove();

            var newDiv = document.createElement('div');
            newDiv.id = properties.dialogDivId;
            $(document.body).append(newDiv);
            WCC.utils.centerThisDialog(properties.dialogDivId);

            //WCC.utils.showLoading(properties.dialogDivId);


            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 548,
                minHeight : 300,
                title: properties.title
            });
            WCC.utils.centerThisDialog(properties.dialogDivId);

             $('#'+properties.dialogDivId).dialog({
               close: function(event, ui)
               {
                    $(document).unbind('.editAccount');

                    $('#componentEditAccountDiv').remove();
                    WCC.utils.detatchToolTip();
                }
            });


            // open it...
            $('#'+properties.dialogDivId).dialog("open");
            WCC.utils.centerThisDialog(properties.dialogDivId);
            WCC.spinKontrol.open('componentEditAccountDiv');

            this.renderDialog();
            WCC.utils.centerThisDialog(properties.dialogDivId);

            // do some stuff... get some stuff...
            WCC.model.availableEmailPlans.get();
            WCC.model.availableCalPlans.get();
            WCC.model.availableOffPlans.get();
            WCC.model.domains.get();
            WCC.model.relayData.get();
            WCC.model.calPlans.get();
            WCC.model.offPlans.get();
            //WCC.model.emailPlans.reset();
            WCC.model.emailAccounts.get();
            $(window).resize(function(){WCC.components.editAccount.orientDialog();});
            WCC.utils.centerThisDialog(properties.dialogDivId);



            return true;
        },





        /**
         * Render the dialog...
         *
         */
        renderDialog: function()
        {
            var renderedOutput = null;
            if (WCC.model.availableEmailPlans.get() == null)
            {
                return;
            }
            if (WCC.model.availableCalPlans.get() == null)
            {
                return;
            }
            if (WCC.model.availableOffPlans.get() == null)
            {
                return;
            }
            if (WCC.model.domains.get() == null)
            {
                return;
            }
            if (WCC.model.relayData.get() == null)
            {
                return;
            }
            if (WCC.model.calPlans.get() == null)
            {
                return;
            }
            if (WCC.model.offPlans.get() == null)
            {
                return;
            }
            if (WCC.model.emailPlans.get() == null)
            {
                return;
            }
            if (WCC.model.emailAccounts.get() == null)
            {
                return;
            }


            if (this.editAccountObj == undefined)
            {
                 WCC.components.editAccount.closeDialog();
                    WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_pleaseWait"), BRAVO.Translate._("WCC_MAIN_pleaseWaitAMomement"), function(){});
                    //WCC.cache.deleteAttribute(this.editAccountObj.emailAddress,'emailAccountDataObj')
                    return;

            }

            if (this.editAccountObj.emailAddress != undefined && this.editAccountObj.emailAccountDataObj === undefined)
            {
                var cacheObj = WCC.cache.getByKey(this.editAccountObj.realName);

                if (cacheObj.emailAccountDataObj === undefined)
                {
                    return;
                }

                this.editAccountObj.emailAccountDataObj = cacheObj.emailAccountDataObj;
                for (var ePlan in WCC.model.emailPlans.get()) {
                	if (WCC.model.emailPlans.get()[ePlan].pack_id == this.editAccountObj.pack_id) {
                		this.editAccountObj.pack_uid = WCC.model.emailPlans.get()[ePlan].pack_uid;
                	}
                }
            }

            if (this.editAccountObj.calUser != undefined && this.editAccountObj.calAccountDataObj === undefined)
            {
                var cacheObj = WCC.cache.getByKey(this.editAccountObj.realName);
                if (cacheObj.calAccountDataObj === undefined)
                {
                    return;
                }

                this.editAccountObj.calAccountDataObj = cacheObj.calAccountDataObj;
            }

            if (this.editAccountObj.offUser != undefined && this.editAccountObj.offAccountDataObj === undefined)
            {
                var cacheObj = WCC.cache.getByKey(this.editAccountObj.realName);
                if (cacheObj.offAccountDataObj === undefined)
                {
                    return;
                }

                this.editAccountObj.offAccountDataObj = cacheObj.offAccountDataObj;
            }
            for(var idx in WCC.model.calPlans.get()) {
            	//WCC.model.calPlans.get()[idx]['settings']['t_friendly_name'] = BRAVO.Translate._(WCC.model.calPlans.get()[idx]['settings']['friendly_name']);
            	WCC.model.calPlans.get()[idx]['settings']['t_friendly_name'] = WCC.model.calPlans.get()[idx]['settings']['friendly_name'];
            }

            if(this.editAccountObj.offAccountDataObj) {
	        	var list = WCC.model.emailAccounts.get();
	        	this.editAccountObj.emailList = [];
	        	for(var cacheItem in list) {
	    			var offUserExists = true;
	        		var accountMatches = false;

	        		if(undefined === list[cacheItem].offUser) {
	        			offUserExists = false;
	        		} else {
	        			if (list[cacheItem].offUser == this.editAccountObj.offAccountDataObj.offUser) {
	        				accountMatches = true;
	        			}
	        		};

	        		if( (!offUserExists || accountMatches ) && list[cacheItem].delivery_mode && list[cacheItem].delivery_mode == 'local') {
	        			this.editAccountObj.emailList.push(list[cacheItem]['displayName']);
	        		}
	        	}
	        	this.editAccountObj.emailList.sort();
            }
            WCC.spinKontrol.close();

            WCC.spinKontrol.close();


            WCC.components.editAccount.loading = false;

            if(typeof(this.editAccountObj.emailAccountDataObj) == "undefined") {
            	this.editAccountObj.emailAccountDataObj = {};
            }
            renderedOutput =  $('#componentEditAccountTemplate').tmpl(this.editAccountObj);
            WCC.components.tempTemplate = renderedOutput;
            var editAccountDiv = $('#componentEditAccountDiv');

            editAccountDiv
                .html(renderedOutput)
                .dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);


            if(typeof(this.editAccountObj.emailAccountDataObj) != "undefined" && typeof(this.editAccountObj.emailAccountDataObj.hostedExchange) != "undefined")
            {
                 $("#componentEditAccountDiv").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_managedByHostedExchange"), style:null});
                $('.sf-msg-overlay').css('z-index', 100005);
                return;
            }
            // attach click events
            editAccountDiv.find('#advancedToggler')
                .click(function(){WCC.components.editAccount.toggleAdditionalOptions();})
                .click(function(){WCC.components.editAccount.setPin();});

            editAccountDiv.find('#editAccountAutoReplyToggler').click(function(){WCC.components.editAccount.toggleAutoReply();return false;});

            if (this.editAccountObj.calAccountDataObj != undefined)
            {
                $('#editAccountSelectCalPlan').val(this.editAccountObj.calAccountDataObj.accountUid);
            }

            if (this.editAccountObj.emailAccountDataObj)
            {
            	for (var ePlan in WCC.model.emailPlans.get() ) {
            		if (this.editAccountObj.emailAccountDataObj.pack_id == WCC.model.emailPlans.get()[ePlan].pack_id ) {
                        $('#editAccountEmailPlanSelect').val(WCC.model.emailPlans.get()[ePlan].pack_uid);
            		}
            	}

            }

            if (WCC.userSettings.get('editAccountAdditionalOptionsVisible') == "true")
            {
                this.toggleAdditionalOptions();
            }

            WCC.utils.centerThisDialog(properties.dialogDivId);

            WCC.components.datePicker.add($("#editAccountAutoReplyStart") );
            WCC.components.datePicker.add( $("#editAccountAutoReplyEnd") );




            // make some tabs!
            editAccountDiv.find("#editAccountPopinTabs").tabs({}); // selected: defaultTab @TODO fix

            //now attach the real change events
            // attach some behaviors
            var cCA = $('#editAccountPopinTabs');

            cCA.find('#editAccountEmailPlanSelect').change(function(){WCC.components.editAccount.handleQuotaForEmailPlanSwitch();});
            cCA.find('#editAccountIncludeEmail').change(function(){WCC.components.editAccount.handleQuotaForEmailPlanSwitch();});

            cCA.find('#editAccountSendEmailTo').change(function(altEvent){WCC.components.editAccount.handleCCDisplay(altEvent);})
            	.focus(function(altEvent){WCC.components.editAccount.handleCCDisplay(altEvent);})
            	.blur(function(altEvent){WCC.components.editAccount.handleCCDisplay(altEvent);});

            cCA.find('#editSetupInstructionEmail').change(function(altEvent){WCC.components.editAccount.handleSendInstructionsDisplay(altEvent);})
        	.focus(function(altEvent){WCC.components.editAccount.handleSendInstructionsDisplay(altEvent);})
        	.blur(function(altEvent){WCC.components.editAccount.handleSendInstructionsDisplay(altEvent);});

            cCA.find('#editAccountAutoReplySourceChoiceDefault').change(function(altEvent){WCC.components.editAccount.handleAutoReplyFromDisplay(altEvent);});
            cCA.find('#editAccountAutoReplySourceChoiceOther').change(function(altEvent){WCC.components.editAccount.handleAutoReplyFromDisplay(altEvent);});
            cCA.find('#editAccountAutoReplySubjectChoiceOriginalSubject').change(function(altEvent){WCC.components.editAccount.handleAutoReplySubjectDisplay(altEvent);});
            cCA.find('#editAccountAutoReplySubjectChoiceOtherSubject').change(function(altEvent){WCC.components.editAccount.handleAutoReplySubjectDisplay(altEvent);});
            cCA.find('#editSetupInstructionHide').click(function(){$('#editSetupInstructionInput').hide();$('#editSetupInstructionPrompt').show();});
            cCA.find('#editSetupInstructionShow').click(function(){$('#editSetupInstructionInput').show();$('#editSetupInstructionPrompt').hide();});
            //cCA.find('#advancedToggler').click(function(){WCC.components.editAccount.toggleAdditionalOptions();});
            cCA.find('#autoReplyToggler').click(function(){WCC.components.editAccount.toggleAutoReply();});
            $('#editAccountEnableAutoReply').click(function(){WCC.components.editAccount.handleAutoReplyClick();});

            cCA.find('#purchaseCalendarLink').click(function(){window.open('/productpurchase?product=calendar');});
            cCA.find('#purchaseOffLink').click(function(){window.open('/productpurchase?product=off');});

            editAccountDiv.find('#editAccountIncludeEmail').change(function(){WCC.components.editAccount.handleAccountClick(this);});
            editAccountDiv.find('#editAccountIncludeCalendar').click(function(){WCC.components.editAccount.handleAccountClick(this);});
            editAccountDiv.find('#editAccountIncludeFiles').click(function(){WCC.components.editAccount.handleAccountClick(this);});

            editAccountDiv.find("#createAccountsTrialValidate").click(function(){WCC.components.editAccount.doOffTrialValidation();});


            $('#createAccountTrialArea').hide();

            WCC.components.editAccount.handleQuotaForEmailPlanSwitch();
            //attach the generic tooltip
            WCC.utils.attachToolTip('tip');

            if ($('#editAccountSendEmailTo').length > 0)
            {
                $('#editAccountSendEmailTo').limit('250','#charsLeft');
            }

            var tabIndex={};
            var myList = $("#editAccountPopinTabs > ul > li > a");
            for (var tindex in myList) {
            	if(jQuery.isNumeric(tindex)) {
                	tabIndex[$(myList[tindex]).attr('href')]=tindex;
            	}
            }

            // so... this controls which tab is open
            switch (primaryThing)
            {
                case 'cal':
                    defaultTab = tabIndex['#calendarTab'];
                    break;
                case 'off':
                    defaultTab = tabIndex['#filesTab'];
                    break;
                default:
                    defaultTab = tabIndex['#emailTab'];
            }


            var emailChecked = false;
            var calendarChecked = false;
            var offChecked = false;

            if ($("#editAccountIncludeEmail").prop('checked') == true)
            {
                emailChecked = true;
            }
            if ($("#editAccountIncludeCalendar").prop('checked') == true)
            {
                calendarChecked = true;
            }
            if ($("#editAccountIncludeFiles").prop('checked') == true)
            {
                offChecked = true;
            }

            // the initial tab?
            if (defaultTab == tabIndex['#emailTab'] && emailChecked != true )
            {
                if (calendarChecked == true)
                {
                    defaultTab = tabIndex['#calendarTab'];
                }
                else if (offChecked == true)
                {
                    defaultTab = tabIndex['#filesTab'];
                }
            }

            else if (defaultTab == tabIndex['#calendarTab'] && calendarChecked != true )
            {
                if (emailChecked == true)
                {
                    defaultTab = tabIndex['#emailTab'];
                }
                else if (offChecked == true)
                {
                    defaultTab = tabIndex['#filesTab'];
                }
            }

            else if (defaultTab == tabIndex['#filesTab'] && offChecked != true )
            {
                if (emailChecked == true)
                {
                    defaultTab = tabIndex['#emailTab'];
                }
                else if (calendarChecked == true)
                {
                    defaultTab = tabIndex['#calendarTab'];
                }
            }

            // disable checkboxes?
            if (WCC.model.availableEmailPlans.get().length == 0 && emailChecked != true)
            {
                $('#editAccountIncludeEmail').attr('disabled','disabled')
            }
            if (WCC.model.availableCalPlans.get().length == 0  && calendarChecked != true)
            {
                $('#editAccountIncludeCalendar').attr('disabled','disabled')
            }
            if (WCC.model.availableOffPlans.get().length == 0 && offChecked != true)
            {
                $('#editAccountIncludeFiles').attr('disabled','disabled')
            }



            //editAccountDiv.find("#editAccountPopinTabs").tabs({}); // selected: defaultTab @TODO fix
            editAccountDiv.find("#editAccountPopinTabs").tabs('select', parseInt(defaultTab));

            $('#createAccountTrialUpgradeOk').click(function(){WCC.components.editAccount.handleTrialUpgradeClick();});

            //password validator
            WCC.components.editAccount.attachStarfieldPasswordValidator();
            WCC.placeholder.attach('componentEditAccountDiv');

            // handle the tabs... this is for pass, mostly
            WCC.components.editAccount.handleProducts();

            // finally, make sure everything is where it's supposed to be
            WCC.components.editAccount.orientDialog();
            WCC.utils.centerThisDialog(properties.dialogDivId);

        },

        /**
         * Expand or contract the account trial on click...
         */
        handleTrialUpgradeClick: function()
        {
            if ($('#createAccountTrialUpgradeOk').is(':checked') )
                {
                    $("#editSaveButton").attr('disabled', 'disabled');

                }
                else
                {
                    $("#editSaveButton").attr('disabled', null);
                }

            $('#createAccountTrialArea').slideToggle("slow", function(){


            });
        },


        /**
         * Off trial validator...
         * You can do this asynchronous / sync...
         *
         * We do sync during pre-submission validation
         *
         */
        doOffTrialValidation: function(doForSubmit)
        {
            var offTrialSubmitObj = {};
            offTrialSubmitObj.offUser = $('#createAccountOffAddress').val();
            offTrialSubmitObj.offPassword = $('#createOffPassword1').val();
            offTrialSubmitObj.postToken = Globals.POST_TOKEN;

            var that = this;

            if (doForSubmit == true)
            {
                $.ajax({
                    type: "POST",
                    url: 'ajaxfiles/validateaccount/',
                    dataType : 'json',
                    data: offTrialSubmitObj,
                    success : that.submit,
                    error :  handleError
                });
            }
            else
            {
                 $.ajax({
                    type: "POST",
                    url: 'ajaxfiles/validateaccount/',
                    dataType : 'json',
                    data: offTrialSubmitObj,
                    success : validateOffSuccess,
                    error :  handleError
                });
            }
        },


        /**
         * This is what happens when a user clicks OK, I want to delete
         * that thing.
         *
         * Expects a jQuery object
         * @TODO - template!
         */
        handleAccountDelete: function(clickedThing)
        {
            clickedThing.attr('checked', false);

            // well... cool. Let's delete that badboy then...
            if ( clickedThing.attr('id') == 'editAccountIncludeEmail')
            {
                $("#emailTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_deleteEmail") + '<br/><a href="#" onclick="WCC.components.editAccount.handleAccountUndelete($(\'#editAccountIncludeEmail\'));return false;">' + BRAVO.Translate._("WCC_MAIN_DeleteUndo") + '</a>', style:null});
                $('.sf-msg-overlay').css('z-index', 100005);
                WCC.components.editAccount.openEmailTab();
                WCC.components.editAccount.handleTabError('email');
            }
            else if ( clickedThing.attr('id') == 'editAccountIncludeCalendar')
            {
                $("#calendarTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_deleteCalendar") + '<br/><a href="#" onclick="WCC.components.editAccount.handleAccountUndelete($(\'#editAccountIncludeCalendar\'));return false;">' + BRAVO.Translate._("WCC_MAIN_DeleteUndo") + '</a>', style:null});
                $('.sf-msg-overlay').css('z-index', 100005);
                WCC.components.editAccount.openCalTab();
                WCC.components.editAccount.handleTabError('calendar');
            }
            else if ( clickedThing.attr('id') == 'editAccountIncludeFiles')
            {
                $("#filesTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_deleteOnlineStorage") + '<br/><a href="#" onclick="WCC.components.editAccount.handleAccountUndelete($(\'#editAccountIncludeFiles\'));return false;">' + BRAVO.Translate._("WCC_MAIN_DeleteUndo") + '</a>', style:null});
                $('.sf-msg-overlay').css('z-index', 100005);
                WCC.components.editAccount.openOffTab();
                WCC.components.editAccount.handleTabError('off');
            }
        },


        /**
         * This is what happens when one undeletes an account
         *
         */
        handleAccountUndelete: function (clickedThing)
        {
            var clickedId = clickedThing.attr('id');
            clickedThing.attr('checked','checked');

            if (clickedId == 'editAccountIncludeEmail')
            {
                $("#emailTab").sfMsgOverlay({message: null});
                WCC.components.editAccount.openEmailTab();
                WCC.components.editAccount.removeTabError('email');
            }
            else if (clickedId == 'editAccountIncludeCalendar')
            {
                $("#calendarTab").sfMsgOverlay({message: null});
                WCC.components.editAccount.openCalTab();
                WCC.components.editAccount.removeTabError('calendar');
            }
            else if (clickedId == 'editAccountIncludeFiles')
            {
                $("#filesTab").sfMsgOverlay({message: null});
                WCC.components.editAccount.openOffTab();
                WCC.components.editAccount.removeTabError('off');
            }
        },


        /**
         * This is what happens when a user clicks and creates an account
         */
        handleAccountCreate: function (clickedThing)
        {
            clickedThing.attr('checked','checked');

            if (clickedThing.attr('id') == 'editAccountIncludeEmail')
            {
                $("#emailTab").sfMsgOverlay({message: null});
                WCC.components.editAccount.openEmailTab();
            }

            if (clickedThing.attr('id') == 'editAccountIncludeCalendar')
            {
                $("#calendarTab").sfMsgOverlay({message: null});
                WCC.components.editAccount.openCalTab();
            }

            if (clickedThing.attr('id') == 'editAccountIncludeFiles')
            {
                $("#filesTab").sfMsgOverlay({message: null});
                WCC.components.editAccount.openOffTab();
            }

            return false;
        },


        /**
         * Handle what the tabs have got going on in terms of stuff
         *
         */
        handleProducts: function(clickedThing)
        {
            if (this.editAccountObj.isPass != true)
            {
                return;
            }

            if (clickedThing == undefined)
            {
                var clickedThing = 'all';
            }

            var emailChecked = false;
            var calendarChecked = false;
            var offChecked = false;

            if ($("#editAccountIncludeEmail").prop('checked') == true)
            {
                emailChecked = true;
            }
            if ($("#editAccountIncludeCalendar").prop('checked') == true)
            {
                calendarChecked = true;
            }
            if ($("#editAccountIncludeFiles").prop('checked') == true)
            {
                offChecked = true;
            }

            if (clickedThing == 'all' || clickedThing.attr('id') == 'editAccountIncludeEmail')
            {
                if (this.editAccountObj.emailAccountDataObj && emailChecked == true)
                {
                  $("#emailTab").sfMsgOverlay({message: null});
                }
                else if (emailChecked == true && WCC.model.availableEmailPlans.get() > 0)
                {
                    $("#emailTab").sfMsgOverlay({message: null});
                }
                else if (emailChecked == true && WCC.model.availableEmailPlans.get() == 0)
                {
                    $("#emailTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noMoreEmailAccounts") + '<br/>' + BRAVO.Translate._("WCC_MAIN_pleaseBuyMoreEmail"), style:null});
                    $('.sf-msg-overlay').css('z-index', 100005);
                    if (WCC.utils.isIE() )
                    {
                        $("#emailTab").find('.sf-msg-overlay').click(function(){window.open('/productpurchase?product=email', '_blank');return false});
                    }
                }
                else if (emailChecked == false)
                {
                    $("#emailTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_haveNotAddedEmail") + ' <a  href="#" onclick="WCC.components.editAccount.handleAccountCreate($(\'#editAccountIncludeEmail\')); return false;">' + BRAVO.Translate._("WCC_MAIN_addNow") + '</a>', style:null});
                    $('.sf-msg-overlay').css('z-index', 100005);
                }
            }

            if (clickedThing == 'all' || clickedThing.attr('id')  == 'editAccountIncludeCalendar')
            {
                if (this.editAccountObj.calAccountDataObj && calendarChecked == true )
                {
                  $("#calendarTab").sfMsgOverlay({message: null});
                }
                else if (calendarChecked == true && WCC.model.availableCalPlans.get() > 0)
                {
                    $("#calendarTab").sfMsgOverlay({message: null});
                }
                else if (calendarChecked == true && WCC.model.availableCalPlans.get() == 0)
                {
                    $("#calendarTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noMoreCalendarAccounts") + '<br/><a id="buyCalendarLink" href="/productpurchase?product=calendar" target="_blank" >' + BRAVO.Translate._("WCC_MAIN_buyMore") + '</a>', style:null});
                    $('.sf-msg-overlay').css('z-index', 100005);
                    if (WCC.utils.isIE() )
                    {
                        $("#calendarTab").find('.sf-msg-overlay').click(function(){window.open('/productpurchase?product=calendar', '_blank');return false});
                    }
                }
                else if (calendarChecked == false)
                {
                    $("#calendarTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_haveNotAddedCalendar") + ' <a  href="#" onclick="WCC.components.editAccount.handleAccountCreate($(\'#editAccountIncludeCalendar\')); return false;">'+BRAVO.Translate._("WCC_MAIN_addNow")+'</a>', style:null});
                    $('.sf-msg-overlay').css('z-index', 100005);
                }
            }

            if (clickedThing == 'all' || clickedThing.attr('id')  == 'editAccountIncludeFiles')
            {

                if (this.editAccountObj.offAccountDataObj && offChecked == true )
                {
                  $("#filesTab").sfMsgOverlay({message: null});
                }

                else if (offChecked == true && WCC.model.availableOffPlans.get().length > 0 )
                {
                    $("#filesTab").sfMsgOverlay({message: null});
                }
                else if (  WCC.model.availableOffPlans.get().length == 0)
                {
                    $("#filesTab").sfMsgOverlay({message: BRAVO.Translate._("WCC_MAIN_noOnlineStorageOwned") + ' <a id="buyOnlineStorageLink" href="/productpurchase?product=off" target="_blank" >' + BRAVO.Translate._("WCC_MAIN_buyOneNow") +'</a>', style:null});
                    $('.sf-msg-overlay').css('z-index', 100005);
                    if (WCC.utils.isIE() )
                    {
                        $("#filesTab").find('.sf-msg-overlay').click(function(){window.open('/productpurchase?product=off', '_blank');return false});
                    }
                }
                else if (offChecked == false )
                {
                    $("#filesTab").sfMsgOverlay({message:  BRAVO.Translate._("WCC_MAIN_haveNotAddedOnlineStorage")+' <a href="#" onclick="WCC.components.editAccount.handleAccountCreate($(\'#editAccountIncludeFiles\')); return false;">' + BRAVO.Translate._("WCC_MAIN_addNow") + '</a>', style:null});
                    $('.sf-msg-overlay').css('z-index', 100005);
                }

            }

            if(clickedThing.attr) {
	            if(clickedThing.attr('id')  == 'editAccountIncludeEmail') {
	                $("#editAccountPopinTabs").tabs('select',0);
	            } else if(clickedThing.attr('id')  == 'editAccountIncludeCalendar') {
	                $("#editAccountPopinTabs").tabs('select',1);
	            } else if(clickedThing.attr('id')  == 'editAccountIncludeFiles') {
	                $("#editAccountPopinTabs").tabs('select',2);
	            }
            }

        },


        /**
         * Handle the clicking / unclicking of accounts
         *
         * We want to add a warning on accounts about to get deleted
         * ... and remove it from those that aren't.
         *
         * @TODO - template? Simplify?
         */
        handleAccountClick: function(clickThing)
        {
            var clickedThing = $(clickThing);
            var clickedId = clickedThing.attr('id');

            WCC.components.editAccount.handleProducts(clickedThing);

            // email
            if (clickedId == 'editAccountIncludeEmail' && this.editAccountObj.emailAccountDataObj != undefined && jQuery.isEmptyObject(this.editAccountObj.emailAccountDataObj) == false && !$('#editAccountIncludeEmail').is(':checked'))
            {
                WCC.components.editAccount.handleAccountDelete(clickedThing);
                return false;
            }
            else if (clickedId == 'editAccountIncludeEmail' && this.editAccountObj.emailAccountDataObj != undefined && jQuery.isEmptyObject(this.editAccountObj.emailAccountDataObj) == false)
            {
                WCC.components.editAccount.handleAccountUndelete(clickedThing);
                return false;
            }
            else if (clickedId == 'editAccountIncludeEmail' && $('#editAccountIncludeEmail').is(':checked') )
            {
                WCC.components.editAccount.handleAccountCreate(clickedThing);
                return true;
            }
            else if (clickedId == 'editAccountIncludeEmail' && !$('#editAccountIncludeEmail').is(':checked') )
            {
                return true;
            }

            // calendar
            else if (clickedId == 'editAccountIncludeCalendar' && this.editAccountObj.calAccountDataObj != undefined && !$('#editAccountIncludeCalendar').is(':checked'))
            {
                WCC.components.editAccount.handleAccountDelete(clickedThing);
                return false;
            }
            else  if (clickedId == 'editAccountIncludeCalendar' && this.editAccountObj.calAccountDataObj != undefined)
            {
                WCC.components.editAccount.handleAccountUndelete(clickedThing);
                return false;
            }
            else if (clickedId == 'editAccountIncludeCalendar' && this.editAccountObj.calAccountDataObj === undefined && $('#editAccountIncludeCalendar').is(':checked') )
            {
                WCC.components.editAccount.handleAccountCreate(clickedThing);
                return true;
            }
            else if (clickedId == 'editAccountIncludeCalendar' && this.editAccountObj.calAccountDataObj === undefined && !$('#editAccountIncludeCalendar').is(':checked') )
            {
                return true;
            }


            // off
            else if (clickedId == 'editAccountIncludeFiles' && this.editAccountObj.offAccountDataObj != undefined && !$('#editAccountIncludeFiles').is(':checked'))
            {
                WCC.components.editAccount.handleAccountDelete(clickedThing);
                return false;
            }
            else if (clickedId == 'editAccountIncludeFiles' && this.editAccountObj.offAccountDataObj)
            {
                WCC.components.editAccount.handleAccountUndelete(clickedThing);
                return false;
            }
            else if (clickedId == 'editAccountIncludeFiles' && this.editAccountObj.offAccountDataObj === undefined && $('#editAccountIncludeFiles').is(':checked') )
            {
                WCC.components.editAccount.handleAccountCreate(clickedThing);
                return true;
            }
            else if (clickedId == 'editAccountIncludeFiles' && this.editAccountObj.offAccountDataObj === undefined && !$('#editAccountIncludeFiles').is(':checked') )
            {
                return true;
            }
        },



        /**
         * Starfield Password validation
         */
        attachStarfieldPasswordValidator: function()
        {
            if ($.fn.sfValidator)
            {
            	attachSfPasswordValidator();
            }
            else
            {
                require("starfield/sf.validator", function () {
                    attachSfPasswordValidator();
                });
            }

	        /**
	         * Attach the password validator the the password field
	         * in need of validation
	         */
	        function attachSfPasswordValidator()
	        {

                     $.fn.sfValidator.rules.checkLength.msg = function(c,g){return BRAVO.Translate._("WCC_Main_passValidateCheckLength");};
                    $.fn.sfValidator.rules.startLetter.msg = function(c,g){return BRAVO.Translate._("WCC_Main_passValidateStartLetter");};


	            // validate password
	            $("#editAccountPassword1").sfValidator({
	              title: BRAVO.Translate._("WCC_MAIN_passwordCriteria"),
	              minLength: 5, maxLength: 32,
              	inputExp: /[^\sa-zA-z0-9\!\@\#\$\%\^\&\*\(\)\-\=\_\+\[\]\{\}\;\:\'\"\,\<\.\>\/\?].*?/gi,
	              rules: [
	                  $.fn.sfValidator.rules.checkLength //,
	                  //$.fn.sfValidator.rules.startLetter
	              ]
	            });

	            $("#editOffAccountPassword1").sfValidator({
					title: BRAVO.Translate._("WCC_MAIN_passwordCriteria"),
					minLength: 5, maxLength: 32,
	            	inputExp: /[^\sa-zA-z0-9\!\@\#\$\%\^\&\*\(\)\-\=\_\+\[\]\{\}\;\:\'\"\,\<\.\>\/\?].*?/gi,
					rules: [
						$.fn.sfValidator.rules.checkLength// ,
						// $.fn.sfValidator.rules.startLetter
					]

				});

	    	}
        },


        /**
         * Password validation
         */
        checkPassword: function()
        {
            var passValidate = WCC.utils.validatePassword($('#editAccountPassword1').val() , $('#editAccountPassword2').val() );
            if (passValidate == true)
            {
                $('#editAccountPasswordOK').html('<span class="ok-icon"></span>');
                $('#editAccountPassword1Label1').removeClass('attention');
                $('#editAccountPassword1Label2').removeClass('attention');
            }
            else
            {
                $('#editAccountPasswordOK').html('<span class="notok-icon"></span> ' + passValidate);
            }
        },


        /**
         * Handler for the email plan dropdown... switches the text next to the quota box
         *
         */
        handleQuotaForEmailPlanSwitch: function()
        {
            var planVal = $('#editAccountEmailPlanSelect').val();
            var planObj = this.getEmailPlanByPackUid(planVal);
            if (planObj['unlimited_quota'] == true || planObj['max_size'] >= 30720000)
            {
            	$('#emailPlanQuotaAmount').html(BRAVO.Translate._("WCC_MAIN_unlimitedPlan"));
            	$('#editAccountQuota').attr('disabled', 'disabled');
            	$('#editAccountUseEmailQuota').attr('disabled', 'disabled');
            	$('#editAccountQuota').hide();
                $('#editAccountQuota').val( -1 );
            	$('#editAccountUseEmailQuota').hide();
            }
            else
            {
                var availableQuotaMb = (planObj['max_size'] - (isNaN(planObj['used_quota'])? 0 : planObj['used_quota']))/1024 + planObj['addl_disk_space_mb'];
                var unusedAddresses = planObj['address_count'] - planObj['used_address_count'];
                var avgSpace = Math.round(availableQuotaMb / unusedAddresses);
                if (avgSpace == Infinity) {
                	avgSpace = planObj['max_size']/1024 + planObj['addl_disk_space_mb'];
                }

                if ($("#editAccountQuota").val()>0) {

                } else {
                    $('#editAccountQuota').val( avgSpace );
                }
                $('#emailPlanQuotaAmount').html(Math.round(availableQuotaMb) + ' MB ' + BRAVO.Translate._("WCC_MAIN_available"));
            	$('#editAccountQuota').removeAttr('disabled');
            	$('#editAccountUseEmailQuota').removeAttr('disabled');
            	$('#editAccountQuota').show();
            	$('#editAccountUseEmailQuota').show();

            }

            // change out the alt on the checkbox
            var planString = planObj['pack_name'] + ' (' + planObj['used_address_count'] + '/' + planObj['address_count'] + ') - ' + BRAVO.Translate._("WCC_MAIN_exp") + ':' + date(WCC.format.date, planObj['expire_date_timestamp']);

            $('#editAccountIncludeEmail').attr('title', planString);
            $('#editAccountIncludeEmailLabel').attr('title', planString);
        },


        /**
         * handle the CC display attributes and values
         */
        handleCCDisplay: function (altEvent)
        {
        	//focus
        	if(altEvent && altEvent.type && altEvent.type=="focus" && $("#editAccountSendEmailTo").val() == "(" + BRAVO.Translate._("WCC_MAIN_separateWithCommas") + ")") {
        		$("#editAccountSendEmailTo").val("");
        	}
        	//blur
        	if(altEvent && altEvent.type && altEvent.type=="blur" && $("#createAccountSendEmailTo").val() == "") {
        		$("#editAccountSendEmailTo").val("("+BRAVO.Translate._("WCC_MAIN_separateWithCommas")+")");
        	}

        	//set the text class
        	if ($("#editAccountSendEmailTo").val() == "("+BRAVO.Translate._("WCC_MAIN_separateWithCommas")+")") {
        		$("#editAccountSendEmailTo").addClass("exampleText");
        	} else {
        		$("#editAccountSendEmailTo").removeClass("exampleText");
        	}
        },



        /**
         * handle the autoReply 'from' display attributes and values
         */
        handleAutoReplyFromDisplay: function (altEvent)
        {
        	//focus
        	var target = "#" + altEvent.target.id;
        	var cSIE = $("#editAccountAutoReplySourceChoiceOther");
        	var field = $("#editAccountAutoReplySourceEmail");
        	//set the text class
        	if (cSIE.prop("checked")) {
        		field.removeClass("exampleText")
        			.removeAttr("disabled");
        	} else {
        		field.addClass("exampleText")
        			.attr("disabled", "disabled");
        	}
        },


        /**
         * handle the autoReply 'subject' display attributes and values
         */
        handleAutoReplySubjectDisplay: function (altEvent)
        {
        	//focus
        	var target = "#" + altEvent.target.id;
        	var cARS = $("#editAccountAutoReplySubjectChoiceOtherSubject");
        	var field = $("#editAccountAutoReplySubject");
        	//set the text class
        	if (cARS.prop("checked")) {
        		field.removeClass("exampleText")
        			.removeAttr("disabled");
        	} else {
        		field.addClass("exampleText")
        			.attr("disabled", "disabled");
        	}
        },


        /**
         * Expand
         */
        handleAutoReplyClick: function()
        {
            var myDiv = $('#componentEditAccountDiv');
            if ($('#editAccountEnableAutoReply').is(':checked') && myDiv.find('#editAccountAutoReplyToggler').hasClass('show-button') )
            {
            	myDiv.find("#editAccountAutoReplyToggler").addClass('hide-button');
            	myDiv.find("#editAccountAutoReplyToggler").removeClass('show-button');
                $("#editAccountAutoReplyContainer").slideToggle("slow");
            }
        },


        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            WCC.utils.detatchToolTip();
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        },


        /**
        * Move the dialog to the right place
        */
        orientDialog: function()
        {
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );

            // fix for ie 9
            var newLeft  =  ($(document).width() - 548) / 2;
            //$('#componentServerSettingDiv').parent().css('left', newLeft + 'px');
            WCC.utils.centerThisDialog(properties.dialogDivId);

        },


        /**
         * Open or close the auto reply
         */
        toggleAutoReply: function()
        {
            $("#editAccountAutoReplyContainer").slideToggle("slow");
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);


            if ($("#editAccountAutoReplyToggler").hasClass('show-button')) {
            	$("#editAccountAutoReplyToggler").addClass('hide-button');
            	$("#editAccountAutoReplyToggler").removeClass('show-button');
            } else {
            	$("#editAccountAutoReplyToggler").removeClass('hide-button');
            	$("#editAccountAutoReplyToggler").addClass('show-button');
            }

            return false; //Prevent the browser jump to the link anchor
        },


        /**
         * Pin the additional options open
         * ... or closed. Or whatever.
         */
        setPin: function()
        {
            // get the current state of this thing...
            var currentDisplay = $('.additional-options-hider').css('display');
            if (currentDisplay == "none")
            {
                WCC.userSettings.set('editAccountAdditionalOptionsVisible', "false");
            }
            else
            {
                WCC.userSettings.set('editAccountAdditionalOptionsVisible', "true");
            }
        },


        /**
         * Some things to get plans by pack / account uid
         */
        getEmailPlanByPackUid: function(packUid)
        {
            var planObj = WCC.cache.searchByField(WCC.model.emailPlans.get(),'pack_uid', packUid);
            return planObj[0];
        },
        getCalPlanByAccountUid: function(accountUid)
        {
            var planObj = WCC.cache.searchByField(WCC.model.calPlans.get(),'accountUid', accountUid);
            return planObj[0];
        },
        getOffPlanByAccountUid: function (accountUid)
        {
            var planObj = WCC.cache.searchByField(WCC.model.offPlans.get(),'accountUid', accountUid);
            return planObj[0];
        },


        /**
         * Toggle for additional stuff
         */
        toggleAdditionalOptions: function(toggleSpeed)
        {
            if (toggleSpeed == undefined)
            {
                toggleSpeed = "slow";
            }
            $(".additional-options-hider").slideToggle(toggleSpeed, function(){$("#componentEditAccountDiv").dialog( 'option', 'position', 'center' );WCC.utils.centerThisDialog(properties.dialogDivId);WCC.components.editAccount.setPin();});

        	if ($('#advancedToggler').hasClass('hide-button')) {
        		// it is showing
            	$('#advancedTogglerSpan').text(BRAVO.Translate._("WCC_MAIN_showAdditionalOptions"));
            	$("#advancedToggler").addClass('show-button');
            	$("#advancedToggler").removeClass('hide-button');
        	} else {
        		//it is hidden
            	$('#advancedTogglerSpan').text(BRAVO.Translate._("WCC_MAIN_hideAdditionalOptions"));
            	$("#advancedToggler").removeClass('show-button');
            	$("#advancedToggler").addClass('hide-button');
        	}

        },

        /**
         * Shut up, errors!
         *
         */
        clearErrors: function()
        {
            $('#editAccountPopinTabs').find('ul:first li a').css('color', 'black');

            $('#componentEditAccountErrorMisc').html('');
            $('#componentEditAccountErrorPassword').html('');
            $('#componentEditAccountErrorCatchall').html('');
            $('#componentEditAccountErrorCC').html('');
            $('#componentEditAccountErrorAutoReply').html('');
            $('#componentEditAccountErrorOff').html('');
            $('#componentEditAccountErrorCalendar').html('');
        },


        /**
         * Remove the coloring from the tab...
         * .. just go straight black
         *
         * theTab can be: email, calendar, off
         */
        removeTabError: function(theTab)
        {
            WCC.components.editAccount.handleTabError(theTab, 'black');
        },


        /**
         * Change the color of the tab and select it.
         *
         * colorOverride defaults to red.
         */
        handleTabError: function(theTab, colorOverride)
        {
            var selectTab = 0;
            if (colorOverride == undefined)
            {
                var colorOverride = 'red';
            }

            switch (theTab)
            {
                case 'email':
                    selectTab = 0;
                    break;
                case 'calendar':
                    selectTab = 1;
                    break;
                case 'off':
                    selectTab = 2;
                    break;
                default:
                    selectTab = 0;
            }

            // select the tab and then color it RED
            $("#editAccountPopinTabs").tabs('select',selectTab);
            $($('#editAccountPopinTabs').find('ul:first li a')[selectTab]).css('color', colorOverride);

            // we've gotta show the tabs... if they're not already being shown
            WCC.components.editAccount.openAdditionalOptionsIfNeccesary();
        },

        // handler to open specific tabs
        openEmailTab: function()
        {
            $("#editAccountPopinTabs").tabs('select',0);
            WCC.components.editAccount.openAdditionalOptionsIfNeccesary();
            return true;
        },
        openCalTab: function()
        {
            $("#editAccountPopinTabs").tabs('select',1);
            WCC.components.editAccount.openAdditionalOptionsIfNeccesary();
            return true;
        },
        openOffTab: function()
        {
            $("#editAccountPopinTabs").tabs('select',2);
            WCC.components.editAccount.openAdditionalOptionsIfNeccesary();
            return true;
        },


        /**
         * we've gotta show the tabs... if they're not already being shown
         */
        openAdditionalOptionsIfNeccesary: function()
        {
            if (!$('#advancedToggler').hasClass('hide-button'))
            {
                WCC.components.editAccount.toggleAdditionalOptions();
            }
        },


        /**
         * Get email plan data by pack id
         */
        getEmailPlanById: function (pack_id)
        {
            var emailPlans = WCC.model.emailPlans.get();
            for (var x in emailPlans )
            {
                if (emailPlans[x].pack_id == pack_id)
                {
                    return emailPlans[x];
                }
            }

            return false;
        },


        /**
         * Send everything out for processing....
         * ... maybe? Gotta pass some validations first...
         */
        submit: function(button)
        {
            //dont do it if the button is disabled, dude
            if($("#editSaveButton").attr('disabled')=='disabled') {
                    return;
            }

            WCC.components.editAccount.clearErrors();

            that=this;


            if ($('#editAccountPassword1').val() != undefined)
            {
                if ($('#editAccountPassword1').val() != $('#editAccountPassword2').val()) {
                    if (this.editAccountObj['isPass'] != true)
                    {
                        WCC.components.editAccount.handleTabError('cal');
                    }
                    $('#componentEditAccountErrorPassword').html(BRAVO.Translate._("WCC_MAIN_ePasswordsDoNotMatch"));

                    return false;
                }
            }

            if ($('#editOffAccountPassword1').val() != undefined)
            {
                if ($('#editOffAccountPassword1').val() != $('#editOffAccountPassword2').val()) {
                    if (this.editAccountObj['isPass'] != true)
                    {
                        WCC.components.editAccount.handleTabError('off');
                    }
                     $('#componentEditAccountErrorOff').html(BRAVO.Translate._("WCC_MAIN_ePasswordsDoNotMatch"));

                    return false;
                }
            }

            WCC.spinKontrol.open('componentEditAccountDiv');
            $("#editSaveButton").attr('disabled', 'disabled');


            // we're building a submit obj!
            submitObj = {};


            if (this.editAccountObj.isPass == true)
            {
                // what are we dealing with here?
                if ( $("#editAccountIncludeEmail").prop("checked") == true)
                {
                    submitObj.includeEmail = true;// $("#editAccountIncludeEmail").prop("checked");
                }
                else
                {
                    submitObj.includeEmail = false;
                }

                if ($("#editAccountIncludeCalendar").prop("checked") == true )
                {
                    submitObj.includeCalendar = true;
                }
                else
                {
                    submitObj.includeCalendar = false;
                }

                if ( $("#editAccountIncludeFiles").prop("checked") == true )
                {
                    submitObj.includeFiles = true;
                }
                else
                {
                    submitObj.includeFiles = false;
                }

                // what's getting deleted?
                if (submitObj.includeEmail == false && this.editAccountObj.emailAccountDataObj != undefined && jQuery.isEmptyObject(this.editAccountObj.emailAccountDataObj ) == false)
                {
                    submitObj.deleteEmail = true;
                }
                else
                {
                    submitObj.deleteEmail = false;
                }

                if (submitObj.includeCalendar == false && this.editAccountObj.calAccountDataObj != undefined && jQuery.isEmptyObject(this.editAccountObj.calAccountDataObj ) == false)
                {
                    submitObj.deleteCalendar = true;
                }
                else
                {
                    submitObj.deleteCalendar = false;
                }

                if (submitObj.includeFiles == false && this.editAccountObj.offAccountDataObj != undefined && jQuery.isEmptyObject(this.editAccountObj.offAccountDataObj ) == false)
                {
                    submitObj.deleteFiles = true;
                }
                else
                {
                    submitObj.deleteFiles = false;
                }

                // what's getting created?
                if (submitObj.includeEmail == true && jQuery.isEmptyObject(this.editAccountObj.emailAccountDataObj ) == true)
                {
                    submitObj.createEmail = true;
                }
                else
                {
                    submitObj.createEmail = false;
                }

                if (submitObj.includeCalendar == true && this.editAccountObj.calAccountDataObj == undefined)
                {
                    submitObj.createCalendar = true;
                }
                else
                {
                    submitObj.createCalendar = false;
                }

                if (submitObj.includeFiles == true && this.editAccountObj.offAccountDataObj == undefined)
                {
                    submitObj.createFiles = true;
                }
                else
                {
                    submitObj.createFiles = false;
                }
            }
            else
            {
                if ( this.editAccountObj.emailAccountDataObj != undefined && jQuery.isEmptyObject(this.editAccountObj.emailAccountDataObj ) == false)
                {
                    submitObj.includeEmail = true;
                }
                else
                {
                    submitObj.includeEmail = false;
                }

                if ( this.editAccountObj.calAccountDataObj != undefined && jQuery.isEmptyObject(this.editAccountObj.calAccountDataObj ) == false)
                {
                    submitObj.includeCal = true;
                }
                else
                {
                    submitObj.includeCal = false;
                }

                if ( this.editAccountObj.offAccountDataObj != undefined && jQuery.isEmptyObject(this.editAccountObj.offAccountDataObj ) == false)
                {
                    submitObj.includeFiles = true;
                }
                else
                {
                    submitObj.includeFiles = false;
                }
            }

            submitObj.emailAddressId = this.editAccountObj.emailAccountDataObj['email_address_id'];
            submitObj.emailAddress = this.editAccountObj['email_address'] ?this.editAccountObj['email_address'] : this.editAccountObj.emailAccountDataObj['emailAddress'];
            submitObj.password1 = $("#editAccountPassword1").val();
            submitObj.password2 = $("#editAccountPassword2").val();

            // handle the email plan
            if (submitObj.includeEmail == true && submitObj.createEmail != true)
            {
                var emailPlan = WCC.components.editAccount.getEmailPlanById(this.editAccountObj.pack_id);
                submitObj.selectEmailPlan = emailPlan.pack_uid;
            }
            if (submitObj.includeEmail == true && submitObj.createEmail == true)
            {
                submitObj.selectEmailPlan = $('#editAccountEmailPlanSelect').val();
            }


            // email quota
            var planObj = this.getEmailPlanByPackUid(submitObj.selectEmailPlan);
            if (planObj && planObj['unlimited_quota'] == true)
            {
                submitObj.quota = -1;
            } else {
                submitObj.quota = $("#editAccountQuota").val();
            }

            submitObj.useCatchAll = $("#editAccountUseCatchall").prop("checked");
            submitObj.useSendEmailTo = $("#editAccountUseSendEmailTo").prop("checked");

            if($("#editAccountSendEmailTo").val() == "(separate with commas)")
            {
                submitObj.sendEmailTo = "";
            }
            else
            {
                submitObj.sendEmailTo = $("#editAccountSendEmailTo").val();
            }

            submitObj.relays = $("#editAccountSMTPRelays").val();
            submitObj.useSpamFilter = $("#editAccountUseSpamFilter").prop("checked");
            submitObj.deliveryBehavior = $("#editAccountDeliveryBehavior").val();

            // calendar
            if (this.editAccountObj.calUser != undefined)
            {
                submitObj.calUser = this.editAccountObj.calUser;
            }

            if(submitObj.includeCalendar == true)
            {
                if (submitObj.createCalendar == true)
                {
                    submitObj.selectCalPlan = $("#editAccountSelectCalPlan").val();
                }
                else
                {
                    submitObj.selectCalPlan = this.editAccountObj.calAccountDataObj.accountUid;
                }

                submitObj.calendarMessage = $('#editAccountCalendarMessage').val();
            }

            // files!
            if (this.editAccountObj.offAccountDataObj != undefined)
            {
                submitObj.offUser = this.editAccountObj.offAccountDataObj.offUser;
            }

            if(submitObj.includeFiles == true)
            {
                if (submitObj.createFiles == true)
                {
                    submitObj.selectOffPlan = $("#editAccountSelectOffPlan").val();
                    submitObj.offUser = this.editAccountObj.realName;
                }
                else
                {
                    submitObj.selectOffPlan = this.editAccountObj.offAccountDataObj.accountUid;
                    submitObj.offUser = this.editAccountObj.offAccountDataObj.offUser;
                }

                if (this.editAccountObj.offAccountDataObj != undefined)
                {
                    submitObj.offUserId = this.editAccountObj.offAccountDataObj.user_num;
                }
                else
                {
                    submitObj.offUserId = null;
                }

                if(undefined !== $('#associatedAccountEmailAddress').val() ) {
                    submitObj.offAssociatedEmail = $('#associatedAccountEmailAddress').val();
                }

                submitObj.offPassword1 = $("#editOffAccountPassword1").val();
                submitObj.offPassword2 = $("#editOffAccountPassword2").val();
            }

            submitObj.enableAutoReply = $("#editAccountEnableAutoReply").prop("checked");
            submitObj.autoReplyFrequency = $("#editAccountAutoReplyFrequency").val();
            submitObj.autoReplySourceDefault = $("#editAccountAutoReplySourceChoiceDefault").prop("checked");

            if($("#editSetupInstructionEmail").val()=="e.g., email@domain.com, email2@domain.com, etc.") {
            	submitObj.autoReplySourceEmail = "";
            } else {
            	submitObj.autoReplySourceEmail = $("#editSetupInstructionEmail").val();
            }

            submitObj.autoReplySourceEmail = $("#editAccountAutoReplySourceEmail").val();
            submitObj.autoReplySubjectDefault = $("#editAccountAutoReplySubjectChoiceOriginalSubject").prop("checked");
            submitObj.autoReplySubject = $("#editAccountAutoReplySubject").val();
            submitObj.autoReplyMessage = $("#editAccountAutoReplyMessage").val();
            submitObj.autoReplyUseStart = $("#editAccountAutoReplyUseStart").prop("checked");
            submitObj.autoReplyUseEnd = $("#editAccountAutoReplyUseEnd").prop("checked");

            if ($('#editAccountAutoReplyUseStart').prop('checked'))
            {
                submitObj.autoReplyStart = $("#editAccountAutoReplyStart").val();
                submitObj.autoReplyStartOffset = $("#editAccountAutoReplyStart").datetimepicker('getSelectedTimezone');
                if (submitObj.autoReplyStartOffset == null)
                {
                    var tzObj = WCC.components.datePicker.returnTimezone();
                    submitObj.autoReplyStartOffset = tzObj.timezone_id;
                }
            }
            else
            {
                submitObj.autoReplyStart = '';
            }

            if ($('#editAccountAutoReplyUseEnd').prop('checked'))
            {
                submitObj.autoReplyEnd = $("#editAccountAutoReplyEnd").val();
                submitObj.autoReplyEndOffset = $("#editAccountAutoReplyEnd").datetimepicker('getSelectedTimezone');
                if (submitObj.autoReplyEndOffset == null)
                {
                    var tzObj = WCC.components.datePicker.returnTimezone();
                    submitObj.autoReplyEndOffset = tzObj.timezone_id;
                }
            }
            else
            {
                submitObj.autoReplyEnd = '';
            }

            submitObj.realName = this.editAccountObj.realName;
            submitObj.displayName = this.editAccountObj.displayName;

            submitObj.postToken = Globals.POST_TOKEN;

            if (this.editAccountObj.isPass)
            {
                var ajaxUrl = 'ajax/editpassaccount/';
            }
            else
            {
                var ajaxUrl = 'ajax/createaccount/';
            }

            $.ajax({
                type: "POST",
                url: ajaxUrl,
                dataType : 'json',
                data: submitObj,
                success : function(data) {createAccountSuccess(data);},
                error :  handleError
            });

        },

        isPassMigrated: function(migrateAccount)
        {
            var migrate = migrateAccount;
            var ajaxUrl = 'ajax/passmigrated/';

            submitObj = {};
            submitObj.account = migrate;
            submitObj.postToken = Globals.POST_TOKEN;

            var passPost = '';
            $.ajax({
                type: "POST",
                url: ajaxUrl,
                dataType : 'json',
                async: false,
                data: submitObj,
                success : function(data) {passPost = data[migrate];},
                error :  handleError
            });

            return passPost;

        }


    };



}());



/**
 * Error Display
 *
 *
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.componentErrorDisplay = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentErrorDisplayDiv';
    properties.template = '#componentErrorDisplay';

    properties.title = BRAVO.Translate._("WCC_MAIN_ucError");
    properties.contents = BRAVO.Translate._("WCC_MAIN_anErrorHasOccurred");

    properties.postCloseCallback = null;


    return{

        /**
         * Fire up the dialog box and take care of other stuff...
         * ... the optional postCloseCallbackInput will be called on
         * close if you send it a function
         *
         * @param string errorMessageTitleInput
         * @param string errorMessageInput
         * @param function postCloseCallbackInput optional
         */
        open: function(errorMessageTitleInput, errorMessageInput, postCloseCallbackInput)
        {
            // define the heck out of properties
            properties.title = errorMessageTitleInput;
            properties.contents = errorMessageInput;

            // do we have a callback?
            if (jQuery.isFunction(postCloseCallbackInput) )
            {
                properties.postCloseCallback = postCloseCallbackInput;
            }
            else
            {
                properties.postCloseCallback = null;
            }

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);

                WCC.utils.showLoading(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 420,
                title: properties.title,
                close: function(){WCC.components.componentErrorDisplay.beforeCloseDialog(); }
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");

            this.renderDialog();
            WCC.utils.centerThisDialog(properties.dialogDivId);
        },


        /**
         * Fires the callback... if we've got one...
         *
         */
        fireCallback: function()
        {
            if (properties.postCloseCallback != null)
            {
                properties.postCloseCallback.call();
            }
        },


        /**
         * Render the dialog...
         * ... uses the properties.contents
         *
         */
        renderDialog: function()
        {
            var renderedOutput =  $(properties.template).tmpl({errorMessage:  properties.contents});
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
        },


        /**
         * This runs whenever the box is closed... regardless of how...
         * ... stupid corner x. Hate that thing....
         *
         * Fires the callback if it's been defined...
         */
        beforeCloseDialog: function()
        {
            $('#'+properties.dialogDivId).remove();
            this.fireCallback();
        },


        /**
         * Close the dialog.
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
        }

    };


}());



/**
 * Terms and Conditions
 * 
 * 
 * 
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.componentTermsAndConditions = (function()
{
    var properties = {};
    var checked=false;
    properties.dialogDivId = 'componentTermsAndConditionsDiv';
    properties.template = '#componentTermsAndConditions';
    
    properties.title = BRAVO.Translate._("WCC_MAIN_termsAndConditionsTitle", "main");
    properties.contents = 'these are the terms...';
    
    properties.postCloseCallback = null;
    
    properties.agreementContents = null;
    
    var getAgreementSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true )
        {
            properties.agreementContents = data.agreement;
            WCC.components.componentTermsAndConditions.renderDialog();
        }
    };
    
    
    return{
        
        /**
         * Fire up the dialog box and take care of other stuff...
         * ... the optional postCloseCallbackInput will be called on 
         * close if you send it a function
         *
         * @param string boxTitle
         * @param string boxMessage
         * @param function postCloseCallbackInput optional
         */
        open: function(boxTitle, boxMessage, postCloseCallbackInput)
        {   
            // define the heck out of properties
            properties.title = boxTitle;
            properties.contents = boxMessage;
            
            // do we have a callback?
            if (jQuery.isFunction(postCloseCallbackInput) )
            {
                properties.postCloseCallback = postCloseCallbackInput;
            }
            else
            {
                properties.postCloseCallback = null;
            }
            
            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                
                WCC.utils.showLoading(properties.dialogDivId);
            }
            
            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 640,
                title: properties.title,
                close: function(){WCC.components.componentTermsAndConditions.beforeCloseDialog();}
            });


            // open it...
            $('#'+properties.dialogDivId).dialog("open");
            
            $('#'+properties.dialogDivId).parent().css('z-index', '14004');
            
            this.renderDialog();
        },
        
        
        /**
         * Set the CSS class of the accpted terms... depending on stuff
         * 
         */
        setTermsClass: function () {
        	if ($("#termsAcceptTerms").attr("checked")== "checked"){
        		//$("#termsAcceptTermsLabel").addClass("ok-icon");
        		//$("#termsAcceptTermsLabel").removeClass("alert-icon");
        	} else {
        		//$("#termsAcceptTermsLabel").addClass("alert-icon");
        		//$("#termsAcceptTermsLabel").removeClass("ok-icon");
        	}
        	if (checked) {
        		return true;
        	} else {
        		return false;
        	}
        },
        
        
        /**
         * Is it checked?
         * 
         */
        isChecked: function() {
        	return checked;
        },
        
        
        /**
         * Fires the callback... if we've got one...
         */
        fireCallback: function()
        {
            if (properties.postCloseCallback != null)
            {
                properties.postCloseCallback.call();
            }
        },
        
        
        /**
         * Damn son... go get that agreement!
         */
        getAgreement: function()
        {
            // submit obj stuff goes here!    		
            $.ajax({
                type: "POST",
                url: 'ajaxemail/geteula/',
                data: {'postToken':Globals.POST_TOKEN},
                dataType : 'json',
                success : function(data) {getAgreementSuccess(data);},
                error :  WCC.utils.handleError 
            });
        },
        
        
        /**
         * Render the dialog...
         * ... uses the properties.contents
         */
        renderDialog: function()
        {  
            if (properties.agreementContents == null)
            {
                this.getAgreement();
                return;
            }
            
            var renderedOutput =  $(properties.template).tmpl({checked:  properties.checked, agreementContents: properties.agreementContents});
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
        },
        
        
        /**
         * This runs whenever the box is closed... regardless of how...
         * ... stupid corner x. Hate that thing....
         * 
         * Fires the callback if it's been defined...
         */
        beforeCloseDialog: function()
        {
        	
            if ($("#termsCheckbox").attr("checked") == "checked" ) 
            {
                checked = true;
                $("#termsAcceptTerms").attr("checked", "checked");
	            //$('#termsAcceptTermsLabel').addClass('ok-icon');
	            //$('#termsAcceptTermsLabel').removeClass('alert-icon');
            } 
            else 
            {
                checked = false;
                $("#termsAcceptTerms").removeAttr("checked");
                //$('#termsAcceptTermsLabel').addClass('alert-icon');
                //$('#termsAcceptTermsLabel').removeClass('ok-icon');
            }
            
            $('#'+properties.dialogDivId).remove();
            
            this.fireCallback();
        },
        
        
        /**
         * Close the dialog.
         * 
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
        }
        
    };
    
    
}());



/**
 * Confirmation dialog box
 *
 *
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.componentConfirmation = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentConfirmationDiv';
    properties.template = '#componentConfirmation';

    properties.title = BRAVO.Translate._("WCC_MAIN_areYouSure");
    properties.contents = '';

    properties.okCallback = null;
    properties.notOkCallback = null;

    properties.okButtonText = BRAVO.Translate._("WCC_MAIN_ok");
    properties.notOkButtonText = BRAVO.Translate._("WCC_MAIN_Cancel");

    return{

        /**
         * Fire up the dialog box and take care of other stuff...
         * You can define the ok and notOk callbacks as you like... button text is optional
         *
         * @param string confirmationTitle
         * @param string confirmationMessage
         * @param function okCallback optional
         * @param function notOkCallback optional
         * @param string okButtonText optional
         * @param string notOkButtonText optional
         */
        open: function(confirmationTitle, confirmationMessage, okCallback, notOkCallback, okButtonText, notOkButtonText)
        {
            // define the heck out of properties
            properties.title = confirmationTitle;
            properties.contents = confirmationMessage;

            // do we have callbacks?
            if (jQuery.isFunction(okCallback) )
            {
                properties.okCallback = okCallback;
            }
            else
            {
                properties.okCallback = null;
            }
            if (jQuery.isFunction(notOkCallback) )
            {
                properties.notOkCallback = notOkCallback;
            }
            else
            {
                properties.notOkCallback = null;
            }

            if (okButtonText != undefined && okButtonText != null)
            {
                properties.okButtonText = okButtonText;
            }
            if (notOkButtonText != undefined && notOkButtonText != null)
            {
                properties.notOkButtonText = notOkButtonText;
            }

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                WCC.utils.centerThisDialog(properties.dialogDivId);
                WCC.utils.showLoading(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 420,
                title: properties.title,
                close: function(){WCC.components.componentConfirmation.beforeCloseDialog(); }
            });


            // open it...
            $('#'+properties.dialogDivId).dialog("open");

            this.renderDialog();
            WCC.utils.centerThisDialog(properties.dialogDivId);
            return true;
        },


        /**
         * Fires ok callback... if we've got one...
         */
        fireOkCallback: function()
        {
            if (properties.okCallback != null)
            {
                properties.okCallback.call();
            }
            else
            {
                return false;
            }

        },


        /**
         * Fires the not ok callback... if we've got one...
         */
        fireNotOkCallback: function()
        {
            if (properties.notOkCallback != null)
            {
                properties.notOkCallback.call();
            }
            else
            {
                return false;
            }

        },


        /**
         * Render the dialog...
         * ... uses the properties.contents
         */
        renderDialog: function()
        {
            var renderedOutput =  $(properties.template).tmpl({'properties':  properties});
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);
        },


        /**
         * This runs whenever the box is closed... regardless of how...
         * ... stupid corner x. Hate that thing....
         *
         * Fires the callback if it's been defined...
         */
        beforeCloseDialog: function()
        {
            $('#'+properties.dialogDivId).remove();
            this.fireNotOkCallback();
        },


        /**
         * Close the dialog.
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
        },


        /**
         * Close the dialog.
         *
         */
        closeDialogNoCallback: function()
        {
            $('#'+properties.dialogDivId).remove();
        },


        /**
         * Submit ok... fire the okCallback
         */
        submitOk: function()
        {
            this.fireOkCallback();
            this.closeDialogNoCallback();
        }

    };


}());



// +LICENCE
/**
 * http://github.com/valums/file-uploader
 * 
 * Multiple file upload component with progress-bar, drag-and-drop. 
 * © 2010 Andrew Valums ( andrew(at)valums.com ) 
 * 
 * Licensed under GNU GPL 2 or later and GNU LGPL 2 or later, see license.txt.
 */    
// -LICENCE
//
// Helper functions
//

var qq = qq || {};

/**
 * Adds all missing properties from second obj to first obj
 */ 
qq.extend = function(first, second){
    for (var prop in second){
        first[prop] = second[prop];
    }
};  

/**
 * Searches for a given element in the array, returns -1 if it is not present.
 * @param {Number} [from] The index at which to begin the search
 */
qq.indexOf = function(arr, elt, from){
    if (arr.indexOf) return arr.indexOf(elt, from);
    
    from = from || 0;
    var len = arr.length;    
    
    if (from < 0) from += len;  

    for (; from < len; from++){  
        if (from in arr && arr[from] === elt){  
            return from;
        }
    }  
    return -1;  
}; 
    
qq.getUniqueId = (function(){
    var id = 0;
    return function(){ return id++; };
})();

//
// Events

qq.attach = function(element, type, fn){
    if (element.addEventListener){
        element.addEventListener(type, fn, false);
    } else if (element.attachEvent){
        element.attachEvent('on' + type, fn);
    }
};
qq.detach = function(element, type, fn){
    if (element.removeEventListener){
        element.removeEventListener(type, fn, false);
    } else if (element.attachEvent){
        element.detachEvent('on' + type, fn);
    }
};

qq.preventDefault = function(e){
    if (e.preventDefault){
        e.preventDefault();
    } else{
        e.returnValue = false;
    }
};

//
// Node manipulations

/**
 * Insert node a before node b.
 */
qq.insertBefore = function(a, b){
    b.parentNode.insertBefore(a, b);
};
qq.remove = function(element){
    element.parentNode.removeChild(element);
};

qq.contains = function(parent, descendant){       
    // compareposition returns false in this case
    if (parent == descendant) return true;
    
    if (parent.contains){
        return parent.contains(descendant);
    } else {
        return !!(descendant.compareDocumentPosition(parent) & 8);
    }
};

/**
 * Creates and returns element from html string
 * Uses innerHTML to create an element
 */
qq.toElement = (function(){
    var div = document.createElement('div');
    return function(html){
        div.innerHTML = html;
        var element = div.firstChild;
        div.removeChild(element);
        return element;
    };
})();

//
// Node properties and attributes

/**
 * Sets styles for an element.
 * Fixes opacity in IE6-8.
 */
qq.css = function(element, styles){
    if (styles.opacity != null){
        if (typeof element.style.opacity != 'string' && typeof(element.filters) != 'undefined'){
            styles.filter = 'alpha(opacity=' + Math.round(100 * styles.opacity) + ')';
        }
    }
    qq.extend(element.style, styles);
};
qq.hasClass = function(element, name){
    var re = new RegExp('(^| )' + name + '( |$)');
    return re.test(element.className);
};
qq.addClass = function(element, name){
    if (!qq.hasClass(element, name)){
        element.className += ' ' + name;
    }
};
qq.removeClass = function(element, name){
    var re = new RegExp('(^| )' + name + '( |$)');
    element.className = element.className.replace(re, ' ').replace(/^\s+|\s+$/g, "");
};
qq.setText = function(element, text){
    element.innerText = text;
    element.textContent = text;
};

//
// Selecting elements

qq.children = function(element){
    var children = [],
    child = element.firstChild;

    while (child){
        if (child.nodeType == 1){
            children.push(child);
        }
        child = child.nextSibling;
    }

    return children;
};

qq.getByClass = function(element, className){
    if (element.querySelectorAll){
        return element.querySelectorAll('.' + className);
    }

    var result = [];
    var candidates = element.getElementsByTagName("*");
    var len = candidates.length;

    for (var i = 0; i < len; i++){
        if (qq.hasClass(candidates[i], className)){
            result.push(candidates[i]);
        }
    }
    return result;
};

/**
 * obj2url() takes a json-object as argument and generates
 * a querystring. pretty much like jQuery.param()
 * 
 * how to use:
 *
 *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`
 *
 * will result in:
 *
 *    `http://any.url/upload?otherParam=value&a=b&c=d`
 *
 * @param  Object JSON-Object
 * @param  String current querystring-part
 * @return String encoded querystring
 */
qq.obj2url = function(obj, temp, prefixDone){
    var uristrings = [],
        prefix = '&',
        add = function(nextObj, i){
            var nextTemp = temp 
                ? (/\[\]$/.test(temp)) // prevent double-encoding
                   ? temp
                   : temp+'['+i+']'
                : i;
            if ((nextTemp != 'undefined') && (i != 'undefined')) {  
                uristrings.push(
                    (typeof nextObj === 'object') 
                        ? qq.obj2url(nextObj, nextTemp, true)
                        : (Object.prototype.toString.call(nextObj) === '[object Function]')
                            ? encodeURIComponent(nextTemp) + '=' + encodeURIComponent(nextObj())
                            : encodeURIComponent(nextTemp) + '=' + encodeURIComponent(nextObj)                                                          
                );
            }
        }; 

    if (!prefixDone && temp) {
      prefix = (/\?/.test(temp)) ? (/\?$/.test(temp)) ? '' : '&' : '?';
      uristrings.push(temp);
      uristrings.push(qq.obj2url(obj));
    } else if ((Object.prototype.toString.call(obj) === '[object Array]') && (typeof obj != 'undefined') ) {
        // we wont use a for-in-loop on an array (performance)
        for (var i = 0, len = obj.length; i < len; ++i){
            add(obj[i], i);
        }
    } else if ((typeof obj != 'undefined') && (obj !== null) && (typeof obj === "object")){
        // for anything else but a scalar, we will use for-in-loop
        for (var i in obj){
            add(obj[i], i);
        }
    } else {
        uristrings.push(encodeURIComponent(temp) + '=' + encodeURIComponent(obj));
    }

    return uristrings.join(prefix)
                     .replace(/^&/, '')
                     .replace(/%20/g, '+'); 
};

//
//
// Uploader Classes
//
//

var qq = qq || {};
    
/**
 * Creates upload button, validates upload, but doesn't create file list or dd. 
 */
qq.FileUploaderBasic = function(o){
    this._options = {
        // set to true to see the server response
        debug: false,
        action: '/server/upload',
        params: {},
        button: null,
        multiple: true,
        maxConnections: 3,
        // validation        
        allowedExtensions: [],               
        sizeLimit: 0,   
        minSizeLimit: 0,                             
        // events
        // return false to cancel submit
        onSubmit: function(id, fileName){},
        onProgress: function(id, fileName, loaded, total){},
        onComplete: function(id, fileName, responseJSON){},
        onCancel: function(id, fileName){},
        // messages                
        messages: {
            typeError: "{file} has invalid extension. Only {extensions} are allowed.",
            sizeError: "{file} is too large, maximum file size is {sizeLimit}.",
            minSizeError: "{file} is too small, minimum file size is {minSizeLimit}.",
            emptyError: "{file} is empty, please select files again without it.",
            onLeave: "The files are being uploaded, if you leave now the upload will be cancelled."            
        },
        showMessage: function(message){
            WCC.components.componentErrorDisplay.open (BRAVO.Translate._("WCC_Main_lolUploadProblem"), message);
        }               
    };
    qq.extend(this._options, o);
        
    // number of files being uploaded
    this._filesInProgress = 0;
    this._handler = this._createUploadHandler(); 
    
    if (this._options.button){ 
        this._button = this._createUploadButton(this._options.button);
    }
                        
    this._preventLeaveInProgress();         
};
   
qq.FileUploaderBasic.prototype = {
    setParams: function(params){
        this._options.params = params;
    },
    getInProgress: function(){
        return this._filesInProgress;         
    },
    _createUploadButton: function(element){
        var self = this;
        
        return new qq.UploadButton({
            element: element,
            multiple: this._options.multiple && qq.UploadHandlerXhr.isSupported(),
            onChange: function(input){
                self._onInputChange(input);
            }        
        });           
    },    
    _createUploadHandler: function(){
        var self = this,
            handlerClass;        
        
        if(qq.UploadHandlerXhr.isSupported()){           
            handlerClass = 'UploadHandlerXhr';                        
        } else {
            handlerClass = 'UploadHandlerForm';
        }

        var handler = new qq[handlerClass]({
            debug: this._options.debug,
            action: this._options.action,         
            maxConnections: this._options.maxConnections,   
            onProgress: function(id, fileName, loaded, total){                
                self._onProgress(id, fileName, loaded, total);
                self._options.onProgress(id, fileName, loaded, total);                    
            },            
            onComplete: function(id, fileName, result){
                self._onComplete(id, fileName, result);
                self._options.onComplete(id, fileName, result);
            },
            onCancel: function(id, fileName){
                self._onCancel(id, fileName);
                self._options.onCancel(id, fileName);
            }
        });

        return handler;
    },    
    _preventLeaveInProgress: function(){
        var self = this;
        
        qq.attach(window, 'beforeunload', function(e){
            if (!self._filesInProgress){return;}
            
            var e = e || window.event;
            // for ie, ff
            e.returnValue = self._options.messages.onLeave;
            // for webkit
            return self._options.messages.onLeave;             
        });        
    },    
    _onSubmit: function(id, fileName){
        this._filesInProgress++;  
    },
    _onProgress: function(id, fileName, loaded, total){        
    },
    _onComplete: function(id, fileName, result){
        this._filesInProgress--;                 
        if (result.error){
            this._options.showMessage(result.error);
        }             
    },
    _onCancel: function(id, fileName){
        this._filesInProgress--;        
    },
    _onInputChange: function(input){
        if (this._handler instanceof qq.UploadHandlerXhr){                
            this._uploadFileList(input.files);                   
        } else {             
            if (this._validateFile(input)){                
                this._uploadFile(input);                                    
            }                      
        }               
        this._button.reset();   
    },  
    _uploadFileList: function(files){
        for (var i=0; i<files.length; i++){
            if ( !this._validateFile(files[i])){
                return;
            }            
        }
        
        for (var i=0; i<files.length; i++){
            this._uploadFile(files[i]);        
        }        
    },       
    _uploadFile: function(fileContainer){      
        var id = this._handler.add(fileContainer);
        var fileName = this._handler.getName(id);
        
        if (this._options.onSubmit(id, fileName) !== false){
            this._onSubmit(id, fileName);
            this._handler.upload(id, this._options.params);
        }
    },      
    _validateFile: function(file){
        var name, size;
        
        if (file.value){
            // it is a file input            
            // get input value and remove path to normalize
            name = file.value.replace(/.*(\/|\\)/, "");
        } else {
            // fix missing properties in Safari
            name = file.fileName != null ? file.fileName : file.name;
            size = file.fileSize != null ? file.fileSize : file.size;
        }
                    
        if (! this._isAllowedExtension(name)){            
            this._error('typeError', name);
            return false;
            
        } else if (size === 0){            
            this._error('emptyError', name);
            return false;
                                                     
        } else if (size && this._options.sizeLimit && size > this._options.sizeLimit){            
            this._error('sizeError', name);
            return false;
                        
        } else if (size && size < this._options.minSizeLimit){
            this._error('minSizeError', name);
            return false;            
        }
        
        return true;                
    },
    _error: function(code, fileName){
        var message = this._options.messages[code];        
        function r(name, replacement){ message = message.replace(name, replacement); }
        
        r('{file}', this._formatFileName(fileName));        
        r('{extensions}', this._options.allowedExtensions.join(', '));
        r('{sizeLimit}', this._formatSize(this._options.sizeLimit));
        r('{minSizeLimit}', this._formatSize(this._options.minSizeLimit));
        
        this._options.showMessage(message);                
    },
    _formatFileName: function(name){
        if (name.length > 33){
            name = name.slice(0, 19) + '...' + name.slice(-13);    
        }
        return name;
    },
    _isAllowedExtension: function(fileName){
        var ext = (-1 !== fileName.indexOf('.')) ? fileName.replace(/.*[.]/, '').toLowerCase() : '';
        var allowed = this._options.allowedExtensions;
        
        if (!allowed.length){return true;}        
        
        for (var i=0; i<allowed.length; i++){
            if (allowed[i].toLowerCase() == ext){ return true;}    
        }
        
        return false;
    },    
    _formatSize: function(bytes){
        var i = -1;                                    
        do {
            bytes = bytes / 1024;
            i++;  
        } while (bytes > 99);
        
        return Math.max(bytes, 0.1).toFixed(1) + ['kB', 'MB', 'GB', 'TB', 'PB', 'EB'][i];          
    }
};
    
       
/**
 * Class that creates upload widget with drag-and-drop and file list
 * @inherits qq.FileUploaderBasic
 */
qq.FileUploader = function(o){
    // call parent constructor
    qq.FileUploaderBasic.apply(this, arguments);
    
    // additional options    
    qq.extend(this._options, {
        element: null,
        // if set, will be used instead of qq-upload-list in template
        listElement: null,
                
        template: '<div class="qq-uploader">' + 
                '<div class="qq-upload-drop-area"><span>Drop files here to upload</span></div>' +
                '<div class="qq-upload-button">' + BRAVO.Translate._("WCC_MAIN_lolUploadLogo") + '</div>' +
                '<ul class="qq-upload-list"></ul>' + 
             '</div>',

        // template for one item in file list
        fileTemplate: '<li>' +
                '<span class="qq-upload-file"></span>' +
                '<span class="qq-upload-spinner"></span>' +
                '<span class="qq-upload-size"></span>' +
                '<a class="qq-upload-cancel" href="#">Cancel</a>' +
                '<span class="qq-upload-failed-text">Failed</span>' +
            '</li>',        
        
        classes: {
            // used to get elements from templates
            button: 'qq-upload-button',
            drop: 'qq-upload-drop-area',
            dropActive: 'qq-upload-drop-area-active',
            list: 'qq-upload-list',
                        
            file: 'qq-upload-file',
            spinner: 'qq-upload-spinner',
            size: 'qq-upload-size',
            cancel: 'qq-upload-cancel',

            // added to list item when upload completes
            // used in css to hide progress spinner
            success: 'qq-upload-success',
            fail: 'qq-upload-fail'
        }
    });
    // overwrite options with user supplied    
    qq.extend(this._options, o);       

    this._element = this._options.element;
    if (this._element == null)
    {
        return;
    }
    
    this._element.innerHTML = this._options.template;        
    this._listElement = this._options.listElement || this._find(this._element, 'list');
    
    this._classes = this._options.classes;
        
    this._button = this._createUploadButton(this._find(this._element, 'button'));        
    
    this._bindCancelEvent();
    this._setupDragDrop();
};

// inherit from Basic Uploader
qq.extend(qq.FileUploader.prototype, qq.FileUploaderBasic.prototype);

qq.extend(qq.FileUploader.prototype, {
    /**
     * Gets one of the elements listed in this._options.classes
     **/
    _find: function(parent, type){                                
        var element = qq.getByClass(parent, this._options.classes[type])[0];        
        if (!element){
            throw new Error('element not found ' + type);
        }
        
        return element;
    },
    _setupDragDrop: function(){
        var self = this,
            dropArea = this._find(this._element, 'drop');                        

        var dz = new qq.UploadDropZone({
            element: dropArea,
            onEnter: function(e){
                qq.addClass(dropArea, self._classes.dropActive);
                e.stopPropagation();
            },
            onLeave: function(e){
                e.stopPropagation();
            },
            onLeaveNotDescendants: function(e){
                qq.removeClass(dropArea, self._classes.dropActive);  
            },
            onDrop: function(e){
                dropArea.style.display = 'none';
                qq.removeClass(dropArea, self._classes.dropActive);
                self._uploadFileList(e.dataTransfer.files);    
            }
        });
                
        dropArea.style.display = 'none';

        qq.attach(document, 'dragenter', function(e){     
            if (!dz._isValidFileDrag(e)) return; 
            
            dropArea.style.display = 'block';            
        });                 
        qq.attach(document, 'dragleave', function(e){
            if (!dz._isValidFileDrag(e)) return;            
            
            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);
            // only fire when leaving document out
            if ( ! relatedTarget || relatedTarget.nodeName == "HTML"){               
                dropArea.style.display = 'none';                                            
            }
        });                
    },
    _onSubmit: function(id, fileName){
        qq.FileUploaderBasic.prototype._onSubmit.apply(this, arguments);
        this._addToList(id, fileName);  
    },
    _onProgress: function(id, fileName, loaded, total){
        qq.FileUploaderBasic.prototype._onProgress.apply(this, arguments);

        var item = this._getItemByFileId(id);
        var size = this._find(item, 'size');
        size.style.display = 'inline';
        
        var text; 
        if (loaded != total){
            text = Math.round(loaded / total * 100) + '% from ' + this._formatSize(total);
        } else {                                   
            text = this._formatSize(total);
        }          
        
        qq.setText(size, text);         
    },
    _onComplete: function(id, fileName, result){
        qq.FileUploaderBasic.prototype._onComplete.apply(this, arguments);

        // mark completed
        var item = this._getItemByFileId(id);                
        qq.remove(this._find(item, 'cancel'));
        qq.remove(this._find(item, 'spinner'));
        if (result.success)
        {
             WCC.components.logoOnLogin.showImageCropper();
        } 
        else 
        {
            $('.qq-upload-list').empty();
        }         
    },
    _addToList: function(id, fileName){
        var item = qq.toElement(this._options.fileTemplate);                
        item.qqFileId = id;

        var fileElement = this._find(item, 'file');        
        qq.setText(fileElement, this._formatFileName(fileName));
        this._find(item, 'size').style.display = 'none';        

        this._listElement.appendChild(item);
    },
    _getItemByFileId: function(id){
        var item = this._listElement.firstChild;        
        
        // there can't be txt nodes in dynamically created list
        // and we can  use nextSibling
        while (item){            
            if (item.qqFileId == id) return item;            
            item = item.nextSibling;
        }          
    },
    /**
     * delegate click event for cancel link 
     **/
    _bindCancelEvent: function(){
        var self = this,
            list = this._listElement;            
        
        qq.attach(list, 'click', function(e){            
            e = e || window.event;
            var target = e.target || e.srcElement;
            
            if (qq.hasClass(target, self._classes.cancel)){                
                qq.preventDefault(e);
               
                var item = target.parentNode;
                self._handler.cancel(item.qqFileId);
                qq.remove(item);
            }
        });
    }    
});
    
qq.UploadDropZone = function(o){
    this._options = {
        element: null,  
        onEnter: function(e){},
        onLeave: function(e){},  
        // is not fired when leaving element by hovering descendants   
        onLeaveNotDescendants: function(e){},   
        onDrop: function(e){}                       
    };
    qq.extend(this._options, o); 
    
    this._element = this._options.element;
    
    this._disableDropOutside();
    this._attachEvents();   
};

qq.UploadDropZone.prototype = {
    _disableDropOutside: function(e){
        // run only once for all instances
        if (!qq.UploadDropZone.dropOutsideDisabled ){

            qq.attach(document, 'dragover', function(e){
                if (e.dataTransfer){
                    e.dataTransfer.dropEffect = 'none';
                    e.preventDefault(); 
                }           
            });
            
            qq.UploadDropZone.dropOutsideDisabled = true; 
        }        
    },
    _attachEvents: function(){
        var self = this;              
                  
        qq.attach(self._element, 'dragover', function(e){
            if (!self._isValidFileDrag(e)) return;
            
            var effect = e.dataTransfer.effectAllowed;
            if (effect == 'move' || effect == 'linkMove'){
                e.dataTransfer.dropEffect = 'move'; // for FF (only move allowed)    
            } else {                    
                e.dataTransfer.dropEffect = 'copy'; // for Chrome
            }
                                                     
            e.stopPropagation();
            e.preventDefault();                                                                    
        });
        
        qq.attach(self._element, 'dragenter', function(e){
            if (!self._isValidFileDrag(e)) return;
                        
            self._options.onEnter(e);
        });
        
        qq.attach(self._element, 'dragleave', function(e){
            if (!self._isValidFileDrag(e)) return;
            
            self._options.onLeave(e);
            
            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);                      
            // do not fire when moving a mouse over a descendant
            if (qq.contains(this, relatedTarget)) return;
                        
            self._options.onLeaveNotDescendants(e); 
        });
                
        qq.attach(self._element, 'drop', function(e){
            if (!self._isValidFileDrag(e)) return;
            
            e.preventDefault();
            self._options.onDrop(e);
        });          
    },
    _isValidFileDrag: function(e){
        var dt = e.dataTransfer,
            // do not check dt.types.contains in webkit, because it crashes safari 4            
            isWebkit = navigator.userAgent.indexOf("AppleWebKit") > -1;                        

        // dt.effectAllowed is none in Safari 5
        // dt.types.contains check is for firefox            
        return dt && dt.effectAllowed != 'none' && 
            (dt.files || (!isWebkit && dt.types.contains && dt.types.contains('Files')));
        
    }        
}; 

qq.UploadButton = function(o){
    this._options = {
        element: null,  
        // if set to true adds multiple attribute to file input      
        multiple: false,
        // name attribute of file input
        name: 'file',
        onChange: function(input){},
        hoverClass: 'qq-upload-button-hover',
        focusClass: 'qq-upload-button-focus'                       
    };
    
    qq.extend(this._options, o);
        
    this._element = this._options.element;
    
    // make button suitable container for input
    qq.css(this._element, {
        position: 'relative',
        overflow: 'hidden',
        // Make sure browse button is in the right side
        // in Internet Explorer
        direction: 'ltr'
    });   
    
    this._input = this._createInput();
};

qq.UploadButton.prototype = {
    /* returns file input element */    
    getInput: function(){
        return this._input;
    },
    /* cleans/recreates the file input */
    reset: function(){
        if (this._input.parentNode){
            qq.remove(this._input);    
        }                
        
        qq.removeClass(this._element, this._options.focusClass);
        this._input = this._createInput();
    },    
    _createInput: function(){                
        var input = document.createElement("input");
        
        if (this._options.multiple){
            input.setAttribute("multiple", "multiple");
        }
                
        input.setAttribute("type", "file");
        input.setAttribute("name", this._options.name);
        
        qq.css(input, {
            position: 'absolute',
            // in Opera only 'browse' button
            // is clickable and it is located at
            // the right side of the input
            right: 0,
            top: 0,
            fontFamily: 'Arial',
            // 4 persons reported this, the max values that worked for them were 243, 236, 236, 118
            fontSize: '118px',
            margin: 0,
            padding: 0,
            cursor: 'pointer',
            opacity: 0
        });
        
        this._element.appendChild(input);

        var self = this;
        qq.attach(input, 'change', function(){
            self._options.onChange(input);
        });
                
        qq.attach(input, 'mouseover', function(){
            qq.addClass(self._element, self._options.hoverClass);
        });
        qq.attach(input, 'mouseout', function(){
            qq.removeClass(self._element, self._options.hoverClass);
        });
        qq.attach(input, 'focus', function(){
            qq.addClass(self._element, self._options.focusClass);
        });
        qq.attach(input, 'blur', function(){
            qq.removeClass(self._element, self._options.focusClass);
        });

        // IE and Opera, unfortunately have 2 tab stops on file input
        // which is unacceptable in our case, disable keyboard access
        if (window.attachEvent){
            // it is IE or Opera
            input.setAttribute('tabIndex', "-1");
        }

        return input;            
    }        
};

/**
 * Class for uploading files, uploading itself is handled by child classes
 */
qq.UploadHandlerAbstract = function(o){
    this._options = {
        debug: false,
        action: '/upload.php',
        // maximum number of concurrent uploads        
        maxConnections: 999,
        onProgress: function(id, fileName, loaded, total){},
        onComplete: function(id, fileName, response){},
        onCancel: function(id, fileName){}
    };
    qq.extend(this._options, o);    
    
    this._queue = [];
    // params for files in queue
    this._params = [];
};
qq.UploadHandlerAbstract.prototype = {
    log: function(str){
        if (this._options.debug && window.console) console.log('[uploader] ' + str);        
    },
    /**
     * Adds file or file input to the queue
     * @returns id
     **/    
    add: function(file){},
    /**
     * Sends the file identified by id and additional query params to the server
     */
    upload: function(id, params){
        var len = this._queue.push(id);

        var copy = {};        
        qq.extend(copy, params);
        this._params[id] = copy;        
                
        // if too many active uploads, wait...
        if (len <= this._options.maxConnections){               
            this._upload(id, this._params[id]);
        }
    },
    /**
     * Cancels file upload by id
     */
    cancel: function(id){
        this._cancel(id);
        this._dequeue(id);
    },
    /**
     * Cancells all uploads
     */
    cancelAll: function(){
        for (var i=0; i<this._queue.length; i++){
            this._cancel(this._queue[i]);
        }
        this._queue = [];
    },
    /**
     * Returns name of the file identified by id
     */
    getName: function(id){},
    /**
     * Returns size of the file identified by id
     */          
    getSize: function(id){},
    /**
     * Returns id of files being uploaded or
     * waiting for their turn
     */
    getQueue: function(){
        return this._queue;
    },
    /**
     * Actual upload method
     */
    _upload: function(id){},
    /**
     * Actual cancel method
     */
    _cancel: function(id){},     
    /**
     * Removes element from queue, starts upload of next
     */
    _dequeue: function(id){
        var i = qq.indexOf(this._queue, id);
        this._queue.splice(i, 1);
                
        var max = this._options.maxConnections;
        
        if (this._queue.length >= max && i < max){
            var nextId = this._queue[max-1];
            this._upload(nextId, this._params[nextId]);
        }
    }        
};

/**
 * Class for uploading files using form and iframe
 * @inherits qq.UploadHandlerAbstract
 */
qq.UploadHandlerForm = function(o){
    qq.UploadHandlerAbstract.apply(this, arguments);
       
    this._inputs = {};
};
// @inherits qq.UploadHandlerAbstract
qq.extend(qq.UploadHandlerForm.prototype, qq.UploadHandlerAbstract.prototype);

qq.extend(qq.UploadHandlerForm.prototype, {
    add: function(fileInput){
        fileInput.setAttribute('name', 'qqfile');
        var id = 'qq-upload-handler-iframe' + qq.getUniqueId();       
        
        this._inputs[id] = fileInput;
        
        // remove file input from DOM
        if (fileInput.parentNode){
            qq.remove(fileInput);
        }
                
        return id;
    },
    getName: function(id){
        // get input value and remove path to normalize
        return this._inputs[id].value.replace(/.*(\/|\\)/, "");
    },    
    _cancel: function(id){
        this._options.onCancel(id, this.getName(id));
        
        delete this._inputs[id];        

        var iframe = document.getElementById(id);
        if (iframe){
            // to cancel request set src to something else
            // we use src="javascript:false;" because it doesn't
            // trigger ie6 prompt on https
            iframe.setAttribute('src', 'javascript:false;');

            qq.remove(iframe);
        }
    },     
    _upload: function(id, params){                        
        var input = this._inputs[id];
        
        if (!input){
            throw new Error('file with passed id was not added, or already uploaded or cancelled');
        }                

        var fileName = this.getName(id);
                
        var iframe = this._createIframe(id);
        var form = this._createForm(iframe, params);
        form.appendChild(input);

        var self = this;
        this._attachLoadEvent(iframe, function(){                                 
            self.log('iframe loaded');
            
            var response = self._getIframeContentJSON(iframe);

            self._options.onComplete(id, fileName, response);
            self._dequeue(id);
            
            delete self._inputs[id];
            // timeout added to fix busy state in FF3.6
            setTimeout(function(){
                qq.remove(iframe);
            }, 1);
        });

        form.submit();        
        qq.remove(form);        
        
        return id;
    }, 
    _attachLoadEvent: function(iframe, callback){
        qq.attach(iframe, 'load', function(){
            // when we remove iframe from dom
            // the request stops, but in IE load
            // event fires
            if (!iframe.parentNode){
                return;
            }

            // fixing Opera 10.53
            if (iframe.contentDocument &&
                iframe.contentDocument.body &&
                iframe.contentDocument.body.innerHTML == "false"){
                // In Opera event is fired second time
                // when body.innerHTML changed from false
                // to server response approx. after 1 sec
                // when we upload file with iframe
                return;
            }

            callback();
        });
    },
    /**
     * Returns json object received by iframe from server.
     */
    _getIframeContentJSON: function(iframe){
        // iframe.contentWindow.document - for IE<7
        var doc = iframe.contentDocument ? iframe.contentDocument: iframe.contentWindow.document,
            response;
        
        this.log("converting iframe's innerHTML to JSON");
        this.log("innerHTML = " + doc.body.innerHTML);
                        
        try {
            response = eval("(" + doc.body.innerHTML + ")");
        } catch(err){
            response = {};
        }        

        return response;
    },
    /**
     * Creates iframe with unique name
     */
    _createIframe: function(id){
        // We can't use following code as the name attribute
        // won't be properly registered in IE6, and new window
        // on form submit will open
        // var iframe = document.createElement('iframe');
        // iframe.setAttribute('name', id);

        var iframe = qq.toElement('<iframe src="javascript:false;" name="' + id + '" />');
        // src="javascript:false;" removes ie6 prompt on https

        iframe.setAttribute('id', id);

        iframe.style.display = 'none';
        document.body.appendChild(iframe);

        return iframe;
    },
    /**
     * Creates form, that will be submitted to iframe
     */
    _createForm: function(iframe, params){
        // We can't use the following code in IE6
        // var form = document.createElement('form');
        // form.setAttribute('method', 'post');
        // form.setAttribute('enctype', 'multipart/form-data');
        // Because in this case file won't be attached to request
        var form = qq.toElement('<form method="post" enctype="multipart/form-data"></form>');

        var queryString = qq.obj2url(params, this._options.action);

        form.setAttribute('action', queryString);
        form.setAttribute('target', iframe.name);
        form.style.display = 'none';
        document.body.appendChild(form);

        return form;
    }
});

/**
 * Class for uploading files using xhr
 * @inherits qq.UploadHandlerAbstract
 */
qq.UploadHandlerXhr = function(o){
    qq.UploadHandlerAbstract.apply(this, arguments);

    this._files = [];
    this._xhrs = [];
    
    // current loaded size in bytes for each file 
    this._loaded = [];
};

// static method
qq.UploadHandlerXhr.isSupported = function(){
    var input = document.createElement('input');
    input.type = 'file';        
    
    return (
        'multiple' in input &&
        typeof File != "undefined" &&
        typeof (new XMLHttpRequest()).upload != "undefined" );       
};

// @inherits qq.UploadHandlerAbstract
qq.extend(qq.UploadHandlerXhr.prototype, qq.UploadHandlerAbstract.prototype);

qq.extend(qq.UploadHandlerXhr.prototype, {
    /**
     * Adds file to the queue
     * Returns id to use with upload, cancel
     **/    
    add: function(file){
        if (!(file instanceof File)){
            throw new Error('Passed obj in not a File (in qq.UploadHandlerXhr)');
        }
                
        return this._files.push(file) - 1;        
    },
    getName: function(id){        
        var file = this._files[id];
        // fix missing name in Safari 4
        return file.fileName != null ? file.fileName : file.name;       
    },
    getSize: function(id){
        var file = this._files[id];
        return file.fileSize != null ? file.fileSize : file.size;
    },    
    /**
     * Returns uploaded bytes for file identified by id 
     */    
    getLoaded: function(id){
        return this._loaded[id] || 0; 
    },
    /**
     * Sends the file identified by id and additional query params to the server
     * @param {Object} params name-value string pairs
     */    
    _upload: function(id, params){
        var file = this._files[id],
            name = this.getName(id),
            size = this.getSize(id);
                
        this._loaded[id] = 0;
                                
        var xhr = this._xhrs[id] = new XMLHttpRequest();
        var self = this;
                                        
        xhr.upload.onprogress = function(e){
            if (e.lengthComputable){
                self._loaded[id] = e.loaded;
                self._options.onProgress(id, name, e.loaded, e.total);
            }
        };

        xhr.onreadystatechange = function(){            
            if (xhr.readyState == 4){
                self._onComplete(id, xhr);                    
            }
        };

        // build query string
        params = params || {};
        params['qqfile'] = name;
        var queryString = qq.obj2url(params, this._options.action);

        xhr.open("POST", queryString, true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
        xhr.setRequestHeader("X-File-Name", encodeURIComponent(name));
        xhr.setRequestHeader("Content-Type", "application/octet-stream");
        xhr.send(file);
    },
    _onComplete: function(id, xhr){
        // the request was aborted/cancelled
        if (!this._files[id]) return;
        
        var name = this.getName(id);
        var size = this.getSize(id);
        
        this._options.onProgress(id, name, size, size);
                
        if (xhr.status == 200){
            this.log("xhr - server response received");
            this.log("responseText = " + xhr.responseText);
                        
            var response;
                    
            try {
                response = eval("(" + xhr.responseText + ")");
            } catch(err){
                response = {};
            }
            
            this._options.onComplete(id, name, response);
                        
        } else {                   
            this._options.onComplete(id, name, {});
        }
                
        this._files[id] = null;
        this._xhrs[id] = null;    
        this._dequeue(id);                    
    },
    _cancel: function(id){
        this._options.onCancel(id, this.getName(id));
        
        this._files[id] = null;
        
        if (this._xhrs[id]){
            this._xhrs[id].abort();
            this._xhrs[id] = null;                                   
        }
    }
});
/**
 * Version: 1.0 Alpha-1 
 * Build Date: 13-Nov-2007
 * Copyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * License: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/. 
 * Website: http://www.datejs.com/ or http://www.coolite.com/datejs/
 */
Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],firstLetterDayNames:["S","M","T","W","T","F","S"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|after|from)/i,subtract:/^(\-|before|ago)/i,yesterday:/^yesterday/i,today:/^t(oday)?/i,tomorrow:/^tomorrow/i,now:/^n(ow)?/i,millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^min(ute)?s?/i,hour:/^h(ou)?rs?/i,week:/^w(ee)?k/i,month:/^m(o(nth)?s?)?/i,day:/^d(ays?)?/i,year:/^y((ea)?rs?)?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a|p)/i},abbreviatedTimeZoneStandard:{GMT:"-000",EST:"-0400",CST:"-0500",MST:"-0600",PST:"-0700"},abbreviatedTimeZoneDST:{GMT:"-000",EDT:"-0500",CDT:"-0600",MDT:"-0700",PDT:"-0800"}};
Date.getMonthNumberFromName=function(name){var n=Date.CultureInfo.monthNames,m=Date.CultureInfo.abbreviatedMonthNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.getDayNumberFromName=function(name){var n=Date.CultureInfo.dayNames,m=Date.CultureInfo.abbreviatedDayNames,o=Date.CultureInfo.shortestDayNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.isLeapYear=function(year){return(((year%4===0)&&(year%100!==0))||(year%400===0));};Date.getDaysInMonth=function(year,month){return[31,(Date.isLeapYear(year)?29:28),31,30,31,30,31,31,30,31,30,31][month];};Date.getTimezoneOffset=function(s,dst){return(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()]:Date.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];};Date.getTimezoneAbbreviation=function(offset,dst){var n=(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST:Date.CultureInfo.abbreviatedTimeZoneStandard,p;for(p in n){if(n[p]===offset){return p;}}
return null;};Date.prototype.clone=function(){return new Date(this.getTime());};Date.prototype.compareTo=function(date){if(isNaN(this)){throw new Error(this);}
if(date instanceof Date&&!isNaN(date)){return(this>date)?1:(this<date)?-1:0;}else{throw new TypeError(date);}};Date.prototype.equals=function(date){return(this.compareTo(date)===0);};Date.prototype.between=function(start,end){var t=this.getTime();return t>=start.getTime()&&t<=end.getTime();};Date.prototype.addMilliseconds=function(value){this.setMilliseconds(this.getMilliseconds()+value);return this;};Date.prototype.addSeconds=function(value){return this.addMilliseconds(value*1000);};Date.prototype.addMinutes=function(value){return this.addMilliseconds(value*60000);};Date.prototype.addHours=function(value){return this.addMilliseconds(value*3600000);};Date.prototype.addDays=function(value){return this.addMilliseconds(value*86400000);};Date.prototype.addWeeks=function(value){return this.addMilliseconds(value*604800000);};Date.prototype.addMonths=function(value){var n=this.getDate();this.setDate(1);this.setMonth(this.getMonth()+value);this.setDate(Math.min(n,this.getDaysInMonth()));return this;};Date.prototype.addYears=function(value){return this.addMonths(value*12);};Date.prototype.add=function(config){if(typeof config=="number"){this._orient=config;return this;}
var x=config;if(x.millisecond||x.milliseconds){this.addMilliseconds(x.millisecond||x.milliseconds);}
if(x.second||x.seconds){this.addSeconds(x.second||x.seconds);}
if(x.minute||x.minutes){this.addMinutes(x.minute||x.minutes);}
if(x.hour||x.hours){this.addHours(x.hour||x.hours);}
if(x.month||x.months){this.addMonths(x.month||x.months);}
if(x.year||x.years){this.addYears(x.year||x.years);}
if(x.day||x.days){this.addDays(x.day||x.days);}
return this;};Date._validate=function(value,min,max,name){if(typeof value!="number"){throw new TypeError(value+" is not a Number.");}else if(value<min||value>max){throw new RangeError(value+" is not a valid value for "+name+".");}
return true;};Date.validateMillisecond=function(n){return Date._validate(n,0,999,"milliseconds");};Date.validateSecond=function(n){return Date._validate(n,0,59,"seconds");};Date.validateMinute=function(n){return Date._validate(n,0,59,"minutes");};Date.validateHour=function(n){return Date._validate(n,0,23,"hours");};Date.validateDay=function(n,year,month){return Date._validate(n,1,Date.getDaysInMonth(year,month),"days");};Date.validateMonth=function(n){return Date._validate(n,0,11,"months");};Date.validateYear=function(n){return Date._validate(n,1,9999,"seconds");};Date.prototype.set=function(config){var x=config;if(!x.millisecond&&x.millisecond!==0){x.millisecond=-1;}
if(!x.second&&x.second!==0){x.second=-1;}
if(!x.minute&&x.minute!==0){x.minute=-1;}
if(!x.hour&&x.hour!==0){x.hour=-1;}
if(!x.day&&x.day!==0){x.day=-1;}
if(!x.month&&x.month!==0){x.month=-1;}
if(!x.year&&x.year!==0){x.year=-1;}
if(x.millisecond!=-1&&Date.validateMillisecond(x.millisecond)){this.addMilliseconds(x.millisecond-this.getMilliseconds());}
if(x.second!=-1&&Date.validateSecond(x.second)){this.addSeconds(x.second-this.getSeconds());}
if(x.minute!=-1&&Date.validateMinute(x.minute)){this.addMinutes(x.minute-this.getMinutes());}
if(x.hour!=-1&&Date.validateHour(x.hour)){this.addHours(x.hour-this.getHours());}
if(x.month!==-1&&Date.validateMonth(x.month)){this.addMonths(x.month-this.getMonth());}
if(x.year!=-1&&Date.validateYear(x.year)){this.addYears(x.year-this.getFullYear());}
if(x.day!=-1&&Date.validateDay(x.day,this.getFullYear(),this.getMonth())){this.addDays(x.day-this.getDate());}
if(x.timezone){this.setTimezone(x.timezone);}
if(x.timezoneOffset){this.setTimezoneOffset(x.timezoneOffset);}
return this;};Date.prototype.clearTime=function(){this.setHours(0);this.setMinutes(0);this.setSeconds(0);this.setMilliseconds(0);return this;};Date.prototype.isLeapYear=function(){var y=this.getFullYear();return(((y%4===0)&&(y%100!==0))||(y%400===0));};Date.prototype.isWeekday=function(){return!(this.is().sat()||this.is().sun());};Date.prototype.getDaysInMonth=function(){return Date.getDaysInMonth(this.getFullYear(),this.getMonth());};Date.prototype.moveToFirstDayOfMonth=function(){return this.set({day:1});};Date.prototype.moveToLastDayOfMonth=function(){return this.set({day:this.getDaysInMonth()});};Date.prototype.moveToDayOfWeek=function(day,orient){var diff=(day-this.getDay()+7*(orient||+1))%7;return this.addDays((diff===0)?diff+=7*(orient||+1):diff);};Date.prototype.moveToMonth=function(month,orient){var diff=(month-this.getMonth()+12*(orient||+1))%12;return this.addMonths((diff===0)?diff+=12*(orient||+1):diff);};Date.prototype.getDayOfYear=function(){return Math.floor((this-new Date(this.getFullYear(),0,1))/86400000);};Date.prototype.getWeekOfYear=function(firstDayOfWeek){var y=this.getFullYear(),m=this.getMonth(),d=this.getDate();var dow=firstDayOfWeek||Date.CultureInfo.firstDayOfWeek;var offset=7+1-new Date(y,0,1).getDay();if(offset==8){offset=1;}
var daynum=((Date.UTC(y,m,d,0,0,0)-Date.UTC(y,0,1,0,0,0))/86400000)+1;var w=Math.floor((daynum-offset+7)/7);if(w===dow){y--;var prevOffset=7+1-new Date(y,0,1).getDay();if(prevOffset==2||prevOffset==8){w=53;}else{w=52;}}
return w;};Date.prototype.isDST=function(){return this.toString().match(/(E|C|M|P)(S|D)T/)[2]=="D";};Date.prototype.getTimezone=function(){return Date.getTimezoneAbbreviation(this.getUTCOffset,this.isDST());};Date.prototype.setTimezoneOffset=function(s){var here=this.getTimezoneOffset(),there=Number(s)*-6/10;this.addMinutes(there-here);return this;};Date.prototype.setTimezone=function(s){return this.setTimezoneOffset(Date.getTimezoneOffset(s));};Date.prototype.getUTCOffset=function(){var n=this.getTimezoneOffset()*-10/6,r;if(n<0){r=(n-10000).toString();return r[0]+r.substr(2);}else{r=(n+10000).toString();return"+"+r.substr(1);}};Date.prototype.getDayName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedDayNames[this.getDay()]:Date.CultureInfo.dayNames[this.getDay()];};Date.prototype.getMonthName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedMonthNames[this.getMonth()]:Date.CultureInfo.monthNames[this.getMonth()];};Date.prototype._toString=Date.prototype.toString;Date.prototype.toString=function(format){var self=this;var p=function p(s){return(s.toString().length==1)?"0"+s:s;};return format?format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g,function(format){switch(format){case"hh":return p(self.getHours()<13?self.getHours():(self.getHours()-12));case"h":return self.getHours()<13?self.getHours():(self.getHours()-12);case"HH":return p(self.getHours());case"H":return self.getHours();case"mm":return p(self.getMinutes());case"m":return self.getMinutes();case"ss":return p(self.getSeconds());case"s":return self.getSeconds();case"yyyy":return self.getFullYear();case"yy":return self.getFullYear().toString().substring(2,4);case"dddd":return self.getDayName();case"ddd":return self.getDayName(true);case"dd":return p(self.getDate());case"d":return self.getDate().toString();case"MMMM":return self.getMonthName();case"MMM":return self.getMonthName(true);case"MM":return p((self.getMonth()+1));case"M":return self.getMonth()+1;case"t":return self.getHours()<12?Date.CultureInfo.amDesignator.substring(0,1):Date.CultureInfo.pmDesignator.substring(0,1);case"tt":return self.getHours()<12?Date.CultureInfo.amDesignator:Date.CultureInfo.pmDesignator;case"zzz":case"zz":case"z":return"";}}):this._toString();};
Date.now=function(){return new Date();};Date.today=function(){return Date.now().clearTime();};Date.prototype._orient=+1;Date.prototype.next=function(){this._orient=+1;return this;};Date.prototype.last=Date.prototype.prev=Date.prototype.previous=function(){this._orient=-1;return this;};Date.prototype._is=false;Date.prototype.is=function(){this._is=true;return this;};Number.prototype._dateElement="day";Number.prototype.fromNow=function(){var c={};c[this._dateElement]=this;return Date.now().add(c);};Number.prototype.ago=function(){var c={};c[this._dateElement]=this*-1;return Date.now().add(c);};(function(){var $D=Date.prototype,$N=Number.prototype;var dx=("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),mx=("january february march april may june july august september october november december").split(/\s/),px=("Millisecond Second Minute Hour Day Week Month Year").split(/\s/),de;var df=function(n){return function(){if(this._is){this._is=false;return this.getDay()==n;}
return this.moveToDayOfWeek(n,this._orient);};};for(var i=0;i<dx.length;i++){$D[dx[i]]=$D[dx[i].substring(0,3)]=df(i);}
var mf=function(n){return function(){if(this._is){this._is=false;return this.getMonth()===n;}
return this.moveToMonth(n,this._orient);};};for(var j=0;j<mx.length;j++){$D[mx[j]]=$D[mx[j].substring(0,3)]=mf(j);}
var ef=function(j){return function(){if(j.substring(j.length-1)!="s"){j+="s";}
return this["add"+j](this._orient);};};var nf=function(n){return function(){this._dateElement=n;return this;};};for(var k=0;k<px.length;k++){de=px[k].toLowerCase();$D[de]=$D[de+"s"]=ef(px[k]);$N[de]=$N[de+"s"]=nf(de);}}());Date.prototype.toJSONString=function(){return this.toString("yyyy-MM-ddThh:mm:ssZ");};Date.prototype.toShortDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortDatePattern);};Date.prototype.toLongDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.longDatePattern);};Date.prototype.toShortTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortTimePattern);};Date.prototype.toLongTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.longTimePattern);};Date.prototype.getOrdinal=function(){switch(this.getDate()){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th";}};
(function(){Date.Parsing={Exception:function(s){this.message="Parse error at '"+s.substring(0,10)+" ...'";}};var $P=Date.Parsing;var _=$P.Operators={rtoken:function(r){return function(s){var mx=s.match(r);if(mx){return([mx[0],s.substring(mx[0].length)]);}else{throw new $P.Exception(s);}};},token:function(s){return function(s){return _.rtoken(new RegExp("^\s*"+s+"\s*"))(s);};},stoken:function(s){return _.rtoken(new RegExp("^"+s));},until:function(p){return function(s){var qx=[],rx=null;while(s.length){try{rx=p.call(this,s);}catch(e){qx.push(rx[0]);s=rx[1];continue;}
break;}
return[qx,s];};},many:function(p){return function(s){var rx=[],r=null;while(s.length){try{r=p.call(this,s);}catch(e){return[rx,s];}
rx.push(r[0]);s=r[1];}
return[rx,s];};},optional:function(p){return function(s){var r=null;try{r=p.call(this,s);}catch(e){return[null,s];}
return[r[0],r[1]];};},not:function(p){return function(s){try{p.call(this,s);}catch(e){return[null,s];}
throw new $P.Exception(s);};},ignore:function(p){return p?function(s){var r=null;r=p.call(this,s);return[null,r[1]];}:null;},product:function(){var px=arguments[0],qx=Array.prototype.slice.call(arguments,1),rx=[];for(var i=0;i<px.length;i++){rx.push(_.each(px[i],qx));}
return rx;},cache:function(rule){var cache={},r=null;return function(s){try{r=cache[s]=(cache[s]||rule.call(this,s));}catch(e){r=cache[s]=e;}
if(r instanceof $P.Exception){throw r;}else{return r;}};},any:function(){var px=arguments;return function(s){var r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){r=null;}
if(r){return r;}}
throw new $P.Exception(s);};},each:function(){var px=arguments;return function(s){var rx=[],r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){throw new $P.Exception(s);}
rx.push(r[0]);s=r[1];}
return[rx,s];};},all:function(){var px=arguments,_=_;return _.each(_.optional(px));},sequence:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;if(px.length==1){return px[0];}
return function(s){var r=null,q=null;var rx=[];for(var i=0;i<px.length;i++){try{r=px[i].call(this,s);}catch(e){break;}
rx.push(r[0]);try{q=d.call(this,r[1]);}catch(ex){q=null;break;}
s=q[1];}
if(!r){throw new $P.Exception(s);}
if(q){throw new $P.Exception(q[1]);}
if(c){try{r=c.call(this,r[1]);}catch(ey){throw new $P.Exception(r[1]);}}
return[rx,(r?r[1]:s)];};},between:function(d1,p,d2){d2=d2||d1;var _fn=_.each(_.ignore(d1),p,_.ignore(d2));return function(s){var rx=_fn.call(this,s);return[[rx[0][0],r[0][2]],rx[1]];};},list:function(p,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return(p instanceof Array?_.each(_.product(p.slice(0,-1),_.ignore(d)),p.slice(-1),_.ignore(c)):_.each(_.many(_.each(p,_.ignore(d))),px,_.ignore(c)));},set:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return function(s){var r=null,p=null,q=null,rx=null,best=[[],s],last=false;for(var i=0;i<px.length;i++){q=null;p=null;r=null;last=(px.length==1);try{r=px[i].call(this,s);}catch(e){continue;}
rx=[[r[0]],r[1]];if(r[1].length>0&&!last){try{q=d.call(this,r[1]);}catch(ex){last=true;}}else{last=true;}
if(!last&&q[1].length===0){last=true;}
if(!last){var qx=[];for(var j=0;j<px.length;j++){if(i!=j){qx.push(px[j]);}}
p=_.set(qx,d).call(this,q[1]);if(p[0].length>0){rx[0]=rx[0].concat(p[0]);rx[1]=p[1];}}
if(rx[1].length<best[1].length){best=rx;}
if(best[1].length===0){break;}}
if(best[0].length===0){return best;}
if(c){try{q=c.call(this,best[1]);}catch(ey){throw new $P.Exception(best[1]);}
best[1]=q[1];}
return best;};},forward:function(gr,fname){return function(s){return gr[fname].call(this,s);};},replace:function(rule,repl){return function(s){var r=rule.call(this,s);return[repl,r[1]];};},process:function(rule,fn){return function(s){var r=rule.call(this,s);return[fn.call(this,r[0]),r[1]];};},min:function(min,rule){return function(s){var rx=rule.call(this,s);if(rx[0].length<min){throw new $P.Exception(s);}
return rx;};}};var _generator=function(op){return function(){var args=null,rx=[];if(arguments.length>1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i<px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};};var gx="optional not ignore cache".split(/\s/);for(var i=0;i<gx.length;i++){_[gx[i]]=_generator(_[gx[i]]);}
var _vector=function(op){return function(){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};};var vx="each any all".split(/\s/);for(var j=0;j<vx.length;j++){_[vx[j]]=_vector(_[vx[j]]);}}());(function(){var flattenAndCompact=function(ax){var rx=[];for(var i=0;i<ax.length;i++){if(ax[i]instanceof Array){rx=rx.concat(flattenAndCompact(ax[i]));}else{if(ax[i]){rx.push(ax[i]);}}}
return rx;};Date.Grammar={};Date.Translator={hour:function(s){return function(){this.hour=Number(s);};},minute:function(s){return function(){this.minute=Number(s);};},second:function(s){return function(){this.second=Number(s);};},meridian:function(s){return function(){this.meridian=s.slice(0,1).toLowerCase();};},timezone:function(s){return function(){var n=s.replace(/[^\d\+\-]/g,"");if(n.length){this.timezoneOffset=Number(n);}else{this.timezone=s.toLowerCase();}};},day:function(x){var s=x[0];return function(){this.day=Number(s.match(/\d+/)[0]);};},month:function(s){return function(){this.month=((s.length==3)?Date.getMonthNumberFromName(s):(Number(s)-1));};},year:function(s){return function(){var n=Number(s);this.year=((s.length>2)?n:(n+(((n+2000)<Date.CultureInfo.twoDigitYearMax)?2000:1900)));};},rday:function(s){return function(){switch(s){case"yesterday":this.days=-1;break;case"tomorrow":this.days=1;break;case"today":this.days=0;break;case"now":this.days=0;this.now=true;break;}};},finishExact:function(x){x=(x instanceof Array)?x:[x];var now=new Date();this.year=now.getFullYear();this.month=now.getMonth();this.day=1;this.hour=0;this.minute=0;this.second=0;for(var i=0;i<x.length;i++){if(x[i]){x[i].call(this);}}
this.hour=(this.meridian=="p"&&this.hour<13)?this.hour+12:this.hour;if(this.day>Date.getDaysInMonth(this.year,this.month)){throw new RangeError(this.day+" is not a valid value for days.");}
var r=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);if(this.timezone){r.set({timezone:this.timezone});}else if(this.timezoneOffset){r.set({timezoneOffset:this.timezoneOffset});}
return r;},finish:function(x){x=(x instanceof Array)?flattenAndCompact(x):[x];if(x.length===0){return null;}
for(var i=0;i<x.length;i++){if(typeof x[i]=="function"){x[i].call(this);}}
if(this.now){return new Date();}
var today=Date.today();var method=null;var expression=!!(this.days!=null||this.orient||this.operator);if(expression){var gap,mod,orient;orient=((this.orient=="past"||this.operator=="subtract")?-1:1);if(this.weekday){this.unit="day";gap=(Date.getDayNumberFromName(this.weekday)-today.getDay());mod=7;this.days=gap?((gap+(orient*mod))%mod):(orient*mod);}
if(this.month){this.unit="month";gap=(this.month-today.getMonth());mod=12;this.months=gap?((gap+(orient*mod))%mod):(orient*mod);this.month=null;}
if(!this.unit){this.unit="day";}
if(this[this.unit+"s"]==null||this.operator!=null){if(!this.value){this.value=1;}
if(this.unit=="week"){this.unit="day";this.value=this.value*7;}
this[this.unit+"s"]=this.value*orient;}
return today.add(this);}else{if(this.meridian&&this.hour){this.hour=(this.hour<13&&this.meridian=="p")?this.hour+12:this.hour;}
if(this.weekday&&!this.day){this.day=(today.addDays((Date.getDayNumberFromName(this.weekday)-today.getDay()))).getDate();}
if(this.month&&!this.day){this.day=1;}
return today.set(this);}}};var _=Date.Parsing.Operators,g=Date.Grammar,t=Date.Translator,_fn;g.datePartDelimiter=_.rtoken(/^([\s\-\.\,\/\x27]+)/);g.timePartDelimiter=_.stoken(":");g.whiteSpace=_.rtoken(/^\s*/);g.generalDelimiter=_.rtoken(/^(([\s\,]|at|on)+)/);var _C={};g.ctoken=function(keys){var fn=_C[keys];if(!fn){var c=Date.CultureInfo.regexPatterns;var kx=keys.split(/\s+/),px=[];for(var i=0;i<kx.length;i++){px.push(_.replace(_.rtoken(c[kx[i]]),kx[i]));}
fn=_C[keys]=_.any.apply(null,px);}
return fn;};g.ctoken2=function(key){return _.rtoken(Date.CultureInfo.regexPatterns[key]);};g.h=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),t.hour));g.hh=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/),t.hour));g.H=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),t.hour));g.HH=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/),t.hour));g.m=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.minute));g.mm=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.minute));g.s=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.second));g.ss=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.second));g.hms=_.cache(_.sequence([g.H,g.mm,g.ss],g.timePartDelimiter));g.t=_.cache(_.process(g.ctoken2("shortMeridian"),t.meridian));g.tt=_.cache(_.process(g.ctoken2("longMeridian"),t.meridian));g.z=_.cache(_.process(_.rtoken(/^(\+|\-)?\s*\d\d\d\d?/),t.timezone));g.zz=_.cache(_.process(_.rtoken(/^(\+|\-)\s*\d\d\d\d/),t.timezone));g.zzz=_.cache(_.process(g.ctoken2("timezone"),t.timezone));g.timeSuffix=_.each(_.ignore(g.whiteSpace),_.set([g.tt,g.zzz]));g.time=_.each(_.optional(_.ignore(_.stoken("T"))),g.hms,g.timeSuffix);g.d=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.dd=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.ddd=g.dddd=_.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"),function(s){return function(){this.weekday=s;};}));g.M=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/),t.month));g.MM=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/),t.month));g.MMM=g.MMMM=_.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),t.month));g.y=_.cache(_.process(_.rtoken(/^(\d\d?)/),t.year));g.yy=_.cache(_.process(_.rtoken(/^(\d\d)/),t.year));g.yyy=_.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/),t.year));g.yyyy=_.cache(_.process(_.rtoken(/^(\d\d\d\d)/),t.year));_fn=function(){return _.each(_.any.apply(null,arguments),_.not(g.ctoken2("timeContext")));};g.day=_fn(g.d,g.dd);g.month=_fn(g.M,g.MMM);g.year=_fn(g.yyyy,g.yy);g.orientation=_.process(g.ctoken("past future"),function(s){return function(){this.orient=s;};});g.operator=_.process(g.ctoken("add subtract"),function(s){return function(){this.operator=s;};});g.rday=_.process(g.ctoken("yesterday tomorrow today now"),t.rday);g.unit=_.process(g.ctoken("minute hour day week month year"),function(s){return function(){this.unit=s;};});g.value=_.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/),function(s){return function(){this.value=s.replace(/\D/g,"");};});g.expression=_.set([g.rday,g.operator,g.value,g.unit,g.orientation,g.ddd,g.MMM]);_fn=function(){return _.set(arguments,g.datePartDelimiter);};g.mdy=_fn(g.ddd,g.month,g.day,g.year);g.ymd=_fn(g.ddd,g.year,g.month,g.day);g.dmy=_fn(g.ddd,g.day,g.month,g.year);g.date=function(s){return((g[Date.CultureInfo.dateElementOrder]||g.mdy).call(this,s));};g.format=_.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(fmt){if(g[fmt]){return g[fmt];}else{throw Date.Parsing.Exception(fmt);}}),_.process(_.rtoken(/^[^dMyhHmstz]+/),function(s){return _.ignore(_.stoken(s));}))),function(rules){return _.process(_.each.apply(null,rules),t.finishExact);});var _F={};var _get=function(f){return _F[f]=(_F[f]||g.format(f)[0]);};g.formats=function(fx){if(fx instanceof Array){var rx=[];for(var i=0;i<fx.length;i++){rx.push(_get(fx[i]));}
return _.any.apply(null,rx);}else{return _get(fx);}};g._formats=g.formats(["yyyy-MM-ddTHH:mm:ss","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","d"]);g._start=_.process(_.set([g.date,g.time,g.expression],g.generalDelimiter,g.whiteSpace),t.finish);g.start=function(s){try{var r=g._formats.call({},s);if(r[1].length===0){return r;}}catch(e){}
return g._start.call({},s);};}());Date._parse=Date.parse;Date.parse=function(s){var r=null;if(!s){return null;}
try{r=Date.Grammar.start.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};Date.getParseFunction=function(fx){var fn=Date.Grammar.formats(fx);return function(s){var r=null;try{r=fn.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};};Date.parseExact=function(s,fx){return Date.getParseFunction(fx)(s);};



function date (format, timestamp) {
    // +LICENCE
    // http://kevin.vanzonneveld.net
    // +   original by: Carlos R. L. Rodrigues (http://www.jsfromhell.com)
    // +      parts by: Peter-Paul Koch (http://www.quirksmode.org/js/beat.html)
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: MeEtc (http://yass.meetcweb.com)
    // +   improved by: Brad Touesnard
    // +   improved by: Tim Wiel
    // +   improved by: Bryan Elliott
    //
    // +   improved by: Brett Zamir (http://brett-zamir.me)
    // +   improved by: David Randall
    // +      input by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: Brett Zamir (http://brett-zamir.me)
    // +   improved by: Brett Zamir (http://brett-zamir.me)
    // +   improved by: Theriault
    // +  derived from: gettimeofday
    // +      input by: majak
    // +   bugfixed by: majak
    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +      input by: Alex
    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)
    // +   improved by: Theriault
    // +   improved by: Brett Zamir (http://brett-zamir.me)
    // +   improved by: Theriault
    // +   improved by: Thomas Beaucourt (http://www.webapp.fr)
    // +   improved by: JT
    // +   improved by: Theriault
    // +   improved by: Rafał Kukawski (http://blog.kukawski.pl)
    // +   bugfixed by: omid (http://phpjs.org/functions/380:380#comment_137122)
    // +      input by: Martin
    // +      input by: Alex Wilson
    // %        note 1: Uses global: php_js to store the default timezone
    // %        note 2: Although the function potentially allows timezone info (see notes), it currently does not set
    // %        note 2: per a timezone specified by date_default_timezone_set(). Implementers might use
    // %        note 2: this.php_js.currentTimezoneOffset and this.php_js.currentTimezoneDST set by that function
    // %        note 2: in order to adjust the dates in this function (or our other date functions!) accordingly
    // *     example 1: date('H:m:s \\m \\i\\s \\m\\o\\n\\t\\h', 1062402400);
    // *     returns 1: '09:09:40 m is month'
    // *     example 2: date('F j, Y, g:i a', 1062462400);
    // *     returns 2: 'September 2, 2003, 2:26 am'
    // *     example 3: date('Y W o', 1062462400);
    // *     returns 3: '2003 36 2003'
    // *     example 4: x = date('Y m d', (new Date()).getTime()/1000); 
    // *     example 4: (x+'').length == 10 // 2009 01 09
    // *     returns 4: true
    // *     example 5: date('W', 1104534000);
    // *     returns 5: '53'
    // *     example 6: date('B t', 1104534000);
    // *     returns 6: '999 31'
    // *     example 7: date('W U', 1293750000.82); // 2010-12-31
    // *     returns 7: '52 1293750000'
    // *     example 8: date('W', 1293836400); // 2011-01-01
    // *     returns 8: '52'
    // *     example 9: date('W Y-m-d', 1293974054); // 2011-01-02
    // *     returns 9: '52 2011-01-02'
    // -LICENCE
    var that = this,
        jsdate, f, formatChr = /\\?([a-z])/gi,
        formatChrCb,
        // Keep this here (works, but for code commented-out
        // below for file size reasons)
        //, tal= [],
        _pad = function (n, c) {
            if ((n = n + '').length < c) {
                return new Array((++c) - n.length).join('0') + n;
            }
            return n;
        },
        txt_words = ["Sun", "Mon", "Tues", "Wednes", "Thurs", "Fri", "Satur", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    formatChrCb = function (t, s) {
        return f[t] ? f[t]() : s;
    };
    f = {
        // Day
        d: function () { // Day of month w/leading 0; 01..31
            return _pad(f.j(), 2);
        },
        D: function () { // Shorthand day name; Mon...Sun
            return f.l().slice(0, 3);
        },
        j: function () { // Day of month; 1..31
            return jsdate.getDate();
        },
        l: function () { // Full day name; Monday...Sunday
            return txt_words[f.w()] + 'day';
        },
        N: function () { // ISO-8601 day of week; 1[Mon]..7[Sun]
            return f.w() || 7;
        },
        S: function () { // Ordinal suffix for day of month; st, nd, rd, th
            var j = f.j();
            return j > 4 && j < 21 ? 'th' : {1: 'st', 2: 'nd', 3: 'rd'}[j % 10] || 'th';
        },
        w: function () { // Day of week; 0[Sun]..6[Sat]
            return jsdate.getDay();
        },
        z: function () { // Day of year; 0..365
            var a = new Date(f.Y(), f.n() - 1, f.j()),
                b = new Date(f.Y(), 0, 1);
            return Math.round((a - b) / 864e5) + 1;
        },

        // Week
        W: function () { // ISO-8601 week number
            var a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3),
                b = new Date(a.getFullYear(), 0, 4);
            return _pad(1 + Math.round((a - b) / 864e5 / 7), 2);
        },

        // Month
        F: function () { // Full month name; January...December
            return txt_words[6 + f.n()];
        },
        m: function () { // Month w/leading 0; 01...12
            return _pad(f.n(), 2);
        },
        M: function () { // Shorthand month name; Jan...Dec
            return f.F().slice(0, 3);
        },
        n: function () { // Month; 1...12
            return jsdate.getMonth() + 1;
        },
        t: function () { // Days in month; 28...31
            return (new Date(f.Y(), f.n(), 0)).getDate();
        },

        // Year
        L: function () { // Is leap year?; 0 or 1
            return new Date(f.Y(), 1, 29).getMonth() === 1 | 0;
        },
        o: function () { // ISO-8601 year
            var n = f.n(),
                W = f.W(),
                Y = f.Y();
            return Y + (n === 12 && W < 9 ? -1 : n === 1 && W > 9);
        },
        Y: function () { // Full year; e.g. 1980...2010
            return jsdate.getFullYear();
        },
        y: function () { // Last two digits of year; 00...99
            return (f.Y() + "").slice(-2);
        },

        // Time
        a: function () { // am or pm
            return jsdate.getHours() > 11 ? "pm" : "am";
        },
        A: function () { // AM or PM
            return f.a().toUpperCase();
        },
        B: function () { // Swatch Internet time; 000..999
            var H = jsdate.getUTCHours() * 36e2,
                // Hours
                i = jsdate.getUTCMinutes() * 60,
                // Minutes
                s = jsdate.getUTCSeconds(); // Seconds
            return _pad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3);
        },
        g: function () { // 12-Hours; 1..12
            return f.G() % 12 || 12;
        },
        G: function () { // 24-Hours; 0..23
            return jsdate.getHours();
        },
        h: function () { // 12-Hours w/leading 0; 01..12
            return _pad(f.g(), 2);
        },
        H: function () { // 24-Hours w/leading 0; 00..23
            return _pad(f.G(), 2);
        },
        i: function () { // Minutes w/leading 0; 00..59
            return _pad(jsdate.getMinutes(), 2);
        },
        s: function () { // Seconds w/leading 0; 00..59
            return _pad(jsdate.getSeconds(), 2);
        },
        u: function () { // Microseconds; 000000-999000
            return _pad(jsdate.getMilliseconds() * 1000, 6);
        },

        // Timezone
        e: function () { // Timezone identifier; e.g. Atlantic/Azores, ...
            // The following works, but requires inclusion of the very large
            // timezone_abbreviations_list() function.
/*              return this.date_default_timezone_get();
*/
            throw 'Not supported (see source code of date() for timezone on how to add support)';
        },
        I: function () { // DST observed?; 0 or 1
            // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC.
            // If they are not equal, then DST is observed.
            var a = new Date(f.Y(), 0),
                // Jan 1
                c = Date.UTC(f.Y(), 0),
                // Jan 1 UTC
                b = new Date(f.Y(), 6),
                // Jul 1
                d = Date.UTC(f.Y(), 6); // Jul 1 UTC
            return 0 + ((a - c) !== (b - d));
        },
        O: function () { // Difference to GMT in hour format; e.g. +0200
            var tzo = jsdate.getTimezoneOffset(),
                a = Math.abs(tzo);
            return (tzo > 0 ? "-" : "+") + _pad(Math.floor(a / 60) * 100 + a % 60, 4);
        },
        P: function () { // Difference to GMT w/colon; e.g. +02:00
            var O = f.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },
        T: function () { // Timezone abbreviation; e.g. EST, MDT, ...
            // The following works, but requires inclusion of the very
            // large timezone_abbreviations_list() function.
/*              var abbr = '', i = 0, os = 0, default = 0;
            if (!tal.length) {
                tal = that.timezone_abbreviations_list();
            }
            if (that.php_js && that.php_js.default_timezone) {
                default = that.php_js.default_timezone;
                for (abbr in tal) {
                    for (i=0; i < tal[abbr].length; i++) {
                        if (tal[abbr][i].timezone_id === default) {
                            return abbr.toUpperCase();
                        }
                    }
                }
            }
            for (abbr in tal) {
                for (i = 0; i < tal[abbr].length; i++) {
                    os = -jsdate.getTimezoneOffset() * 60;
                    if (tal[abbr][i].offset === os) {
                        return abbr.toUpperCase();
                    }
                }
            }
*/
            return 'UTC';
        },
        Z: function () { // Timezone offset in seconds (-43200...50400)
            return -jsdate.getTimezoneOffset() * 60;
        },

        // Full Date/Time
        c: function () { // ISO-8601 date.
            return 'Y-m-d\\Th:i:sP'.replace(formatChr, formatChrCb);
        },
        r: function () { // RFC 2822
            return 'D, d M Y H:i:s O'.replace(formatChr, formatChrCb);
        },
        U: function () { // Seconds since UNIX epoch
            return jsdate.getTime() / 1000 | 0;
        }
    };
    this.date = function (format, timestamp) {
        that = this;
        jsdate = ((typeof timestamp === 'undefined') ? new Date() : // Not provided
        (timestamp instanceof Date) ? new Date(timestamp) : // JS Date()
        new Date(timestamp * 1000) // UNIX timestamp (auto-convert to int)
        );
        return format.replace(formatChr, formatChrCb);
    };
    return this.date(format, timestamp);
}
// +LICENCE
/**
 * jquery.Jcrop.js v0.9.9
 * jQuery Image Cropping Plugin
 * @author Kelly Hallman <khallman@gmail.com>
 * Copyright (c) 2008-2011 Kelly Hallman - released under MIT License {{{
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * }}}
 */
// -LICENCE
(function ($) {

  $.Jcrop = function (obj, opt) {
    var options = $.extend({}, $.Jcrop.defaults),
        docOffset, lastcurs, ie6mode = false;

    // Internal Methods {{{
    function px(n) {
      return parseInt(n, 10) + 'px';
    }
    function pct(n) {
      return parseInt(n, 10) + '%';
    }
    function cssClass(cl) {
      return options.baseClass + '-' + cl;
    }
    function supportsColorFade() {
      return $.fx.step.hasOwnProperty('backgroundColor');
    }
    function getPos(obj) //{{{
    {
      // Updated in v0.9.4 to use built-in dimensions plugin
      var pos = $(obj).offset();
      return [pos.left, pos.top];
    }
    //}}}
    function mouseAbs(e) //{{{
    {
      return [(e.pageX - docOffset[0]), (e.pageY - docOffset[1])];
    }
    //}}}
    function setOptions(opt) //{{{
    {
      if (typeof(opt) !== 'object') {
        opt = {};
      }
      options = $.extend(options, opt);

      if (typeof(options.onChange) !== 'function') {
        options.onChange = function () {};
      }
      if (typeof(options.onSelect) !== 'function') {
        options.onSelect = function () {};
      }
      if (typeof(options.onRelease) !== 'function') {
        options.onRelease = function () {};
      }
    }
    //}}}
    function myCursor(type) //{{{
    {
      if (type !== lastcurs) {
        Tracker.setCursor(type);
        lastcurs = type;
      }
    }
    //}}}
    function startDragMode(mode, pos) //{{{
    {
      docOffset = getPos($img);
      Tracker.setCursor(mode === 'move' ? mode : mode + '-resize');

      if (mode === 'move') {
        return Tracker.activateHandlers(createMover(pos), doneSelect);
      }

      var fc = Coords.getFixed();
      var opp = oppLockCorner(mode);
      var opc = Coords.getCorner(oppLockCorner(opp));

      Coords.setPressed(Coords.getCorner(opp));
      Coords.setCurrent(opc);

      Tracker.activateHandlers(dragmodeHandler(mode, fc), doneSelect);
    }
    //}}}
    function dragmodeHandler(mode, f) //{{{
    {
      return function (pos) {
        if (!options.aspectRatio) {
          switch (mode) {
          case 'e':
            pos[1] = f.y2;
            break;
          case 'w':
            pos[1] = f.y2;
            break;
          case 'n':
            pos[0] = f.x2;
            break;
          case 's':
            pos[0] = f.x2;
            break;
          }
        } else {
          switch (mode) {
          case 'e':
            pos[1] = f.y + 1;
            break;
          case 'w':
            pos[1] = f.y + 1;
            break;
          case 'n':
            pos[0] = f.x + 1;
            break;
          case 's':
            pos[0] = f.x + 1;
            break;
          }
        }
        Coords.setCurrent(pos);
        Selection.update();
      };
    }
    //}}}
    function createMover(pos) //{{{
    {
      var lloc = pos;
      KeyManager.watchKeys();

      return function (pos) {
        Coords.moveOffset([pos[0] - lloc[0], pos[1] - lloc[1]]);
        lloc = pos;

        Selection.update();
      };
    }
    //}}}
    function oppLockCorner(ord) //{{{
    {
      switch (ord) {
      case 'n':
        return 'sw';
      case 's':
        return 'nw';
      case 'e':
        return 'nw';
      case 'w':
        return 'ne';
      case 'ne':
        return 'sw';
      case 'nw':
        return 'se';
      case 'se':
        return 'nw';
      case 'sw':
        return 'ne';
      }
    }
    //}}}
    function createDragger(ord) //{{{
    {
      return function (e) {
        if (options.disabled) {
          return false;
        }
        if ((ord === 'move') && !options.allowMove) {
          return false;
        }
        btndown = true;
        startDragMode(ord, mouseAbs(e));
        e.stopPropagation();
        e.preventDefault();
        return false;
      };
    }
    //}}}
    function presize($obj, w, h) //{{{
    {
      var nw = $obj.width(),
          nh = $obj.height();
      if ((nw > w) && w > 0) {
        nw = w;
        nh = (w / $obj.width()) * $obj.height();
      }
      if ((nh > h) && h > 0) {
        nh = h;
        nw = (h / $obj.height()) * $obj.width();
      }
      xscale = $obj.width() / nw;
      yscale = $obj.height() / nh;
      $obj.width(nw).height(nh);
    }
    //}}}
    function unscale(c) //{{{
    {
      return {
        x: parseInt(c.x * xscale, 10),
        y: parseInt(c.y * yscale, 10),
        x2: parseInt(c.x2 * xscale, 10),
        y2: parseInt(c.y2 * yscale, 10),
        w: parseInt(c.w * xscale, 10),
        h: parseInt(c.h * yscale, 10)
      };
    }
    //}}}
    function doneSelect(pos) //{{{
    {
      var c = Coords.getFixed();
      if ((c.w > options.minSelect[0]) && (c.h > options.minSelect[1])) {
        Selection.enableHandles();
        Selection.done();
      } else {
        Selection.release();
      }
      Tracker.setCursor(options.allowSelect ? 'crosshair' : 'default');
    }
    //}}}
    function newSelection(e) //{{{
    {
      if (options.disabled) {
        return false;
      }
      if (!options.allowSelect) {
        return false;
      }
      btndown = true;
      docOffset = getPos($img);
      Selection.disableHandles();
      myCursor('crosshair');
      var pos = mouseAbs(e);
      Coords.setPressed(pos);
      Selection.update();
      Tracker.activateHandlers(selectDrag, doneSelect);
      KeyManager.watchKeys();

      e.stopPropagation();
      e.preventDefault();
      return false;
    }
    //}}}
    function selectDrag(pos) //{{{
    {
      Coords.setCurrent(pos);
      Selection.update();
    }
    //}}}
    function newTracker() //{{{
    {
      var trk = $('<div></div>').addClass(cssClass('tracker'));
      if ($.browser.msie) {
        trk.css({
          opacity: 0,
          backgroundColor: 'white'
        });
      }
      return trk;
    }
    //}}}

    // }}}
    // Initialization {{{
    // Sanitize some options {{{
    if ($.browser.msie && ($.browser.version.split('.')[0] === '6')) {
      ie6mode = true;
    }
    if (typeof(obj) !== 'object') {
      obj = $(obj)[0];
    }
    if (typeof(opt) !== 'object') {
      opt = {};
    }
    // }}}
    setOptions(opt);
    // Initialize some jQuery objects {{{
    // The values are SET on the image(s) for the interface
    // If the original image has any of these set, they will be reset
    // However, if you destroy() the Jcrop instance the original image's
    // character in the DOM will be as you left it.
    var img_css = {
      border: 'none',
      margin: 0,
      padding: 0,
      position: 'absolute'
    };

    var $origimg = $(obj);
    var $img = $origimg.clone().removeAttr('id').css(img_css);

    $img.width($origimg.width());
    $img.height($origimg.height());
    $origimg.after($img).hide();

    presize($img, options.boxWidth, options.boxHeight);

    var boundx = $img.width(),
        boundy = $img.height(),
        
        
        $div = $('<div />').width(boundx).height(boundy).addClass(cssClass('holder')).css({
        position: 'relative',
        backgroundColor: options.bgColor
      }).insertAfter($origimg).append($img);

    delete(options.bgColor);
    if (options.addClass) {
      $div.addClass(options.addClass);
    }

    var $img2 = $('<img />')
        .attr('src', $img.attr('src')).css(img_css).width(boundx).height(boundy),

        $img_holder = $('<div />') 
        .width(pct(100)).height(pct(100)).css({
          zIndex: 310,
          position: 'absolute',
          overflow: 'hidden'
        }).append($img2),

        $hdl_holder = $('<div />') 
        .width(pct(100)).height(pct(100)).css('zIndex', 320), 

        $sel = $('<div />') 
        .css({
          position: 'absolute',
          zIndex: 300
        }).insertBefore($img).append($img_holder, $hdl_holder); 

    if (ie6mode) {
      $sel.css({
        overflowY: 'hidden'
      });
    }

    var bound = options.boundary;
    var $trk = newTracker().width(boundx + (bound * 2)).height(boundy + (bound * 2)).css({
      position: 'absolute',
      top: px(-bound),
      left: px(-bound),
      zIndex: 290
    }).mousedown(newSelection);

    /* }}} */
    // Set more variables {{{
    var bgopacity = options.bgOpacity,
        xlimit, ylimit, xmin, ymin, xscale, yscale, enabled = true,
        btndown, animating, shift_down;

    docOffset = getPos($img);
    // }}}
    // }}}
    // Internal Modules {{{
    // Touch Module {{{ 
    var Touch = (function () {
      // Touch support detection function adapted (under MIT License)
      // from code by Jeffrey Sambells - http://github.com/iamamused/
      function hasTouchSupport() {
        var support = {},
            events = ['touchstart', 'touchmove', 'touchend'],
            el = document.createElement('div'), i;

        try {
          for(i=0; i<events.length; i++) {
            var eventName = events[i];
            eventName = 'on' + eventName;
            var isSupported = (eventName in el);
            if (!isSupported) {
              el.setAttribute(eventName, 'return;');
              isSupported = typeof el[eventName] == 'function';
            }
            support[events[i]] = isSupported;
          }
          return support.touchstart && support.touchend && support.touchmove;
        }
        catch(err) {
          return false;
        }
      }

      function detectSupport() {
        if ((options.touchSupport === true) || (options.touchSupport === false)) return options.touchSupport;
          else return hasTouchSupport();
      }
      return {
        createDragger: function (ord) {
          return function (e) {
            e.pageX = e.originalEvent.changedTouches[0].pageX;
            e.pageY = e.originalEvent.changedTouches[0].pageY;
            if (options.disabled) {
              return false;
            }
            if ((ord === 'move') && !options.allowMove) {
              return false;
            }
            btndown = true;
            startDragMode(ord, mouseAbs(e));
            e.stopPropagation();
            e.preventDefault();
            return false;
          };
        },
        newSelection: function (e) {
          e.pageX = e.originalEvent.changedTouches[0].pageX;
          e.pageY = e.originalEvent.changedTouches[0].pageY;
          return newSelection(e);
        },
        isSupported: hasTouchSupport,
        support: detectSupport()
      };
    }());
    // }}}
    // Coords Module {{{
    var Coords = (function () {
      var x1 = 0,
          y1 = 0,
          x2 = 0,
          y2 = 0,
          ox, oy;

      function setPressed(pos) //{{{
      {
        pos = rebound(pos);
        x2 = x1 = pos[0];
        y2 = y1 = pos[1];
      }
      //}}}
      function setCurrent(pos) //{{{
      {
        pos = rebound(pos);
        ox = pos[0] - x2;
        oy = pos[1] - y2;
        x2 = pos[0];
        y2 = pos[1];
      }
      //}}}
      function getOffset() //{{{
      {
        return [ox, oy];
      }
      //}}}
      function moveOffset(offset) //{{{
      {
        var ox = offset[0],
            oy = offset[1];

        if (0 > x1 + ox) {
          ox -= ox + x1;
        }
        if (0 > y1 + oy) {
          oy -= oy + y1;
        }

        if (boundy < y2 + oy) {
          oy += boundy - (y2 + oy);
        }
        if (boundx < x2 + ox) {
          ox += boundx - (x2 + ox);
        }

        x1 += ox;
        x2 += ox;
        y1 += oy;
        y2 += oy;
      }
      //}}}
      function getCorner(ord) //{{{
      {
        var c = getFixed();
        switch (ord) {
        case 'ne':
          return [c.x2, c.y];
        case 'nw':
          return [c.x, c.y];
        case 'se':
          return [c.x2, c.y2];
        case 'sw':
          return [c.x, c.y2];
        }
      }
      //}}}
      function getFixed() //{{{
      {
        if (!options.aspectRatio) {
          return getRect();
        }
        // This function could use some optimization I think...
        var aspect = options.aspectRatio,
            min_x = options.minSize[0] / xscale,
            
            
            //min_y = options.minSize[1]/yscale,
            max_x = options.maxSize[0] / xscale,
            max_y = options.maxSize[1] / yscale,
            rw = x2 - x1,
            rh = y2 - y1,
            rwa = Math.abs(rw),
            rha = Math.abs(rh),
            real_ratio = rwa / rha,
            xx, yy;

        if (max_x === 0) {
          max_x = boundx * 10;
        }
        if (max_y === 0) {
          max_y = boundy * 10;
        }
        if (real_ratio < aspect) {
          yy = y2;
          w = rha * aspect;
          xx = rw < 0 ? x1 - w : w + x1;

          if (xx < 0) {
            xx = 0;
            h = Math.abs((xx - x1) / aspect);
            yy = rh < 0 ? y1 - h : h + y1;
          } else if (xx > boundx) {
            xx = boundx;
            h = Math.abs((xx - x1) / aspect);
            yy = rh < 0 ? y1 - h : h + y1;
          }
        } else {
          xx = x2;
          h = rwa / aspect;
          yy = rh < 0 ? y1 - h : y1 + h;
          if (yy < 0) {
            yy = 0;
            w = Math.abs((yy - y1) * aspect);
            xx = rw < 0 ? x1 - w : w + x1;
          } else if (yy > boundy) {
            yy = boundy;
            w = Math.abs(yy - y1) * aspect;
            xx = rw < 0 ? x1 - w : w + x1;
          }
        }

        // Magic %-)
        if (xx > x1) { // right side
          if (xx - x1 < min_x) {
            xx = x1 + min_x;
          } else if (xx - x1 > max_x) {
            xx = x1 + max_x;
          }
          if (yy > y1) {
            yy = y1 + (xx - x1) / aspect;
          } else {
            yy = y1 - (xx - x1) / aspect;
          }
        } else if (xx < x1) { // left side
          if (x1 - xx < min_x) {
            xx = x1 - min_x;
          } else if (x1 - xx > max_x) {
            xx = x1 - max_x;
          }
          if (yy > y1) {
            yy = y1 + (x1 - xx) / aspect;
          } else {
            yy = y1 - (x1 - xx) / aspect;
          }
        }

        if (xx < 0) {
          x1 -= xx;
          xx = 0;
        } else if (xx > boundx) {
          x1 -= xx - boundx;
          xx = boundx;
        }

        if (yy < 0) {
          y1 -= yy;
          yy = 0;
        } else if (yy > boundy) {
          y1 -= yy - boundy;
          yy = boundy;
        }

        return makeObj(flipCoords(x1, y1, xx, yy));
      }
      //}}}
      function rebound(p) //{{{
      {
        if (p[0] < 0) {
          p[0] = 0;
        }
        if (p[1] < 0) {
          p[1] = 0;
        }

        if (p[0] > boundx) {
          p[0] = boundx;
        }
        if (p[1] > boundy) {
          p[1] = boundy;
        }

        return [p[0], p[1]];
      }
      //}}}
      function flipCoords(x1, y1, x2, y2) //{{{
      {
        var xa = x1,
            xb = x2,
            ya = y1,
            yb = y2;
        if (x2 < x1) {
          xa = x2;
          xb = x1;
        }
        if (y2 < y1) {
          ya = y2;
          yb = y1;
        }
        return [Math.round(xa), Math.round(ya), Math.round(xb), Math.round(yb)];
      }
      //}}}
      function getRect() //{{{
      {
        var xsize = x2 - x1,
            ysize = y2 - y1,
            delta;

        if (xlimit && (Math.abs(xsize) > xlimit)) {
          x2 = (xsize > 0) ? (x1 + xlimit) : (x1 - xlimit);
        }
        if (ylimit && (Math.abs(ysize) > ylimit)) {
          y2 = (ysize > 0) ? (y1 + ylimit) : (y1 - ylimit);
        }

        if (ymin / yscale && (Math.abs(ysize) < ymin / yscale)) {
          y2 = (ysize > 0) ? (y1 + ymin / yscale) : (y1 - ymin / yscale);
        }
        if (xmin / xscale && (Math.abs(xsize) < xmin / xscale)) {
          x2 = (xsize > 0) ? (x1 + xmin / xscale) : (x1 - xmin / xscale);
        }

        if (x1 < 0) {
          x2 -= x1;
          x1 -= x1;
        }
        if (y1 < 0) {
          y2 -= y1;
          y1 -= y1;
        }
        if (x2 < 0) {
          x1 -= x2;
          x2 -= x2;
        }
        if (y2 < 0) {
          y1 -= y2;
          y2 -= y2;
        }
        if (x2 > boundx) {
          delta = x2 - boundx;
          x1 -= delta;
          x2 -= delta;
        }
        if (y2 > boundy) {
          delta = y2 - boundy;
          y1 -= delta;
          y2 -= delta;
        }
        if (x1 > boundx) {
          delta = x1 - boundy;
          y2 -= delta;
          y1 -= delta;
        }
        if (y1 > boundy) {
          delta = y1 - boundy;
          y2 -= delta;
          y1 -= delta;
        }

        return makeObj(flipCoords(x1, y1, x2, y2));
      }
      //}}}
      function makeObj(a) //{{{
      {
        return {
          x: a[0],
          y: a[1],
          x2: a[2],
          y2: a[3],
          w: a[2] - a[0],
          h: a[3] - a[1]
        };
      }
      //}}}

      return {
        flipCoords: flipCoords,
        setPressed: setPressed,
        setCurrent: setCurrent,
        getOffset: getOffset,
        moveOffset: moveOffset,
        getCorner: getCorner,
        getFixed: getFixed
      };
    }());

    //}}}
    // Selection Module {{{
    var Selection = (function () {
      var awake, hdep = 370;
      var borders = {};
      var handle = {};
      var seehandles = false;
      var hhs = options.handleOffset;

      // Private Methods
      function insertBorder(type) //{{{
      {
        var jq = $('<div />').css({
          position: 'absolute',
          opacity: options.borderOpacity
        }).addClass(cssClass(type));
        $img_holder.append(jq);
        return jq;
      }
      //}}}
      function dragDiv(ord, zi) //{{{
      {
        var jq = $('<div />').mousedown(createDragger(ord)).css({
          cursor: ord + '-resize',
          position: 'absolute',
          zIndex: zi
        });

        if (Touch.support) {
          jq.bind('touchstart', Touch.createDragger(ord));
        }

        $hdl_holder.append(jq);
        return jq;
      }
      //}}}
      function insertHandle(ord) //{{{
      {
        return dragDiv(ord, hdep++).css({
          top: px(-hhs + 1),
          left: px(-hhs + 1),
          opacity: options.handleOpacity
        }).addClass(cssClass('handle'));
      }
      //}}}
      function insertDragbar(ord) //{{{
      {
        var s = options.handleSize,
            h = s,
            w = s,
            t = hhs,
            l = hhs;

        switch (ord) {
        case 'n':
        case 's':
          w = pct(100);
          break;
        case 'e':
        case 'w':
          h = pct(100);
          break;
        }

        return dragDiv(ord, hdep++).width(w).height(h).css({
          top: px(-t + 1),
          left: px(-l + 1)
        });
      }
      //}}}
      function createHandles(li) //{{{
      {
        var i;
        for (i = 0; i < li.length; i++) {
          handle[li[i]] = insertHandle(li[i]);
        }
      }
      //}}}
      function moveHandles(c) //{{{
      {
        var midvert = Math.round((c.h / 2) - hhs),
            midhoriz = Math.round((c.w / 2) - hhs),
            north = -hhs + 1,
            west = -hhs + 1,
            east = c.w - hhs,
            south = c.h - hhs,
            x, y;

        if (handle.e) {
          handle.e.css({
            top: px(midvert),
            left: px(east)
          });
          handle.w.css({
            top: px(midvert)
          });
          handle.s.css({
            top: px(south),
            left: px(midhoriz)
          });
          handle.n.css({
            left: px(midhoriz)
          });
        }
        if (handle.ne) {
          handle.ne.css({
            left: px(east)
          });
          handle.se.css({
            top: px(south),
            left: px(east)
          });
          handle.sw.css({
            top: px(south)
          });
        }
        if (handle.b) {
          handle.b.css({
            top: px(south)
          });
          handle.r.css({
            left: px(east)
          });
        }
      }
      //}}}
      function moveto(x, y) //{{{
      {
        $img2.css({
          top: px(-y),
          left: px(-x)
        });
        $sel.css({
          top: px(y),
          left: px(x)
        });
      }
      //}}}
      function resize(w, h) //{{{
      {
        $sel.width(w).height(h);
      }
      //}}}
      function refresh() //{{{
      {
        var c = Coords.getFixed();

        Coords.setPressed([c.x, c.y]);
        Coords.setCurrent([c.x2, c.y2]);

        updateVisible();
      }
      //}}}

      // Internal Methods
      function updateVisible() //{{{
      {
        if (awake) {
          return update();
        }
      }
      //}}}
      function update() //{{{
      {
        var c = Coords.getFixed();

        resize(c.w, c.h);
        moveto(c.x, c.y);

/*
			options.drawBorders &&
				borders.right.css({ left: px(c.w-1) }) &&
					borders.bottom.css({ top: px(c.h-1) });
      */

        if (seehandles) {
          moveHandles(c);
        }
        if (!awake) {
          show();
        }

        options.onChange.call(api, unscale(c));
      }
      //}}}
      function show() //{{{
      {
        $sel.show();

        if (options.bgFade) {
          $img.fadeTo(options.fadeTime, bgopacity);
        } else {
          $img.css('opacity', bgopacity);
        }

        awake = true;
      }
      //}}}
      function release() //{{{
      {
        disableHandles();
        $sel.hide();

        if (options.bgFade) {
          $img.fadeTo(options.fadeTime, 1);
        } else {
          $img.css('opacity', 1);
        }

        awake = false;
        options.onRelease.call(api);
      }
      //}}}
      function showHandles() //{{{
      {
        if (seehandles) {
          moveHandles(Coords.getFixed());
          $hdl_holder.show();
        }
      }
      //}}}
      function enableHandles() //{{{
      {
        seehandles = true;
        if (options.allowResize) {
          moveHandles(Coords.getFixed());
          $hdl_holder.show();
          return true;
        }
      }
      //}}}
      function disableHandles() //{{{
      {
        seehandles = false;
        $hdl_holder.hide();
      } 
      //}}}
      function animMode(v) //{{{
      {
        if (animating === v) {
          disableHandles();
        } else {
          enableHandles();
        }
      } 
      //}}}
      function done() //{{{
      {
        animMode(false);
        refresh();
      } 
      //}}}
      /* Insert draggable elements {{{*/

      // Insert border divs for outline
      if (options.drawBorders) {
        borders = {
          top: insertBorder('hline'),
          bottom: insertBorder('hline bottom'),
          left: insertBorder('vline'),
          right: insertBorder('vline right')
        };
      }

      // Insert handles on edges
      if (options.dragEdges) {
        handle.t = insertDragbar('n');
        handle.b = insertDragbar('s');
        handle.r = insertDragbar('e');
        handle.l = insertDragbar('w');
      }

      // Insert side and corner handles
      if (options.sideHandles) {
        createHandles(['n', 's', 'e', 'w']);
      }
      if (options.cornerHandles) {
        createHandles(['sw', 'nw', 'ne', 'se']);
      }

      
      //}}}

      var $track = newTracker().mousedown(createDragger('move')).css({
        cursor: 'move',
        position: 'absolute',
        zIndex: 360
      });

      if (Touch.support) {
        $track.bind('touchstart.jcrop', Touch.createDragger('move'));
      }

      $img_holder.append($track);
      disableHandles();

      return {
        updateVisible: updateVisible,
        update: update,
        release: release,
        refresh: refresh,
        isAwake: function () {
          return awake;
        },
        setCursor: function (cursor) {
          $track.css('cursor', cursor);
        },
        enableHandles: enableHandles,
        enableOnly: function () {
          seehandles = true;
        },
        showHandles: showHandles,
        disableHandles: disableHandles,
        animMode: animMode,
        done: done
      };
    }());
    
    //}}}
    // Tracker Module {{{
    var Tracker = (function () {
      var onMove = function () {},
          onDone = function () {},
          trackDoc = options.trackDocument;

      function toFront() //{{{
      {
        $trk.css({
          zIndex: 450
        });
        if (trackDoc) {
          $(document)
            .bind('mousemove',trackMove)
            .bind('mouseup',trackUp);
        }
      } 
      //}}}
      function toBack() //{{{
      {
        $trk.css({
          zIndex: 290
        });
        if (trackDoc) {
          $(document)
            .unbind('mousemove', trackMove)
            .unbind('mouseup', trackUp);
        }
      } 
      //}}}
      function trackMove(e) //{{{
      {
        onMove(mouseAbs(e));
        return false;
      } 
      //}}}
      function trackUp(e) //{{{
      {
        e.preventDefault();
        e.stopPropagation();

        if (btndown) {
          btndown = false;

          onDone(mouseAbs(e));

          if (Selection.isAwake()) {
            options.onSelect.call(api, unscale(Coords.getFixed()));
          }

          toBack();
          onMove = function () {};
          onDone = function () {};
        }

        return false;
      }
      //}}}
      function activateHandlers(move, done) //{{{
      {
        btndown = true;
        onMove = move;
        onDone = done;
        toFront();
        return false;
      }
      //}}}
      function trackTouchMove(e) //{{{
      {
        e.pageX = e.originalEvent.changedTouches[0].pageX;
        e.pageY = e.originalEvent.changedTouches[0].pageY;
        return trackMove(e);
      }
      //}}}
      function trackTouchEnd(e) //{{{
      {
        e.pageX = e.originalEvent.changedTouches[0].pageX;
        e.pageY = e.originalEvent.changedTouches[0].pageY;
        return trackUp(e);
      }
      //}}}
      function setCursor(t) //{{{
      {
        $trk.css('cursor', t);
      }
      //}}}

      if (Touch.support) {
        $(document)
          .bind('touchmove', trackTouchMove)
          .bind('touchend', trackTouchEnd);
      }

      if (!trackDoc) {
        $trk.mousemove(trackMove).mouseup(trackUp).mouseout(trackUp);
      }

      $img.before($trk);
      return {
        activateHandlers: activateHandlers,
        setCursor: setCursor
      };
    }());
    //}}}
    // KeyManager Module {{{
    var KeyManager = (function () {
      var $keymgr = $('<input type="radio" />').css({
        position: 'fixed',
        left: '-120px',
        width: '12px'
      }),
          $keywrap = $('<div />').css({
          position: 'absolute',
          overflow: 'hidden'
        }).append($keymgr);

      function watchKeys() //{{{
      {
        if (options.keySupport) {
          $keymgr.show();
          $keymgr.focus();
        }
      }
      //}}}
      function onBlur(e) //{{{
      {
        $keymgr.hide();
      }
      //}}}
      function doNudge(e, x, y) //{{{
      {
        if (options.allowMove) {
          Coords.moveOffset([x, y]);
          Selection.updateVisible();
        }
        e.preventDefault();
        e.stopPropagation();
      }
      //}}}
      function parseKey(e) //{{{
      {
        if (e.ctrlKey) {
          return true;
        }
        shift_down = e.shiftKey ? true : false;
        var nudge = shift_down ? 10 : 1;

        switch (e.keyCode) {
        case 37:
          doNudge(e, -nudge, 0);
          break;
        case 39:
          doNudge(e, nudge, 0);
          break;
        case 38:
          doNudge(e, 0, -nudge);
          break;
        case 40:
          doNudge(e, 0, nudge);
          break;
        case 27:
          Selection.release();
          break;
        case 9:
          return true;
        }

        return false;
      }
      //}}}

      if (options.keySupport) {
        $keymgr.keydown(parseKey).blur(onBlur);
        if (ie6mode || !options.fixedSupport) {
          $keymgr.css({
            position: 'absolute',
            left: '-20px'
          });
          $keywrap.append($keymgr).insertBefore($img);
        } else {
          $keymgr.insertBefore($img);
        }
      }


      return {
        watchKeys: watchKeys
      };
    }());
    //}}}
    // }}}
    // API methods {{{
    function setClass(cname) //{{{
    {
      $div.removeClass().addClass(cssClass('holder')).addClass(cname);
    }
    //}}}
    function animateTo(a, callback) //{{{
    {
      var x1 = parseInt(a[0], 10) / xscale,
          y1 = parseInt(a[1], 10) / yscale,
          x2 = parseInt(a[2], 10) / xscale,
          y2 = parseInt(a[3], 10) / yscale;

      if (animating) {
        return;
      }

      var animto = Coords.flipCoords(x1, y1, x2, y2),
          c = Coords.getFixed(),
          initcr = [c.x, c.y, c.x2, c.y2],
          animat = initcr,
          interv = options.animationDelay,
          ix1 = animto[0] - initcr[0],
          iy1 = animto[1] - initcr[1],
          ix2 = animto[2] - initcr[2],
          iy2 = animto[3] - initcr[3],
          pcent = 0,
          velocity = options.swingSpeed;

      x = animat[0];
      y = animat[1];
      x2 = animat[2];
      y2 = animat[3];

      Selection.animMode(true);
      var anim_timer;

      function queueAnimator() {
        window.setTimeout(animator, interv);
      }
      var animator = (function () {
        return function () {
          pcent += (100 - pcent) / velocity;

          animat[0] = x + ((pcent / 100) * ix1);
          animat[1] = y + ((pcent / 100) * iy1);
          animat[2] = x2 + ((pcent / 100) * ix2);
          animat[3] = y2 + ((pcent / 100) * iy2);

          if (pcent >= 99.8) {
            pcent = 100;
          }
          if (pcent < 100) {
            setSelectRaw(animat);
            queueAnimator();
          } else {
            Selection.done();
            if (typeof(callback) === 'function') {
              callback.call(api);
            }
          }
        };
      }());
      queueAnimator();
    }
    //}}}
    function setSelect(rect) //{{{
    {
      setSelectRaw([
      parseInt(rect[0], 10) / xscale, parseInt(rect[1], 10) / yscale, parseInt(rect[2], 10) / xscale, parseInt(rect[3], 10) / yscale]);
    }
    //}}}
    function setSelectRaw(l) //{{{
    {
      Coords.setPressed([l[0], l[1]]);
      Coords.setCurrent([l[2], l[3]]);
      Selection.update();
    }
    //}}}
    function tellSelect() //{{{
    {
      return unscale(Coords.getFixed());
    }
    //}}}
    function tellScaled() //{{{
    {
      return Coords.getFixed();
    }
    //}}}
    function setOptionsNew(opt) //{{{
    {
      setOptions(opt);
      interfaceUpdate();
    }
    //}}}
    function disableCrop() //{{{
    {
      options.disabled = true;
      Selection.disableHandles();
      Selection.setCursor('default');
      Tracker.setCursor('default');
    }
    //}}}
    function enableCrop() //{{{
    {
      options.disabled = false;
      interfaceUpdate();
    }
    //}}}
    function cancelCrop() //{{{
    {
      Selection.done();
      Tracker.activateHandlers(null, null);
    }
    //}}}
    function destroy() //{{{
    {
      $div.remove();
      $origimg.show();
      $(obj).removeData('Jcrop');
    }
    //}}}
    function setImage(src, callback) //{{{
    {
      Selection.release();
      disableCrop();
      var img = new Image();
      img.onload = function () {
        var iw = img.width;
        var ih = img.height;
        var bw = options.boxWidth;
        var bh = options.boxHeight;
        $img.width(iw).height(ih);
        $img.attr('src', src);
        $img2.attr('src', src);
        presize($img, bw, bh);
        boundx = $img.width();
        boundy = $img.height();
        $img2.width(boundx).height(boundy);
        $trk.width(boundx + (bound * 2)).height(boundy + (bound * 2));
        $div.width(boundx).height(boundy);
        enableCrop();

        if (typeof(callback) === 'function') {
          callback.call(api);
        }
      };
      img.src = src;
    }
    //}}}
    function interfaceUpdate(alt) //{{{
    // This method tweaks the interface based on options object.
    // Called when options are changed and at end of initialization.
    {
      if (options.allowResize) {
        if (alt) {
          Selection.enableOnly();
        } else {
          Selection.enableHandles();
        }
      } else {
        Selection.disableHandles();
      }

      Tracker.setCursor(options.allowSelect ? 'crosshair' : 'default');
      Selection.setCursor(options.allowMove ? 'move' : 'default');


      if (options.hasOwnProperty('setSelect')) {
        setSelect(options.setSelect);
        Selection.done();
        delete(options.setSelect);
      }

      if (options.hasOwnProperty('trueSize')) {
        xscale = options.trueSize[0] / boundx;
        yscale = options.trueSize[1] / boundy;
      }
      if (options.hasOwnProperty('bgColor')) {

        if (supportsColorFade() && options.fadeTime) {
          $div.animate({
            backgroundColor: options.bgColor
          }, {
            queue: false,
            duration: options.fadeTime
          });
        } else {
          $div.css('backgroundColor', options.bgColor);
        }

        delete(options.bgColor);
      }
      if (options.hasOwnProperty('bgOpacity')) {
        bgopacity = options.bgOpacity;

        if (Selection.isAwake()) {
          if (options.fadeTime) {
            $img.fadeTo(options.fadeTime, bgopacity);
          } else {
            $div.css('opacity', options.opacity);
          }
        }
        delete(options.bgOpacity);
      }

      xlimit = options.maxSize[0] || 0;
      ylimit = options.maxSize[1] || 0;
      xmin = options.minSize[0] || 0;
      ymin = options.minSize[1] || 0;

      if (options.hasOwnProperty('outerImage')) {
        $img.attr('src', options.outerImage);
        delete(options.outerImage);
      }

      Selection.refresh();
    }
    //}}}
    //}}}

    if (Touch.support) {
      $trk.bind('touchstart', Touch.newSelection);
    }

    $hdl_holder.hide();
    interfaceUpdate(true);

    var api = {
      setImage: setImage,
      animateTo: animateTo,
      setSelect: setSelect,
      setOptions: setOptionsNew,
      tellSelect: tellSelect,
      tellScaled: tellScaled,
      setClass: setClass,

      disable: disableCrop,
      enable: enableCrop,
      cancel: cancelCrop,
      release: Selection.release,
      destroy: destroy,

      focus: KeyManager.watchKeys,

      getBounds: function () {
        return [boundx * xscale, boundy * yscale];
      },
      getWidgetSize: function () {
        return [boundx, boundy];
      },
      getScaleFactor: function () {
        return [xscale, yscale];
      },

      ui: {
        holder: $div,
        selection: $sel
      }
    };

    if ($.browser.msie) {
      $div.bind('selectstart', function () {
        return false;
      });
    }

    $origimg.data('Jcrop', api);
    return api;
  };
  $.fn.Jcrop = function (options, callback) //{{{
  {

    function attachWhenDone(from) //{{{
    {
      var opt = (typeof(options) === 'object') ? options : {};
      var loadsrc = opt.useImg || from.src;
      var img = new Image();
      img.onload = function () {
        function attachJcrop() {
          var api = $.Jcrop(from, opt);
          if (typeof(callback) === 'function') {
            callback.call(api);
          }
        }

        function attachAttempt() {
          if (!img.width || !img.height) {
            window.setTimeout(attachAttempt, 50);
          } else {
            attachJcrop();
          }
        }
        window.setTimeout(attachAttempt, 50);
      };
      img.src = loadsrc;
    }
    //}}}

    // Iterate over each object, attach Jcrop
    this.each(function () {
      // If we've already attached to this object
      if ($(this).data('Jcrop')) {
        // The API can be requested this way (undocumented)
        if (options === 'api') {
          return $(this).data('Jcrop');
        }
        // Otherwise, we just reset the options...
        else {
          $(this).data('Jcrop').setOptions(options);
        }
      }
      // If we haven't been attached, preload and attach
      else {
        attachWhenDone(this);
      }
    });

    // Return "this" so the object is chainable (jQuery-style)
    return this;
  };
  //}}}
  // Global Defaults {{{
  $.Jcrop.defaults = {

    // Basic Settings
    allowSelect: true,
    allowMove: true,
    allowResize: true,

    trackDocument: true,

    // Styling Options
    baseClass: 'jcrop',
    addClass: null,
    bgColor: 'black',
    bgOpacity: 0.6,
    bgFade: false,
    borderOpacity: 0.4,
    handleOpacity: 0.5,
    handleSize: 9,
    handleOffset: 5,

    aspectRatio: 0,
    keySupport: true,
    cornerHandles: true,
    sideHandles: true,
    drawBorders: true,
    dragEdges: true,
    fixedSupport: true,
    touchSupport: null,

    boxWidth: 0,
    boxHeight: 0,
    boundary: 2,
    fadeTime: 400,
    animationDelay: 20,
    swingSpeed: 3,

    minSelect: [0, 0],
    maxSize: [0, 0],
    minSize: [0, 0],

    // Callbacks / Event Handlers
    onChange: function () {},
    onSelect: function () {},
    onRelease: function () {}
  };

  // }}}
}(jQuery));

/**
 * Perhaps you'd like to launch another app?
 * 
 * ->naked launch joke goes here?
 * 
 */

var WCC = WCC || {};

WCC.launcher = (function()
{
    
    /**
     * Ajax return for an attempt to launch
     */
    var launchSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {

            if (data['transferUrl'] == false)
            {
                return false;
            }
            else
            {
                launchIsGo(data['transferUrl']);
            }
        }
        
        return true;
    };
    
    
    /**
     * Like a North Korean rocket, your launch has failed
     * 
     */
    var launchFailure = function ()
    {
        WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_failureToLaunchTitle", "main"), BRAVO.Translate._("WCC_MAIN_eProblemTryAgainLater", "main"));
        return false;
    };
    
    
    /**
     * We are a go for launch!
     * 
     */
    var launchIsGo = function (url)
    {
        window.open(url);
    };
    
    return{
        
        launchHelp: function(helpArticle)
        {
            window.open('/Supporttransfer/?helpArticle=' + helpArticle);
        },
        
        
        launchPurchaseEmail: function()
        {

            window.open('/productpurchase/index?product=email');
        }, 
        
        launchPurchaseCalendar: function()
        {
            window.open('/productpurchase/index?product=calendar');
        },
        
        launchPurchaseOff: function()
        {
            window.open('/productpurchase/index?product=off');
        },
        launchPurchaseForwarding: function()
        {
            window.open('/productpurchase/index?product=forwarding');
        },
        
        
        
        /**
         * off, perhaps? gimme a uid, i give you url
         *
         */
        launchOff: function(offUser)
        {   
            
           window.open('/apptransfer/index?user=' + offUser + '&app=off');
           return;
           
           $.ajax({
                type: "POST",
                url: 'ajaxfiles/gettransferurl/', 
                dataType : 'json',
                async : false,
                data: {'offUser' : offUser, 'postToken':Globals.POST_TOKEN},
                success : launchSuccess,
                error :  launchFailure
            });
        },
        
        
        /**
         * Launch WBE
         * 
         */
        launchWbe: function(emailAddress)
        {   
           window.open('/apptransfer/index?user=' + emailAddress + '&app=wbe');
           
           return;
           $.ajax({
                type: "POST",
                url: 'ajaxemail/gettransferurl/',
                async : false,
                dataType : 'json',
                data: {'emailAddress' : emailAddress, 'postToken':Globals.POST_TOKEN},
                success : launchSuccess,
                error :  launchFailure
            });
        },
        
        
        /**
         * Launch Cal
         * 
         */
        launchCal: function(calUser)
        {   
            
           window.open('/apptransfer/index?user=' + calUser + '&app=ogc');
           return;
           
           $.ajax({
                type: "POST",
                url: 'ajaxcalendar/gettransferurl/', 
                dataType : 'json',
                async : false,
                data: {'calUser' : calUser, 'postToken':Globals.POST_TOKEN},
                success : launchSuccess,
                error :  launchFailure
            });
        }
        
    };
    
    
}());



/**
 * Word to your hover!
 *
 * ... handles the flyovers 'n' stuff.
 *
 *
 */

var WCC = WCC || {};

WCC.hover = (function(){


  primaryThing = null;
        isAllAccounts = false;
        flyoutVisible = false;
        checkHoverInterval = null;

        currentHoverButton = null;

  return {

                /**
                 * Fire it all up!!!!
                 * WOOOOO!!!
                 */
    attach: function(primaryThingInput, isAllAccountsInput)
    {
                    if (isAllAccountsInput == undefined)
                    {
                        isAllAccounts = false;
                    }
                    else
                    {
                        isAllAccounts = isAllAccountsInput;
                    }

                    primaryThing = primaryThingInput;
                    var that = this;

                    $('.user-name')
                        .mouseenter(function(event){that.handleUsernameMouseover(this);})
                        .mouseleave(function(event){that.handleUsernameMouseleave(event);});

                    $('.table-flyout-button')
                        .click(function(event){that.handleFlyoutButtonClick(this);})
                        .mouseenter(function(event){that.handleFlyoutButtonMouseover(this);});
                        //.hide();


                    $('.showChevron')
                        .mouseenter(function(event){that.handleTDShowChevron(this)})
                        .mouseleave(function(event){that.handleTDHideChevron(this)});




                    this.flyoutHide();

                    this.checkHoverInterval = window.setInterval(function(){WCC.hover.checkWhetherToHideFlyout();}, 100);
		},

		/**
                 * ... show the flyout for a given button...
                 *
                 * @param object obj
                 * @param object event
                 */
                showInfoHover: function(showHoverButton)
                {
                    this.flyoutVisible = true;


                    var infoData = $(showHoverButton).parent().parent().data('infoData');
                    if (infoData == undefined)
                    {

                        infoData = $(showHoverButton).parent().data('infoData');
                        if (infoData == undefined)
                        {
                             return;
                        }

                        showHoverButton = $(showHoverButton[0]).find('.table-flyout-button_active');

                    }
                    $(showHoverButton).parent().find('.table-flyout-button').removeClass('table-flyout-button').addClass('table-flyout-button_active');

                    var that = this;

                    // position the flyout...
                    var offset = $(showHoverButton).offset();
                    if (offset == null)
                    {
                        this.flyoutVisible = false;
                        return;
                    }
                    infoData.offsetTop = offset.top;
                    infoData.offsetLeft = offset.left;

                    infoData.showActions = this.showActions(infoData);

                    this.renderFlyout(infoData);

                    // are we in autoopen mode? If so... we'll be looking to close that badboy...
                    var autoOpen = WCC.userSettings.get('flyoutOnMouseover');

                    if (autoOpen != "false")
                    {
                        this.currentHoverButton = showHoverButton;
                        var tempObj = null;
                        //$('.table-flyout-button').hide();

                        $(showHoverButton).show();
                    }

                    // get data if we need it...
                    if ( infoData.email_address_id != undefined && WCC.cache.getByKeyAndAttribute(infoData.emailAddress, 'emailAccountDataObj') == null)
                    {
                        $(document).bind('emailAccountDataUpdate', function(event, emailAddress){that.flyoutAccountDataUpdate(event, emailAddress);});
                        WCC.emailAccount.getEmailAccountData(infoData.emailAddress);
                    }

                    if ( infoData.offUser != undefined && WCC.cache.getByKeyAndAttribute(infoData.offUser, 'offAccountDataObj') == null)
                    {
                        $(document).bind('offAccountDataUpdate', function(event, offUser){that.flyoutAccountDataUpdate(event, offUser);});
                        WCC.offAccount.getOffAccountData(infoData.offUser);
                    }

                    if ( infoData.calUser != undefined && WCC.cache.getByKeyAndAttribute(infoData.calUser, 'calAccountDataObj') == null)
                    {
                        $(document).bind('calAccountDataUpdate', function(event, calUser){that.flyoutAccountDataUpdate(event, calUser);});
                        WCC.calAccount.getCalAccountData(infoData.calUser);
                    }

                    // if we have the quota stuff, let's use it...
                    if (infoData.quotaObj != undefined)
                    {

                        var quotaPercentage = (infoData.quotaObj.raw_used_bytes / infoData.quotaObj.quota_bytes) * 100;
                        // Progress Bars temp
                        $(".amount-progress-bar").progressbar({
                                value: quotaPercentage
                        });
                    }
                    else if (infoData.emailAccountDataObj != undefined)
                    {
                        var quotaPercentage = (infoData.emailAccountDataObj.used_bytes / infoData.emailAccountDataObj.quota_bytes) * 100;
                        // Progress Bars temp
                        $(".amount-progress-bar").progressbar({
                                value: quotaPercentage
                        });
                    }

                    // gotoff  quota? let's do this....
                    if (infoData.offAccountDataObj != undefined && infoData.offAccountDataObj.quota_bytes > 0)
                    {
                        var quotaPercentage = (infoData.offAccountDataObj.used_bytes / infoData.offAccountDataObj.quota_bytes) * 100;
                        // Progress Bars temp
                        $(".amount-progress-bar").progressbar({
                                value: quotaPercentage
                        });
                    }
                },


                showActions: function(infoData)
                {
                    if (infoData.alerts == undefined)
                    {
                        return true;
                    }

                    if (infoData.alerts.email != undefined)
                    {
                        if (jQuery.inArray('penddel', infoData.alerts.email) > -1)
                        {
                            return false;
                        }
                    }

                    if (infoData.alerts.cal != undefined)
                    {
                        if (jQuery.inArray('penddel', infoData.alerts.cal) > -1)
                        {
                            return false;
                        }

                    }

                    if (infoData.alerts.off != undefined)
                    {
                        if (jQuery.inArray('penddel', infoData.alerts.off) > -1)
                        {
                            return false;
                        }
                    }

                    return true;
                },


                /**
                 * So... a mouse exits the username field
                 */
                handleUsernameMouseleave : function(event)
                {

                    // is the flyout visible? if so... let's see what it's displaying
                    // and deal with it... like a boss!
                    if (this.flyoutVisible == true)
                    {
                        var infoData = $(event.currentTarget).parent().data('infoData');
                        if (infoData == undefined)
                        {
                            return;
                        }

                        var flyoutData = $('#flyoutArea').data('infoData');
                        if (flyoutData == undefined)
                        {

                            $('.table-flyout-button_active').removeClass('table-flyout-button_active').addClass('table-flyout-button');
                            return;
                        }


                        if (flyoutData.displayName != infoData.displayName)
                        {
                            //$(event.currentTarget).find('.table-flyout-button').hide();
                            $(event.currentTarget).find('.table-flyout-button_active').removeClass('table-flyout-button_active').addClass('table-flyout-button');
                        }
                    }
                    else
                    {
                        //$('.table-flyout-button').hide();
                        $('.table-flyout-button_active').removeClass('table-flyout-button_active').addClass('table-flyout-button');
                        //$('.table-flyout-button-spacer').show();
                    }
                },


                /**
                 * When a mouse moves over the username field...
                 *
                 * Attached in attach()
                 */
                handleUsernameMouseover : function(userNameTD)
                {

                    var userNameObj = $(userNameTD);
                    var originalWidth = userNameObj.width();

                    //$(userNameTD).find('.table-flyout-button').show();
                    $(userNameTD).find('.table-flyout-button').removeClass('table-flyout-button').addClass('table-flyout-button_active');
                    //$('.table-flyout-button-spacer').hide();

                    var autoOpen = WCC.userSettings.get('flyoutOnMouseover');

                    if (autoOpen != "false")
                    {

                        var otherThings = $('#infoTable').find('.table-flyout-button_active');

                        for (var x = 0; x < otherThings.length; x++)
                        {

                            if ($(otherThings[x]).parent().parent().data('infoData') != userNameObj.parent().data('infoData'))
                            {
                               $(otherThings[x]).removeClass('table-flyout-button_active').addClass('table-flyout-button');
                            }
                            else
                            {
                                // don't do nothin
                            }
                        }

                        //removeClass('table-flyout-button_active').addClass('table-flyout-button');
                        this.showInfoHover(userNameObj);
                     }
                   // userNameObj.width(originalWidth);
                },


                /**
                 * When the mouse moves over the button... what then?
                 * Hits up the user settings...
                 *
                 * Attached in attach()
                 */
                handleFlyoutButtonMouseover: function(showHoverButton)
                {
                    // should we pop it automatically?
                    var autoOpen = WCC.userSettings.get('flyoutOnMouseover');
                    if (autoOpen == "true")
                    {
                        //$('.table-flyout-button').hide();
                        $('.table-flyout-button_active').removeClass('table-flyout-button_active').addClass('table-flyout-button');
                        $(showHoverButton).show();
                        this.showInfoHover(showHoverButton);
                    }
                },


                /**
                 * When the mouse moves over the Title... what then?
                 * Attached in attach()
                 */
                handleFlyoutTitleMouseover: function(inout)
                {
                    if(inout=='in')
                    {
                        $('div.right-flyout > h3').css('text-overflow', 'initial');
                        $('div.right-flyout > h3').css('overflow-x', 'auto');
                    }
                    else
                    {
                        $('div.right-flyout > h3').css('text-overflow', 'ellipsis');
                        $('div.right-flyout > h3').css('overflow', 'hidden');
                    }
                },


                /**
                 * Click the button!
                 *
                 */
                handleFlyoutButtonClick: function(showHoverButton)
                {
                    //$('.table-flyout-button').hide();
                    $('.table-flyout-button_active').removeClass('table-flyout-button_active').addClass('table-flyout-button');
                    $(showHoverButton).show();
                    // should I open or close?
                    if (this.flyoutVisible == false)
                    {
                        this.showInfoHover(showHoverButton);
                    }
                    else
                    {
                        this.flyoutHide();
                    }

                },


                handleTDShowChevron: function(showHoverTD)
                {
                    $(showHoverTD).parent().find('.table-flyout-button').removeClass('table-flyout-button').addClass('table-flyout-button_active');

                },


                handleTDHideChevron: function(showHoverTD)
                {
                    $(showHoverTD).parent().find('.table-flyout-button_active').removeClass('table-flyout-button_active').addClass('table-flyout-button');

                },

                /**
                 * Hide the flyout...
                 */
                flyoutHide: function()
                {
                    this.flyoutVisible = false;
                    this.currentHoverButton = null;
                    $("#flyoutArea").hide();
                    //window.clearInterval(checkHoverInterval);
                },


                /**
                 * Check whether to hide flyout...
                 * this runs on
                 */
                checkWhetherToHideFlyout : function()
                {
                    var autoOpen = WCC.userSettings.get('flyoutOnMouseover');
                    if (autoOpen == false)
                    {
                        return;
                    }

                    if (this.flyoutVisible == false)
                    {
                        $("#flyoutArea").hide(); // redundant... but does the job...
                        return;
                    }

                    // what are we over?
                    var flyoutConfines = this.checkFlyoutConfines();
                    var userNameConfines = $(this.currentHoverButton).parent().ismouseover();
                    if (flyoutConfines == false && userNameConfines == false)
                    {
                        //$('.table-flyout-button').hide();

                        //$('.table-flyout-button-spacer').show();
                        $('.table-flyout-button_active').removeClass('table-flyout-button_active').addClass('table-flyout-button');
                        this.flyoutHide();
                    }
                },


                /**
                 * Check to see whe
                 */
                checkFlyoutConfines: function()
                {
                    var flyoutArea = $('#flyoutArea');
                    var thingToCheckOffset = flyoutArea.offset();
                    var currentMousePosObj = jQuery.mlp;

                    if (currentMousePosObj.y <  (thingToCheckOffset.top - 20) )
                    {
                        return false;
                    }

                    if (currentMousePosObj.y > (thingToCheckOffset.top + 125 ))
                    {
                        return false;
                    }


                    if (currentMousePosObj.x <  thingToCheckOffset.left)
                    {
                        return false;
                    }

                    if (currentMousePosObj.x >  (thingToCheckOffset.left +  500) )
                    {
                        return false;
                    }

                    return true;
                },


                /**
                 * Handle the template rendering for the flyout
                 *
                 */
                renderFlyout: function(infoData)
                {
                    var flyout = $("#flyoutArea");
                    flyout.offset({top: 0, left: 0});

                    //flyout.empty();

                    if(infoData.isCrossShopper==undefined && infoData.emailAccountDataObj && infoData.emailAccountDataObj.isCrossShopper) {
                      infoData.isCrossShopper = infoData.emailAccountDataObj.isCrossShopper;
                    }
                    if(infoData.calAccountDataObj && infoData.calAccountDataObj.isCrossShopper) {
                      infoData.isCrossShopper = infoData.calAccountDataObj.isCrossShopper;
                    }
                    if(infoData.offAccountDataObj && infoData.offAccountDataObj.isCrossShopper) {
                      infoData.isCrossShopper = infoData.offAccountDataObj.isCrossShopper;
                    }

                    infoData.isAllAccounts = isAllAccounts;

                    var renderedOutput =  $("#masterFlyout").tmpl(infoData);
                    flyout.html(renderedOutput);
                    flyout.data('infoData', infoData);


                    // handle the defaults first
                    if ( (primaryThing == 'email' || primaryThing=='all') && (infoData.alias_redirect && infoData.delivery_mode != 'local') )
                    {
                        renderedOutput = $("#flyoutForwardingDetails").tmpl(infoData);
                    }
                    else if ( (primaryThing == 'email' || primaryThing=='all') && infoData.emailAddress )
                    {
                        renderedOutput = $("#flyoutEmailDetails").tmpl(infoData);
                    }
                    else if (primaryThing == 'off' && infoData.offUser)
                    {
                        renderedOutput = $("#flyoutOffDetails").tmpl(infoData);
                    }
                     else if (primaryThing == 'cal' && infoData.calUser)
                    {
                        renderedOutput = $("#flyoutCalDetails").tmpl(infoData);
                    }

                    // ... or just fall back to the regular stuff
                    else if (infoData.alias_redirect && infoData.delivery_mode != 'local' )
                    {
                        renderedOutput = $("#flyoutForwardingDetails").tmpl(infoData);
                    }
                    else if (infoData.emailAddress )
                    {
                        renderedOutput = $("#flyoutEmailDetails").tmpl(infoData);
                    }
                    else if (infoData.offUser)
                    {
                        renderedOutput = $("#flyoutOffDetails").tmpl(infoData);
                    }
                     else if (infoData.calUser)
                    {
                        renderedOutput = $("#flyoutCalDetails").tmpl(infoData);
                    }
                    else
                    {
                        return;
                    }

                    // render it, show it, then move it to the right place
                    $('#flyoutDetails').html(renderedOutput);
                    flyout.show();
                    flyout.offset({top: infoData.offsetTop, left: infoData.offsetLeft});
                    //$('div.right-flyout > h3')
                  //  .click(function(event){WCC.hover.handleFlyoutTitleMouseover(this);})
                  //  .mouseenter(function(event){WCC.hover.handleFlyoutTitleMouseover('in');})
                  //  .mouseleave(function(event){WCC.hover.handleFlyoutTitleMouseover('out');});


                    flyout.find('#flyout-settings-button').click(function(){WCC.hover.openDialog(); return false;});

                    if (infoData.emailAddress != undefined && infoData['delivery_mode'] == "forward")
                    {
                        flyout.find('#editButton').click(function(){WCC.components.editForwarding.openFromFlyout(this); WCC.hover.flyoutHide();return false; });

                    }
                    else
                    {
                        flyout.find('#editButton').click(function(){WCC.components.editAccount.openFromFlyout(this); WCC.hover.flyoutHide();return false; });
                    }
                    flyout.find('li.chane-password > a').click(function(){WCC.components.editAccount.openFromFlyout(this); WCC.hover.flyoutHide(); return false;});
                    flyout.find('li.modify-size > a').click(function(){WCC.components.editAccount.openFromFlyout(this); WCC.hover.flyoutHide(); return false;});

                    //flyout.find('#switchPlanButton').click(function(){WCC.utils.checkboxFromFlyout(); WCC.components.switchAccount.open();WCC.hover.flyoutHide(); });
                    if (primaryThing == 'cal')
                    {
                        flyout.find('#switchPlanButton').click(function(){var flyoutData = $('#flyoutArea').data('infoData'); WCC.components.switchCalendarPlans.open( flyoutData);WCC.hover.flyoutHide();return false; });
                    }
                    else
                    {
                        flyout.find('#switchPlanButton').click(function(){var flyoutData = $('#flyoutArea').data('infoData'); WCC.components.switchAccount.open( flyoutData['displayName']);WCC.hover.flyoutHide(); return false;});

                    }
                    flyout.find('#deleteButton').click(function(event)
                    {
                        var myEvent=event;
                        var flyoutData = $('#flyoutArea').data('infoData');
                        WCC.components.deleteAccount.confirmDelete(primaryThing, flyoutData['displayName'],myEvent);
                        WCC.hover.flyoutHide();

                        return false;
                    });

                    if(!WCC.utils.getCRM()) {
                      flyout.find('#emailButton').click(function(){WCC.launcher.launchWbe(infoData.emailAddress); WCC.hover.flyoutHide(); return false;});
                      flyout.find('#calButton').click(function(){WCC.launcher.launchCal(infoData.calUser); WCC.hover.flyoutHide(); return false; });
                      flyout.find('#filesButton').click(function(){WCC.launcher.launchOff(infoData.offUser); WCC.hover.flyoutHide(); return false;});
                  }
                },




                /**
                 * Handle any data updates to the flyout
                 *
                 * @param obj event
                 * @param string emailAddress
                 */
                flyoutAccountDataUpdate: function(event, emailAddress)
                {
                    var infoData = $("#flyoutArea").data('infoData');

                    if (infoData == null)
                    {
                        return false;
                    }

                    // we don't wanna do nothin' if the right div isn't visible
                    if (infoData.displayName != emailAddress && infoData.emailAddress != emailAddress && infoData.offUser != emailAddress)
                    {
                        return false;
                    }

                    this.renderFlyout(infoData);

                    // got email quota? let's do this....
                     if (infoData.quotaObj != undefined)
                    {
                        var quotaPercentage = (infoData.quotaObj.raw_used_bytes / infoData.quotaObj.quota_bytes) * 100;

                        // Progress Bars temp
                        $(".amount-progress-bar").progressbar({
                                value: quotaPercentage
                        });
                    }

                    else if (infoData.emailAccountDataObj != undefined)
                    {
                        var quotaPercentage = (infoData.emailAccountDataObj.used_bytes / infoData.emailAccountDataObj.quota_bytes) * 100;
                        // Progress Bars temp
                        $(".amount-progress-bar").progressbar({
                                value: quotaPercentage
                        });
                    }

                    // gotoff  quota? let's do this....
                    else if (infoData.offAccountDataObj != undefined && infoData.offAccountDataObj.quota_bytes > 0)
                    {
                        var quotaPercentage = (infoData.offAccountDataObj.used_bytes / infoData.offAccountDataObj.quota_bytes) * 100;
                        // Progress Bars temp
                        $(".amount-progress-bar").progressbar({
                                value: quotaPercentage
                        });
                    }
                },


                /**
                 * Open the dialog to change the default settings
                 *
                 */
                openDialog: function()
                {
                    $('.table-flyout-button_active').removeClass('table-flyout-button_active').addClass('table-flyout-button');
                    //$('.table-flyout-button').hide();
                    //$('.table-flyout-button-spacer').show();

                    this.flyoutHide();

                    // create the dialog box div... if it's not there
                    if ( $('#componentDefaultMenuDiv').length == 0)
                    {
                        var newDiv = document.createElement('div');
                        newDiv.id = 'componentDefaultMenuDiv';
                        newDiv.innerHTML = BRAVO.Translate._("WCC_MAIN_Loading_");
                        $(document.body).append(newDiv);
                    }

                    // create the dialog
                    $('#componentDefaultMenuDiv').dialog({
                        autoOpen: false,
                        modal: true,
                        resizable: false,
                        draggable: false,
                        width: 508,
                        title: BRAVO.Translate._("WCC_MAIN_menuSettings"),
                        close: function(){WCC.components.componentConfirmation.beforeCloseDialog();}
                    });

                    $('#componentDefaultMenuDiv').dialog("open");

                    var renderedOutput =  $('#componentDefaultMenu').tmpl();
                    $('#componentDefaultMenuDiv').html(renderedOutput);
                    $('#componentDefaultMenuDiv').dialog( 'option', 'position', 'center' );
                },


                /**
                 * Close the dialog box
                 *
                 */
                closeDialog: function()
                {
                    $('#componentDefaultMenuDiv').dialog("close");
                },


                /**
                 * Save settings!
                 *
                 */
                saveSettingsChange: function()
                {
                    if ($('#componentDefaultMenuChoiceHover').attr('checked') == "checked")
                    {
                        WCC.userSettings.set('flyoutOnMouseover', "true");
                    }
                    else
                    {
                        WCC.userSettings.set('flyoutOnMouseover', "false");
                    }

                    $('#componentDefaultMenuDiv').dialog("close");
                }

	};

}());
/**
 * The overlayer
 * 
 * Not the best code ever written, but this is helpful for a quick little 
 * inset thing for a dialog box sub setting or whatever.
 * 
 * Used in Paste Many, among other things...
 * 
 */

var WCC = WCC || {};

WCC.overlayer = (function(){
	
        
        var properties = {};
        
        return {
            
            /**
             * Open
             * properties are: contents, height, width, okCallback, cancelCallback
             * 
             */
            open: function (openDivInput, propertiesInput)
            {
                // define some stuff
                if (propertiesInput.width == undefined)
                {
                    properties.width = 550;
                }
                else
                {
                     properties.width = propertiesInput.width;
                }
                
                if (propertiesInput.height == undefined)
                {
                    properties.height = 550;
                }
                else
                {
                    properties.height = propertiesInput.height;
                }
                
                if (propertiesInput.contents == undefined)
                {
                    properties.contents = '';
                }
                else
                {
                    properties.contents = propertiesInput.contents;
                }
                
                
                if (propertiesInput.okCallback == undefined)
                {
                    properties.okCallback = function(){WCC.overlayer.close();};
                }
                else
                {
                    properties.okCallback = propertiesInput.okCallback ;
                }
                
                if (propertiesInput.cancelCallback == undefined)
                {
                    properties.cancelCallback = function(){WCC.overlayer.close();};
                }
                else
                {
                    properties.cancelCallback = propertiesInput.cancelCallback;
                }
               
                // white out the dialog box
                if (openDivInput == '')
                {
                    properties.inputDiv = $('body');
                }
                else
                {
                    properties.inputDiv = $('#' + openDivInput);
                }
                
                properties.inputDiv.append('<div class="sf-msg-overlay-wrap"></div>');
                
                // figure out where stuff should go....
                var inputWidth =  properties.inputDiv.width();
                var inputHeight =  properties.inputDiv.height();
                var inputOffset =  properties.inputDiv.offset();
                var offsetLeft = inputOffset.left +  ((inputWidth - properties.width) /2);
                var offsetTop = inputOffset.top + ( (inputHeight - properties.height) /2) ;
                
                 // create the dialog box div... if it's not there
                if ( $('#overlayedThingDiv').length == 0)
                {
                    var newDiv = document.createElement('div');
                    newDiv.id = 'overlayedThingDiv';
                    $(document.body).append(newDiv);
                    $('#overlayedThingDiv')
                        .addClass('overlayer')
                        .addClass('ui-dialog-content');
                }
                
                var overlayedThingDiv = $('#overlayedThingDiv');
                
                // stick this thing where we want
                overlayedThingDiv
                    .width(properties.width)
                    .height(properties.height)
                    .offset({ top: offsetTop, left: offsetLeft })
                    .html(properties.contents);
                
                // and give it some behaviors
                overlayedThingDiv.find('#overlayedThingButtonOk').click(properties.okCallback);
                overlayedThingDiv.find('#overlayedThingButtonCancel').click(properties.cancelCallback); 
            },
            
            
            /**
             * Close and remove the overlayer
             * 
             */
            close: function()
            {
                $(properties.inputDiv).find('.sf-msg-overlay-wrap').remove();
                $('#overlayedThingDiv').remove();
            }
            
            
        };
        
}());



/**
 * IE... it totally sucks 'n' stuff... doesn't support HTML placeholder
 * ... this is our workaround.
 *
 * 
 */

var WCC = WCC || {};


WCC.placeholder = (function()
{

    return{
        
        /**
         * Placeholderify stuff... if necessary
         *
         */
        attach: function(divId)
        {   
            if (this.supportPlaceholder() == true)
            {
                return;
            }
            
            var searchDiv = $('#' + divId);
            searchDiv.find(':text').focus(WCC.placeholder.focusHandler);
            searchDiv.find(':text').blur(WCC.placeholder.blurHandler);
            searchDiv.find(':text').blur();
            
            return true;
        },
        
        
        supportPlaceholder: function()
        {
            var testInput = document.createElement('input');
            return 'placeholder' in testInput;
        },
        
        focusHandler: function()
        {
            if ($(this).val() == $(this).attr("placeholder"))
            {
                $(this).removeClass("placeholderText");
                $(this).val('');
            }
            
        },
        
        blurHandler: function()
        {
            if ($(this).val() == "")
            {
                
                var placeHolderText = jQuery.trim($(this).attr("placeholder"));
                if (placeHolderText != '')
                {
                    $(this).addClass("placeholderText");
                    $(this).val(placeHolderText);  
                }
            }
        }
        
    };
    
    
}());



/**
 * Logo on Login component
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.logoOnLogin = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentLogoOnLoginDiv';
    properties.template = '#componentLogoOnLogin';
    properties.title = BRAVO.Translate._("WCC_MAIN_customizeLoginScreen");

    properties.currentDomain = null;
    properties.previewImageSrc = null;
    properties.logoPreviewUrlBase = null;
    properties.logoViewUrlBase = null;

    properties.cropCoords = null;

    /**
     * AJAX success for getting a logo
     *
     */
    var getLogoSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            if (data.published == false)
            {
                $('#componentLogoOnLoginCurrent').attr('src', 'css/images/logo-placeholder.png');
                showUploadButton();
            }
            else
            {

                 data.published =  data.published + '&rand=' + WCC.utils.generateRandomString(5);
                 $('#componentLogoOnLoginCurrent').attr('src', data.published);

                 var previewUrl = null;
                 if (data.logoViewUrlBase != undefined)
                 {
                     properties.logoViewUrlBase = data.logoViewUrlBase;
                 }

                 showDeleteButton(previewUrl);
            }
            //this.renderDialog();
        }
        return true;
    };


    /**
     * AJAX success for preview logo
     *
     */
    var getPreviewLogoSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            properties.previewImageSrc = data.raw;

            this.renderImageCropper();


        }
        return true;
    };


    /**
     * AJAX success for deleting a logo
     *
     */
    var deleteLogoSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            $('#componentLogoOnLoginCurrent').attr('src', 'css/images/logo-placeholder.png');
            showUploadButton();
        }
        return true;
    };


    /**
     * AJAX success for crop success
     *
     */
    var doCropSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            if (data.newUrl != false)
            {
                properties.previewImageSrc = data.newUrl;
                properties.logoPreviewUrlBase = data.logoPreviewUrlBase;
                this.renderCropFinal();
            }

            //@todo handle error

        }
        return true;
    };


    /**
     * Ajax success for publishing a logo
     */
    var publishLogoSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            this.open();
        }
        return true;
    };


    /**
     * Show the upload button...
     * ... hide delete
     */
    var showUploadButton = function()
    {
        $('#file-uploader').show();
        $('#file-deleter').hide();
    };


    /**
     * Show the delete button...
     * ... hide upload...
     */
    var showDeleteButton = function(previewUrl)
    {
        $('#file-uploader').hide();
        $('#file-deleter').show();

        if (previewUrl != null)
        {

        }
    };



    return{

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function()
        {
            WCC.components.analytics.trackView('modal', 'wcc-logo-on-login');

            var that = this;

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                WCC.utils.centerThisDialog(properties.dialogDivId);

                WCC.utils.showLoading(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 550,
                title: properties.title
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");
            WCC.utils.centerThisDialog(properties.dialogDivId);

            $(document).bind('updateDomains', function(){that.renderDialog();});

            this.renderDialog();
            WCC.utils.centerThisDialog(properties.dialogDivId);

            $('#file-uploader').hide();
            $('#file-deleter').hide();

            return true;
        },


        /**
         * Render the main dialog...
         *
         */
        renderDialog: function()
        {
            if ( WCC.model.domains.get() == null)
            {
                return;
            }

            if( WCC.model.domainsutf8.get() == null)
            {
            	return;
        	}

            var renderedOutput =  $(properties.template).tmpl();
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);

            $('#componentLogoOnLoginDomainSelect').change(function(){WCC.components.logoOnLogin.getLogoData($('#componentLogoOnLoginDomainSelect').val()); WCC.components.logoOnLogin.createUploader();});

            if (properties.currentDomain != null)
            {
                $('#componentLogoOnLoginDomainSelect').val(properties.currentDomain);
                WCC.components.logoOnLogin.getLogoData(properties.currentDomain );
            }
            else
            {
                WCC.components.logoOnLogin.getLogoData($('#componentLogoOnLoginDomainSelect').val() );
            }

            this.createUploader();
        },


        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        },


        /**
         * Create the upload function and update the domain
         *
         */
        createUploader: function()
        {
            var domain = $('#componentLogoOnLoginDomainSelect').val();

            var uploader = new qq.FileUploader({
                element: document.getElementById('file-uploader'),
                action: 'ajax/uploadlogo?domain=' + domain,
                debug: true
            });
        },


        /**
         * Get the logo data for a given domain
         *
         */
        getLogoData: function(domain)
        {
            var that = this;

            $.ajax({
                type: "POST",
                url: 'ajax/getloginlogo/',
                data: {'domain': domain, 'postToken':Globals.POST_TOKEN},
                dataType : 'json',
                success :  function(data) {getLogoSuccess.call(that, data);},
                error :  WCC.utils.handleError
            });
        },


        /**
         * Get the preview image for a domain
         *
         */
        getPreviewLogoData : function (domain)
        {
            var that = this;

            $.ajax({
                type: "POST",
                url: 'ajax/getloginlogo/',
                data: {'domain': domain, 'postToken':Globals.POST_TOKEN},
                dataType : 'json',
                success :  function(data) {getPreviewLogoSuccess.call(that, data);},
                error :  WCC.utils.handleError
            });
        },


        /**
         * Delete an image. I mean... don't actually do this... but show the
         * confirmation box that allows you to confirm you actually wanna delete the image
         *
         */
        deleteImage: function()
        {
            var imageToDelete = $('#componentLogoOnLoginDomainSelect').val();

            var titleMessage = BRAVO.Translate._("WCC_MAIN_deleteLogoTitle");
            var confirmMessage = BRAVO.Translate._("WCC_MAIN_confirmDeleteLogo");

            var okCallback = function(){WCC.components.logoOnLogin.okDeleteImage();};

            WCC.components.componentConfirmation.open(titleMessage, confirmMessage, okCallback );
        },


        /**
         * Actually send the command back to delete the image
         *
         */
        okDeleteImage: function()
        {
            WCC.components.componentConfirmation.closeDialogNoCallback();
            var imageToDelete = $('#componentLogoOnLoginDomainSelect').val();

            var that = this;

            $.ajax({
                type: "POST",
                url: 'ajax/deleteloginlogo/',
                data: {'domain': imageToDelete, 'postToken':Globals.POST_TOKEN},
                dataType : 'json',
                success :  function(data) {deleteLogoSuccess.call(that, data);},
                error :  WCC.utils.handleError
            });

        },


        /**
         * Show the image cropper
         *
         */
        showImageCropper: function()
        {
            properties.currentDomain = $('#componentLogoOnLoginDomainSelect').val();

            this.getPreviewLogoData(properties.currentDomain);
        },


        /**
         * Render the image cropper
         *
         */
        renderImageCropper: function()
        {
            var renderedOutput =  $("#componentLogoOnLoginCropper").tmpl({'properties': properties});
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);

            $('#componentLogoOnLoginCropperImage').load(function(){$("#componentLogoOnLoginDiv").dialog( 'option', 'position', 'center' );            WCC.utils.centerThisDialog(properties.dialogDivId);WCC.components.logoOnLogin.getToTheCropper();});
        },


        /**
         * Har dee har har...
         *
         */
        getToTheCropper: function()
        {
            $('#componentLogoOnLoginCropperImage').Jcrop({
                setSelect: [ 0,0,167,84 ],
                onChange: WCC.components.logoOnLogin.handleCropCoords,
                onSelect: WCC.components.logoOnLogin.handleCropCoords
                });
        },


        /**
         * Save the crop coords to the internal var
         *
         */
        handleCropCoords: function (coords)
        {
            properties.cropCoords = coords;
        },


        /**
         * If you want coordinates, you got 'em...
         *
         */
        returnCropCoords: function()
        {
            return properties.cropCoords;
        },


        /**
         * Crop the fuck outta that badboy
         */
        doTheCrop: function ()
        {
            var that = this;

            var ajaxData = {};
            ajaxData.domain = properties.currentDomain;
            ajaxData.cropCoords = properties.cropCoords;
            ajaxData.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajax/croplogo/',
                data: ajaxData,
                dataType : 'json',
                success :  function(data) {doCropSuccess.call(that, data);},
                error :  WCC.utils.handleError
            });
        },


        /**
         * Reset back to the beginning
         *
         */
        cancelCrop: function()
        {
            WCC.components.logoOnLogin.open();
        },


        /**
         * Render crop final
         *
         */
        renderCropFinal: function()
        {
            var renderedOutput =  $("#componentLogoOnLoginFinal").tmpl({'properties': properties});
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);

        },


        /**
         * Publish the logo!
         *
         */
        publishLogo: function()
        {
            var that = this;

            $.ajax({
                type: "POST",
                url: 'ajax/publishlogo/',
                data: {'domain': properties.currentDomain, 'postToken':Globals.POST_TOKEN},
                dataType : 'json',
                success :  function(data) {publishLogoSuccess.call(that, data);},
                error :  WCC.utils.handleError
            });
        },


        /**
         * Pop up the login page
         */
        previewLogin: function()
        {
             window.open(properties.logoViewUrlBase + $('#componentLogoOnLoginDomainSelect').val() ,'_blank');
        }
    };


}());



/**
 * Edit forwarding
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.editForwarding = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentEditForwardingDiv';
    properties.template = '#componentEditForwarding';
    properties.title = BRAVO.Translate._("WCC_MAIN_editForwardTitle");

    var editAccountObj;
    var submitObj;
    /**
     * Success!
     * ... at forwarding
     */
    var editForwardingSuccess = function (data)
    {

        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true && undefined==data.error)
        {

           editAccountObj = {};

           $('#'+properties.dialogDivId).dialog("close");
           //WCC.cache.reset();
           if (WCC.allAccounts) {
	           WCC.allAccounts.getAllAccounts();
           }
           if (WCC.email) {
	           WCC.email.getAllAccounts();
           }
           if (WCC.calendar) {
	           WCC.calendar.getAllAccounts();
           }
           if (WCC.off) {
	           WCC.off.getAllAccounts();
           }

           var accountHasBeenSaved = BRAVO.Translate._("WCC_MAIN_accountHasBeenSaved");
            accountHasBeenSaved = accountHasBeenSaved.replace('#VALUE#', WCC.utils.utf8Address(submitObj.emailAddress));

            WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), accountHasBeenSaved);
            setTimeout(function(){WCC.components.updateWatcher.watchEmail(submitObj.emailAddress)}, 1000);

        } else {
        	handleError(data);
            return false;
        }
        return true;

    };

    /**
     * Got an error back on the save request?  better display it
     */
    var handleError = function (data) {

        WCC.spinKontrol.close();
        $("#editForwardingSaveButton").attr('disabled', null);

    	WCC.components.bulkCreateForwarding.clearErrors();

    	for (var errorType in data.error)
        {
            for (var singleError in data.error[errorType])
            {
                switch (errorType)
                {
                    case 'mailbox':
                        $('#componentEditForwardingErrorEmail').html(data.error[errorType][singleError] + ' ');
                        break;
                    case 'ccAddress':
                        $('#componentEditForwardingErrorEmail').html(data.error[errorType][singleError] + ' ');
                        break;
                    case 'plan':
                        $('#componentEditForwardingErrorPlan').html(data.error[errorType][singleError] + ' ');
                        break;
                    case 'catchall':
                        $('#componentEditForwardingErrorCatchall').html(data.error[errorType][singleError] + ' ');
                        break;
                    case 'autoResponder':
                        WCC.components.editForwarding.handleAutoReplyClick();
                        $('#componentEditForwardingErrorAutoReply').html(data.error[errorType][singleError] + ' ');
                        break;
                    default:
                        $('#componentEditForwardingErrorMisc').html(data.error[errorType][singleError] + ' ');
                }
            }
    	}

    };


    return{

        /**
         * Submit this badboy!
         */
        submit: function()
        {

            // now... hold on there pardner...
            if($("#editForwardingSaveButton").attr('disabled')=='disabled') {
                return;
            }

            WCC.components.editForwarding.clearErrors();

            WCC.spinKontrol.open('componentEditForwardingDiv');
            $("#editForwardingSaveButton").attr('disabled', 'disabled');

            submitObj = {};

            submitObj.includeEmail = 'true';
            submitObj.useSendEmailTo = 'true';
            submitObj.forwardToAddressesArray = $('#editForwardToAddresses').val().split(',');

            if($("#editForwardToAddresses").val() == "("+BRAVO.Translate._("WCC_MAIN_separateWithCommas")+")") {
                submitObj.sendEmailTo = "";
            } else {
                submitObj.sendEmailTo = $("#editForwardToAddresses").val();
            }

            var planArray = WCC.model.emailPlans.get();
            for (var k in planArray)
            {
                if (planArray[k].pack_id == editAccountObj.pack_id)
                {
                    var sPlan = planArray[k];
                    break;
                }
            }

            submitObj.emailAddressId = editAccountObj.email_address_id;
            submitObj.emailAddress = editAccountObj.emailAddress;
            submitObj.selectEmailPlan = sPlan.pack_uid ; //$("#editForwardingPlanSelect").val();
            submitObj.useCatchAll = $("#editForwardingUseCatchall").prop("checked");
            submitObj.enableAutoReply = $("#editForwardingEnableAutoReply").prop("checked");
            submitObj.autoReplyFrequency = $("#editForwardingAutoReplyFrequency").val();
            submitObj.autoReplySourceDefault = $("#editForwardingAutoReplySourceChoiceDefault").prop("checked");
            submitObj.autoReplySourceEmail = $("#editForwardingAutoReplySourceEmail").val();
            submitObj.autoReplySubjectDefault = $("#editForwardingAutoReplySubjectChoiceOriginalSubject").prop("checked");
            submitObj.autoReplySubject = $("#editForwardingAutoReplySubject").val();
            submitObj.autoReplyMessage = $("#editForwardingAutoReplyMessage").val();
            submitObj.autoReplyUseStart = $("#editForwardingAutoReplyUseStart").prop("checked");
            submitObj.autoReplyUseEnd = $("#editForwardingAutoReplyUseEnd").prop("checked");

            if ($('#editForwardingAutoReplyUseStart').prop('checked'))
            {
                submitObj.autoReplyStart = $("#editForwardingAutoReplyStart").val();
                submitObj.autoReplyStartOffset = $("#editForwardingAutoReplyStart").datetimepicker('getSelectedTimezone');
                if (submitObj.autoReplyStartOffset == null)
                {
                    var tzObj = WCC.components.datePicker.returnTimezone();
                    submitObj.autoReplyStartOffset = tzObj.timezone_id;
                }
            }
            else
            {
                submitObj.autoReplyStart = '';
            }

            if ($('#editForwardingAutoReplyUseEnd').prop('checked'))
            {
                submitObj.autoReplyEnd = $("#editForwardingAutoReplyEnd").val();
                submitObj.autoReplyEndOffset = $("#editForwardingAutoReplyEnd").datetimepicker('getSelectedTimezone');
                if (submitObj.autoReplyEndOffset == null)
                {
                    var tzObj = WCC.components.datePicker.returnTimezone();
                    submitObj.autoReplyEndOffset = tzObj.timezone_id;
                }
            }
            else
            {
                submitObj.autoReplyEnd = '';
            }

            submitObj.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajax/createaccount/',
                dataType : 'json',
                data: submitObj,
                success : function(data) {editForwardingSuccess(data);},
                error :  WCC.utils.handleError
            });


        },


        /**
         * Open the dialog box from the flyout...
         *
         */
        openFromFlyout: function ()
        {
            var flyoutData = $('#flyoutArea').data('infoData');
            this.open(flyoutData);
        },

        openFromInfoRow: function (inputThis)
        {
            var infoData = $(inputThis).parent().parent().data('infoData');
            this.open(infoData);
        },

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(editAccountObjInput)
        {
            editAccountObj = editAccountObjInput;
            var that = this;

            $('#componentEditForwardingDiv').remove();

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);

                WCC.utils.showLoading(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 500,
                title: properties.title
            });

             $('#'+properties.dialogDivId).dialog({
               close: function(event, ui)
               {
                   $(document).unbind('.editForwarding');
                   WCC.utils.detatchToolTip();
                }
            });


            // open it...
            $('#'+properties.dialogDivId).dialog("open");

            $(document).bind('updateEmailPlans.editForwarding', function(){that.renderDialog();});
            $(document).bind('updateDomains.editForwarding', function(){that.renderDialog();});
            $(document).bind('updateAvailableEmailPlans.editForwarding', function(){that.renderDialog();});
            $(document).bind('emailAccountDataUpdate.editForwarding', function(){that.renderDialog();});


            WCC.emailAccount.getEmailAccountData(editAccountObj.emailAddress);
            // return true
            return true;
        },


        /**
         * Render the dialog...
         *
         */
        renderDialog: function()
        {
            // need somme stuff first...
            // try and get it from the cache?
            if (editAccountObj.emailAddress != undefined && editAccountObj.emailAccountDataObj === undefined)
            {
                var cacheObj = WCC.cache.getByKey(editAccountObj.displayName);
                if (cacheObj.emailAccountDataObj === undefined)
                {

                    return;
                }

                editAccountObj.emailAccountDataObj = cacheObj.emailAccountDataObj;
            }

            if (WCC.model.domains.get() == null)
            {
                return;
            }

            if (this.getForwardingPlans() == null)
            {
                return;
            }

            // k... so... cool... let's do this!
            var renderedOutput =  $(properties.template).tmpl(editAccountObj);
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );

            if($('#editForwardToAddresses').length !==undefined) {
            	$('#editForwardToAddresses').limit('250','#editForwardCharsLeft');
            }

            $('#editForwardingSaveButton').click(function(){WCC.components.editForwarding.submit(); return false;});
            $('#editForwardingCancelButton').click(function(){WCC.components.editForwarding.closeDialog();});

//            $("#editForwardingAutoReplyStart").datetimepicker({
//                ampm: true,
//                timeFormat: 'h:mmtt',
//                showOtherMonths: true,
//                selectOtherMonths: true
//            });
//
//            //Datepicker end temp
//            $("#editForwardingAutoReplyEnd").datetimepicker({
//                ampm: true,
//                timeFormat: 'h:mmtt',
//                showOtherMonths: true,
//                selectOtherMonths: true
//            });

             WCC.components.datePicker.add($("#editForwardingAutoReplyStart") );
            WCC.components.datePicker.add( $("#editForwardingAutoReplyEnd") );




            var that = this;
            $('#editForwardingEnableAutoReply').click(function(){that.handleAutoReplyClick();});

            WCC.utils.attachToolTip('tip');

        },


        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        },


        /**
         * Go through the available email plans and get the appropriate ones...
         *
         */
        getForwardingPlans: function()
        {
            var outputArray = [];

            var planArray = WCC.model.emailPlans.get();
            for (var k in planArray)
            {
                if (planArray[k]['delivery_mode'] == 'forward')
                {
                    outputArray[outputArray.length] = planArray[k];
                }
            }
            if (outputArray.length == 0)
            {
                return null;
            }

            return outputArray;
        },


        /**
         * Open or close the auto reply
         *
         */
        toggleAutoReply: function()
        {
            $("#editForwardingAutoReplyContainer").slideToggle("slow", function(){ $('#componentEditForwardingDiv').dialog('option', 'position', 'center' );} );

            if ($("#autoReplyToggler").hasClass('show-button')) {
            	$("#autoReplyToggler").addClass('hide-button');
            	$("#autoReplyToggler").removeClass('show-button');
            } else {
            	$("#autoReplyToggler").removeClass('hide-button');
            	$("#autoReplyToggler").addClass('show-button');
            }


            return false; //Prevent the browser jump to the link anchor
        },


        /**
         * Expand the autoreply
         * ... like a boss!
         */
        handleAutoReplyClick: function()
        {
            if ($('#editForwardingEnableAutoReply').is(':checked') && $('#autoReplyToggler').hasClass('show-button') )
            {
                $("#autoReplyToggler").addClass('hide-button');
                $("#autoReplyToggler").removeClass('show-button');
                $("#editForwardingAutoReplyContainer").slideToggle("slow", function(){ $('#componentEditForwardingDiv').dialog('option', 'position', 'center' );});
            }
        },


        /**
         * Are we clear about those errors?
         *
         */
        clearErrors: function()
        {
            $('#componentEditForwardingErrorPlan').html('');
            $('#componentEditForwardingErrorMisc').html('');
            $('#componentEditForwardingErrorEmail').html('');
            $('#componentEditForwardingErrorCatchall').html('');
            $('#componentEditForwardingErrorAutoReply').html('');
        }

    };


}());



/**
 * Calendar plan switching...
 * 
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.switchCalendarPlans = (function()
{
    var properties = {};
    
    properties.dialogDivId = 'componentCalendarSwitchDiv';
    properties.template = '#componentCalendarSwitchPlans';
    properties.title = BRAVO.Translate._("WCC_MAIN_switchCalendarPlansTitle");
    
    var calSwitchArray = null;
    
    var submitObj = null;
    
    /**
     * Cal change submission success!
     */
    var submitOkSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
         

            WCC.components.switchCalendarPlans.closeDialog();
            
            var newPlan = WCC.components.switchCalendarPlans.returnPlanDetails(submitObj.newPackUid);

            for (var key in submitObj.switchAccountArray)
            {
                var accountUid = submitObj.switchAccountArray[key].accountUid;
                var searchObj =  {'key' : 'accountUid', 'value' : accountUid};
                var replaceObj =  {'key' : 'calPlan', 'value' : submitObj.newPackUid};
                WCC.cache.replace(searchObj, replaceObj);
                
                replaceObj =  {'key' : 'planObj', 'value' : newPlan};
                WCC.cache.replace(searchObj, replaceObj);
                
                replaceObj =  {'key' : 'calExpireTimestamp', 'value' : newPlan.calenedarExpireTimestamp};
                WCC.cache.replace(searchObj, replaceObj);
                
            }
            
            WCC.model.calPlans.reset();
            WCC.model.availableCalPlans.reset();
                
                
            $(document).trigger('infoRowRefresh');        		
            
            return;
        	
        } else {
            
            WCC.spinKontrol.close();
            $("#okSwitchPlans").attr('disabled', null);
        
        	//ERROR HANDLING AND DISPLAY!
        	var textError = '';
        	for (var errorType in data.error) {
    			if (textError !== "") {
    				textError += '<br>';
    			}
    			textError += " - " + data.error[errorType];
        	}
        	var dataError = data.error;
            WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_eSwitchingAccountsFailure"), textError, function(a, b, c){});
        }
    };
    
    return{
        
        
        /**
         * Submit the change.....
         */
        submit: function()
        {
            // now... hold on there pardner...
            if($("#okSwitchPlans").attr('disabled')=='disabled') {
                return;
            }
            
            WCC.spinKontrol.open('componentCalendarSwitchDiv');
            $("#okSwitchPlans").attr('disabled', 'disabled');
            
            submitObj = {};
            submitObj.switchAccountArray = calSwitchArray;
            submitObj.newPackUid = $('#componentSwitchAccountPlan').val(); 
            submitObj.postToken = Globals.POST_TOKEN;
            
            $.ajax({
                type: "POST",
                url: 'ajaxcalendar/switchplan/',
                dataType : 'json',
                data: submitObj,
                success : submitOkSuccess,
                error :  WCC.utils.handleError 
            });

            
        },
        
        
        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(switchObj)
        {   
            // we may be dealing with input either from a hover or from checkboxes
            if (switchObj == undefined)
            {
                calSwitchArray = WCC.cache.returnCheckedObjects();
            }
            else
            {
                calSwitchArray = [];
                calSwitchArray[0] = switchObj;
            }
            
            if (calSwitchArray.length == 0)
            {
                WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_eSwitchPlansSelectTitle"), BRAVO.Translate._("WCC_MAIN_eSwitchPlansSelect"));
                return;
            }
            
            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                
                WCC.utils.showLoading(properties.dialogDivId);
            }
            
            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 420,
                title: properties.title
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");
            
            // get the plans....
            WCC.model.availableCalPlans.get();
            $(document).bind('updateAvailableCalPlans', function(){WCC.components.switchCalendarPlans.renderDialog();});
   
            this.renderDialog();
            
            return true;
        },
        
        
        /**
         * Render the dialog...
         * 
         */
        renderDialog: function()
        {  
            if (WCC.model.availableCalPlans.get() == null)
            {
                return;
            }
            
            for (var k in calSwitchArray)
            {
                calSwitchArray[k]['planObj'] = this.returnPlanDetails(calSwitchArray[k]['calPlan']);
            }
            
            var renderedOutput =  $(properties.template).tmpl({'calSwitchArray' : calSwitchArray});
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
            
            setTimeout(function(){$('#componentSwitchPlansList li:even').css('background-color', '#f5f5f5');}, 100);
        },
        
        
        /**
         * Close the dialog and remove the div
         * 
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        },
        
        
        /**
         * Return an array of plans that have enough slots available...
         * 
         */
        returnAvailableAccounts: function(numNeededInput)
        {
            if (numNeededInput == undefined)
            {
                var numNeeded = calSwitchArray.length;
            }
            else
            {
                var numNeeded = numNeededInput;
            }
            
            var outputArray = [];
  
            var planArray = WCC.model.availableCalPlans.get();
            for (var k in planArray)
            {
                if (planArray[k]['availableAccounts'] == -1)
                {
                    outputArray[outputArray.length] = planArray[k];
                }
                else if (numNeeded > (planArray[k].availableAccounts - planArray[k].usedAccounts))
                {
                    var tempArray = planArray[k];
                    tempArray['disabled'] = true;
                    outputArray[outputArray.length] = tempArray;
                }
                else
                {
                     var tempArray = planArray[k];
                    tempArray['disabled'] = false;
                    outputArray[outputArray.length] = tempArray;
                }
            }
            
            return outputArray;
        },
        
        
        /**
         * Return plan data for a given pack id
         * 
         */
        returnPlanDetails: function(pack_id)
        {
            var planArray = WCC.model.calPlans.get();
            for (var k in planArray)
            {
                if (planArray[k]['accountUid'] == pack_id)
                {
                    return planArray[k];
                }
            }
        }
        
    };
    
    
}());



/**
 * Email Plan Rename dialog
 * 
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.planRename = (function()
{
    var properties = {};
    
    properties.dialogDivId = 'componentRenamePlanDiv';
    properties.template = '#componentRenamePlan';
    properties.title = BRAVO.Translate._("WCC_MAIN_editPlanTitle");

    properties.pack_id = null;

    /**
     * AJAX success for updatePackName
     * ... private method...
     * 
     * triggers emailAccountDataUpdate
     * 
     * @param obj data
     * @return boolean true
     */
    var updatePackNameSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);

        if (dataCheck == true)
        {
            // change the cache!
            var searchObj =  {'key' : 'pack_id', 'value' : data.pack_id};
            var replaceObj =  {'key' : 'pack_name', 'value' : data.new_pack_name};
            WCC.model.emailPlans.replace(searchObj, replaceObj);
            WCC.model.availableEmailPlans.replace(searchObj, replaceObj);
            WCC.cache.replace(searchObj, replaceObj);

            // update the menu!
            WCC.sortAndSearch.filterByThing('pack_id', properties.pack_id);
        }
        
        return true;
    };
    
    return{
        
        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(pack_id_input)
        {   
            properties.pack_id = pack_id_input;
            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                
                WCC.utils.showLoading(properties.dialogDivId);
            }
            
            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 420,
                title: properties.title
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");
            
            this.renderDialog();
            
            return true;
        },
        
        
        /**
         * Render the dialog...
         * 
         */
        renderDialog: function()
        {  
            var planObj = WCC.email.returnPlanDataFromId(properties.pack_id);
            
            var renderedOutput =  $(properties.template).tmpl(planObj);
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
        },
        
        
        /**
         * Close the dialog
         * 
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        },
        
        
        /**
         * Submit!
         * 
         */
        submitOk: function() {
            var packName = $("#newPlanName").val();
            
            if (jQuery.trim(packName) == '')
            {
                $('#componentRenamePlanError').html(BRAVO.Translate._("WCC_MAIN_ePlanNameBlank"));
                return;
            }
            
            var pattern = /^[\s\w\d@\.\-]+$/;
            if (pattern.test(packName) == false)
            {
                $('#componentRenamePlanError').html(BRAVO.Translate._("WCC_MAIN_eAccountNameCharacters"));
                return;
            }
            
            $.ajax({
                type: "POST",
                url: 'ajaxemail/updatepackname/',
                dataType : 'json',
                data: {'pack_id': properties.pack_id, 'pack_name': packName, 'postToken':Globals.POST_TOKEN},
                success : updatePackNameSuccess,
                error :  WCC.utils.handleError 
            });

            WCC.components.planRename.closeDialog();
            return true;
        }
        
    };
    
    
}());



/**
 * Switch account functionality
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.switchAccount = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentSwitchAccountDiv';
    properties.template = '#componentSwitchAccount';
    properties.title = BRAVO.Translate._("WCC_MAIN_switchPlans");

    var emailPlanArray = null;
    var switchAccountArray = null;

    var regionSwitchArray = null;
    var savedSubmitObj = null;

    var templateData={};

    /**
     * We have successfully submitted data!
     */
    var submitOkSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {

            WCC.components.switchAccount.closeDialog();
            if (data.switched && data.switched==true)
            {
                var newPlanName = WCC.components.switchAccount.returnPlanNameForPlanId(data.newPackUid);

                if (data.migrate != undefined && data.migrate.domains != undefined)
                {
                    for (var key in data.migrate.domains)
                    {
                        var searchObj =  {'key' : 'domain', 'value' : key};
                        var replaceObj =  {'key' : 'pack_id', 'value' : data.newPackUid};
                        WCC.cache.replace(searchObj, replaceObj);

                        replaceObj =  {'key' : 'pack_name', 'value' : newPlanName};
                        WCC.cache.replace(searchObj, replaceObj);
                    }
                }

                if (data.valid != undefined)
                {
                    // swap out
                    var newPackId =  WCC.components.switchAccount.returnPackIdNameForPackUid( data.newPackUid);

                    for (var key in data.valid)
                    {
                        var searchObj =  {'key' : 'email_address_id', 'value' : key};
                        var replaceObj =  {'key' : 'pack_id', 'value' : newPackId};
                        WCC.cache.replace(searchObj, replaceObj);

                        replaceObj =  {'key' : 'pack_name', 'value' : newPlanName};
                        WCC.cache.replace(searchObj, replaceObj);

                        WCC.components.switchAccount.addAlertByEmailAddressId(key);
                    }
                }

                $(document).trigger('infoRowRefresh');

                WCC.model.emailPlans.reset();
                WCC.model.availableEmailPlans.reset();
                WCC.model.availableForwardingPlans.reset();

                setTimeout(function(){$(document).trigger('infoRowRefresh');}, 100);

                var switchAccountSuccess = BRAVO.Translate._("WCC_MAIN_switchAccountSuccess");
                switchAccountSuccess = switchAccountSuccess.replace('#VALUE#', newPlanName);

                WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), switchAccountSuccess);


                return;
            }

            if (data.domainRegionChange)
            {
                regionSwitchArray = data;
                WCC.components.switchAccount.confirmRegionSwitch(data);
            }

        } else {
            WCC.spinKontrol.close();
            $("#okSwitchPlans").attr('disabled', null);
            $('#componentSwitchAccountSwitchAll').attr('disabled', null);

            //ERROR HANDLING AND DISPLAY!
            var textError = '';
            for (var errorType in data.error) {
                    if (textError !== "") {
                            textError += '<br>';
                    }
                    textError += " - " + data.error[errorType];
            }
            var dataError = data.error;
            WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_eSwitchingAccountsFailure"), textError, function(a, b, c){});
        }
    };


    return{

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(displayName)
        {
            WCC.components.analytics.trackView('modal', 'wcc-switchplans');

            savedSubmitObj = null;
            if(WCC.cache.returnCacheObject()[displayName])
            {
                var checkedObjArray = {};
                checkedObjArray[displayName] = WCC.cache.returnCacheObject()[displayName];
            }
            else
            {
                var checkedObjArray = WCC.cache.returnCheckedObjects();
            }
            // first, we've gotta see if something is checked...
            if (checkedObjArray.length == 0)
            {
                WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_eSwitchPlansSelectTitle"), BRAVO.Translate._("WCC_MAIN_eSwitchPlansSelect"));
                return;
            }

            // now... are these local or forwarding accounts?
            var localCount = 0;
            var forwardingCount = 0;
            for(var acct in checkedObjArray)
            {
            	if (checkedObjArray[acct].delivery_mode == "forward")
                {
                    forwardingCount = forwardingCount + 1;
            	}
                if (checkedObjArray[acct].delivery_mode == "local")
                {
                    localCount = localCount + 1;
            	}
            }

            var switchType = null;
            var dialogTitle =  BRAVO.Translate._("WCC_MAIN_switchPlans");


            if (forwardingCount > 0 && localCount == 0)
            {
                switchType = 'forward';
                dialogTitle =  BRAVO.Translate._("WCC_MAIN_switchForwardingPlans");
            }
            else if (localCount > 0 && forwardingCount == 0)
            {
                switchType = 'local';
            }
            else if (localCount > 0 && forwardingCount > 0)
            {
                WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_Switch_Plans"),BRAVO.Translate._("WCC_MAIN_switchMustChoose"));
                return;
            }


            switchAccountArray = checkedObjArray;


            // ok... so we've survived that...

            // we'll need the email planlist... or the forwarding plan list
            if (switchType == 'local')
            {
                $(document).bind('updateAvailableEmailPlans', function(){WCC.components.switchAccount.renderDialog(checkedObjArray, 'local')});
            }
            else
            {
                $(document).bind('updateAvailableForwardingPlans', function(){WCC.components.switchAccount.renderDialog(checkedObjArray, 'forward')});
            }

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);

                WCC.utils.showLoading(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 550,
                title: dialogTitle
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");

            this.renderDialog(checkedObjArray, switchType);
            WCC.utils.centerThisDialog(properties.dialogDivId);
            return true;
        },


        /**
         * Render the dialog...
         *
         */
        renderDialog: function(checkedObjArray, switchType)
        {
            var switchTemplate = null;
            if (switchType == 'local')
            {
                if (WCC.model.availableEmailPlans.get() == null)
                {
                    return;
                }
                switchTemplate = '#componentSwitchAccount';
            }
            else if (switchType == 'forward')
            {
                if (WCC.model.availableForwardingPlans.get() == null)
                {
                    return;
                }
                switchTemplate = '#componentSwitchForwardingAccount';
            }


            var data={};
            data['checkedObjArray'] = checkedObjArray;
            var renderedOutput =  $(switchTemplate).tmpl(data);
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);
            // we've gotta set timeout this stuff
            setTimeout(function(){$('#componentSwitchAccountList li:even').css('background-color', '#f5f5f5');}, 100);
        },


        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        },


        /**
         * retrieve plan data from the depths of the obj
         *
         */
        returnEmailPlanArray: function()
        {
            return emailPlanArray;
        },


        /**
         * Submitter for forwarding accounts
         *
         */
        submitForwarding: function()
        {
            var emailArray = {};
            for (var k in switchAccountArray)
            {
                emailArray[switchAccountArray[k]['email_address_id']] = switchAccountArray[k]['pack_id'];
            }

            submitObj = {};
            submitObj.switchAccountArray = emailArray;
            submitObj.newPackUid = $('#componentSwitchAccountPlan').val();
            savedSubmitObj = submitObj;

            submitObj.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajaxemail/switchplan/',
                dataType : 'json',
                data: submitObj,
                success : submitOkSuccess,
                error :  WCC.utils.handleError
            });
        },

        /**
         * Submit!
         *
         */
        submit: function()
        {
           if (this.validate() == true)
           {
               this.submitOk();
           }

           // otherwise... handle that stuff...

        },


        /**
         * Validate
         *
         */
        validate: function()
        {
            // put some stuff here!
            return true;
        },




        /**
         * Submit ok
         *
         */
        submitOk: function(regionChangeConfirmed, emailAccountOverride, planOverride)
        {
            // now... hold on there pardner...
            if($("#okSwitchPlans").attr('disabled')=='disabled') {
                return;
            }

            if($("#componentSwitchAccountSwitchAll").attr('disabled')=='disabled') {
                return;
            }


            if ($('#componentSwitchAccountConfirm').length > 0)
            {
                WCC.spinKontrol.open('componentSwitchAccountConfirm');
                $("#componentSwitchAccountSwitchAll").attr('disabled', 'disabled');
            }
            else if ($('#componentSwitchAccountDiv').length > 0)
            {
                WCC.spinKontrol.open('componentSwitchAccountDiv');
                $("#okSwitchPlans").attr('disabled', 'disabled');
            }

            var emailArray = {};
            for (var k in switchAccountArray)
            {
                emailArray[switchAccountArray[k]['email_address_id']] = switchAccountArray[k]['pack_id'];
            }

             submitObj = {};
             submitObj.switchAccountArray = emailArray;
             if(emailAccountOverride) {
                 submitObj.switchAccountArray = emailAccountOverride;
             }
             submitObj.newPackUid = $('#componentSwitchAccountPlan').val();
             if (planOverride) {
            	 submitObj.newPackUid = planOverride;
             }
             if (regionChangeConfirmed) {
                 submitObj.regionChange = true;
             }

             savedSubmitObj = submitObj;

             submitObj.postToken = Globals.POST_TOKEN;


             $.ajax({
                type: "POST",
                url: 'ajaxemail/switchplan/',
                dataType : 'json',
                data: submitObj,
                success : submitOkSuccess,
                error :  WCC.utils.handleError
            });
        },


        /**
         * Are you sure you want to switch?
         */
        confirmRegionSwitch: function(data) {
            WCC.components.componentConfirmation.closeDialog();

            var titleMessage = BRAVO.Translate._("WCC_MAIN_confirmRegionSwitch");

            // add some stuff
            var totalNeededCount = 0;
            for (var domain in data['domainRegionChange'])
            {
                var accountCount = WCC.utils.objectLength(data['domainRegionChange'][domain]['domainAccountsToMove']);
                data['domainRegionChange'][domain]['accountCount'] = accountCount;
                totalNeededCount = totalNeededCount + accountCount;
            }

            data['totalNeededCount'] = totalNeededCount;

            // create the dialog box div... if it's not there
            if ( $('#componentSwitchAccountConfirm').length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = 'componentSwitchAccountConfirm';
                newDiv.innerHTML = 'Loading...';
                $(document.body).append(newDiv);
            }

            // create the dialog
            $('#componentSwitchAccountConfirm').dialog({
                autoOpen: true,
                modal: true,
                resizable: false,
                draggable: false,
                width: 420,
                title: BRAVO.Translate._("WCC_MAIN_confirmRegionSwitch")
            });


            var renderedOutput =  $("#componentSwitchAccountConfirmTemplate").tmpl(data);
            $('#componentSwitchAccountConfirm').html(renderedOutput);
            $('#componentSwitchAccountConfirm').dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog('componentSwitchAccountConfirm');
            // we've gotta set timeout this stuff
            setTimeout(function(){ WCC.components.switchAccount.addConfirmRegionStuff();}, 100);
        },


        /**
         * Do some processing on the confirm region
         *
         */
        addConfirmRegionStuff: function()
        {
            $('#componentSwitchAccountList li:even').css('background-color', '#f5f5f5');
            $('#componentSwitchAccountDifferentPlan').click(function(){ WCC.components.switchAccount.closeConfirmRegionSwitch(); WCC.components.switchAccount.open(); });
            $('#componentSwitchCancelConfirm').click(function(){ WCC.components.switchAccount.closeConfirmRegionSwitch();});

            $('#componentSwitchAccountSwitchAll').click(function(){

                var myself = savedSubmitObj['switchAccountArray'];
                var common = [];
                var cValue;
                var cDomain;
                $.each(myself, function(cIndex, cValue) {
                	//get the current email domain
                	$.each(WCC.cache.returnCacheObject(), function (cItem, cEmailObject) {
                		if(cIndex == cEmailObject.email_address_id) {
                			cDomain= cEmailObject.domain;
                			return;
                		}
                	});

                	$.each(myself, function(cIndex, cValue) {
                		//get the emails with the same domain
                		$.each(WCC.cache.returnCacheObject(), function (cItem, cEmailObject) {
                    		if(cDomain == cEmailObject.domain && 'local'==cEmailObject.delivery_mode) {
                    			savedSubmitObj['switchAccountArray'][cEmailObject.email_address_id] =  cEmailObject.pack_id;
                    		}

                		});
                	});
                });
            	WCC.components.switchAccount.submitSwitchAccountConfirm();
            });

        },


        /**
         * Close the confirm region switch dialog
         *
         */
        closeConfirmRegionSwitch: function()
        {
            $('#componentSwitchAccountConfirm').dialog("close");
            $('#componentSwitchAccountConfirm').remove();
        },


        /**
         * Submit that you actually wanna switch regions
         *
         */
        submitSwitchAccountConfirm: function()
        {

            if ($('#componentSwitchAccountPlan').val() == undefined)
            {
                 var newPackUid = savedSubmitObj.newPackUid;
            }
            else
            {
                var newPackUid = $('#componentSwitchAccountPlan').val();
            }
            this.closeConfirmRegionSwitch();

            WCC.components.switchAccount.submitOk(true, savedSubmitObj['switchAccountArray'], newPackUid);
        },


        /**
         * Return available email plans
         *
         */
        returnAvailableAccounts: function(numNeededInput)
        {
            if (numNeededInput == undefined)
            {
                var numNeeded = switchAccountArray.length;
            }
            else
            {
                var numNeeded = numNeededInput;
            }

            var planArray = WCC.model.availableEmailPlans.get();
            var outputArray = [];
            for (var key in planArray)
            {
                var availableAccounts = planArray[key].address_count - planArray[key].used_address_count;

                if (planArray[key].delivery_mode == 'forward')
                {
                    // skip it. Forward plans can go to hell
                }
                else if (planArray[key].address_count != -1 && (numNeeded > (planArray[key].address_count - planArray[key].used_address_count)))
                {
                    // skip that loser plan if it doesn't have enough stuff
                    var tempArray = planArray[key];
                    tempArray['disabled'] = true;
                    outputArray[outputArray.length] = tempArray;
                }
                else
                {
                    var tempArray = planArray[key];
                    tempArray['disabled'] = false;
                    outputArray[outputArray.length] = planArray[key];
                }
            }

            return outputArray;
        },



        returnAvailableForwardingAccounts: function(numNeededInput)
        {
            if (numNeededInput == undefined)
            {
                var numNeeded = switchAccountArray.length;
            }
            else
            {
                var numNeeded = numNeededInput;
            }

            var planArray = WCC.model.availableForwardingPlans.get();
            var outputArray = [];
            for (var key in planArray)
            {
                var availableAccounts = planArray[key].address_count - planArray[key].used_address_count;

                if (planArray[key].delivery_mode == 'local')
                {
                    // skip it. Forward plans can go to hell
                }
                else if (numNeeded > (planArray[key].address_count - planArray[key].used_address_count) && planArray[key].address_count != -1)
                {
                    // skip that loser plan if it doesn't have enough stuff
                    var tempArray = planArray[key];
                    tempArray['disabled'] = true;
                    outputArray[outputArray.length] = tempArray;
                }
                else
                {
                    var tempArray = planArray[key];
                    tempArray['disabled'] = false;
                    outputArray[outputArray.length] = planArray[key];
                }
            }

            return outputArray;
        },


        /**
         * Return accounts for a given plan id
         *
         */
        returnAvailableAccountsForPlan: function(planId)
        {
            var planArray = WCC.model.emailPlans.get();
            for (var key in planArray)
            {
                if (planArray[key].pack_uid == planId)
                {
                    var availableAccounts = planArray[key].address_count - planArray[key].used_address_count;
                    if(planArray[key].address_count == -1) {
                    	availableAccounts = planArray[key].address_count;
                    }
                    return availableAccounts;
                }
            }

            return 0;
        },


        returnPlanNameForPlanId: function(planId)
        {
            var planArray = WCC.model.emailPlans.get();
            for (var key in planArray)
            {
                if (planArray[key].pack_uid == planId)
                {
                    return planArray[key].pack_name;
                }
            }

            return false;
        },

        returnPackIdNameForPackUid: function(pack_uid)
        {
            var planArray = WCC.model.emailPlans.get();
            for (var key in planArray)
            {
                if (planArray[key].pack_uid == pack_uid)
                {
                    return planArray[key].pack_id;
                }
            }

            return false;
        },

        addAlertByEmailAddressId: function(email_address_id)
        {
            var cacheObj = WCC.cache.returnCacheObject();
            for (var key in cacheObj)
            {
                if (cacheObj[key]['email_address_id'] != undefined && cacheObj[key]['email_address_id'] == email_address_id)
                {
                    WCC.cache.addAlert(key, 'email', 'pendsetup');


                    WCC.components.updateWatcher.watchEmail(cacheObj[key]['emailAddress']);
                }
            }
        }



    };


}());



/**
 * Delete Account dialog
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.deleteAccount = (function()
{
    // props of thd dialog box itself
    var properties = {};

    properties.dialogDivId = 'componentDeleteAccount';
    properties.template = '#componentDeleteAccountTemplate';
    properties.title = 'Delete Account';

    var defaultTab = 0;
    var deleteKey = {};

    /**
     * AJAX success for delete of plans
     *
     * @param object data
     */
    var deleteAccountsSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {

            // do some search and replace on the delete key...
            for (var key in deleteKey['account'])
            {
                for (var accountType in deleteKey['account'][key])
                {
                    WCC.cache.addAlert(key, accountType, 'penddel');
                }
            }

            if (WCC.allAccounts)
            {
                // WCC.allAccounts.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.domains.reset();
                WCC.model.emailPlans.reset();
                WCC.model.offPlans.reset();
                WCC.model.relayData.reset();
                WCC.model.availableCalPlans.reset();
                WCC.model.availableEmailPlans.reset();
                WCC.model.availableOffPlans.reset();
            }
            if (WCC.email)
            {
                //WCC.email.getAllAccounts();
                WCC.model.emailPlans.reset();
                WCC.model.availableEmailPlans.reset();
            }
            if (WCC.calendar)
            {
                // WCC.calendar.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.availableCalPlans.reset();
            }
            if (WCC.off)
            {
                // WCC.off.getAllAccounts();
                WCC.model.offPlans.reset();
                WCC.model.availableOffPlans.reset();
            }

            //i dunno, splash something?
            confirmationTitle= BRAVO.Translate._('WCC_Main_Delete');
            confirmationMessage= BRAVO.Translate._('WCC_Main_deleteConfirmed');
            okCallback = $(document).trigger('infoRowRefresh');
            notOkCallback = '';
            okButtonText = BRAVO.Translate._('WCC_Main_Ok');
            notOkButtonText = '';
            WCC.components.componentConfirmation.open(confirmationTitle, confirmationMessage, okCallback, notOkCallback, okButtonText, notOkButtonText);


            //$(document).trigger('infoRowRefresh');
        } else {
            WCC.components.deleteAccount.deleteError(data.error);
        }
        WCC.alerts.init();
        return true;
    };

    //-------------------------------------------------------------
    return{



        /**
         * Confirm the delete
         *
         */
        confirmDelete: function(tab, injectedValue,myEvent) {
        	var checkedKey = {};
        	checkedKey.account = {};

            if (WCC.cache.returnCheckedObjects().length == 0 && injectedValue == undefined )
            {
                WCC.components.componentErrorDisplay.open(BRAVO.Translate._('WCC_Main_selectAnAccountTitle'), BRAVO.Translate._('WCC_Main_eMustChooseAccountToDelete'));
                return;
            }

            var titleMessage = BRAVO.Translate._('WCC_Main_confirmDeleteTitle');
            var confirmMessage = BRAVO.Translate._('WCC_Main_qDeleteAccounts');

            var rowClass = "";
        	for(var key in WCC.cache.returnCacheObject()) {
        		if(injectedValue && key!= injectedValue) {
        			continue;
        		}
        		var cacheItem = WCC.cache.getByKey(key);
        		if (injectedValue ||(cacheItem.checked && cacheItem.checked == true) ) {
                	account = {};
                	account['displayName'] = cacheItem.displayName;
                	account['utf8'] = cacheItem.utf8;
    				if(cacheItem.email_address_id && cacheItem.pack_id != 13013 ) {
    					account['email']= {
							'email_address_id': cacheItem.email_address_id,
							'emailAddress': cacheItem.emailAddress
						};
    				}
    				if (cacheItem.calUser && cacheItem.calPlan != 13013) {
        				account['calendar'] = {
    						'calUser': cacheItem.calUser,
    						'calPlan': cacheItem.calPlan
						};
    				}
    				if(cacheItem.offUser && cacheItem.offPlan != 13013) {
        				account['off'] = {
        					'emailAddress' : cacheItem.emailAddress,
        					'accountUid' : cacheItem.accountUid,
        					'offUser' : cacheItem.offUser,
        					'offPlan' : cacheItem.offPlan
    					};
    				}
        			rowClass = rowClass ? '' : "class=odd";
        			account['rowClass'] = rowClass;
        			checkedKey.account[key] = account.valueOf();

        		}
        	}

        	if(WCC.cache.returnCheckedObjects().length > 0 || injectedValue) {
        		if (WCC.cache.returnCheckedObjects().length > 100) {
        			data = {'error': [BRAVO.Translate._('WCC_Main_eMaxDelete')] };
            		WCC.components.deleteAccount.deleteError(data.error);
            		return;
        		}

        		var makeCheckbox = function(key, product, isChecked) {
        			return "<input type=checkbox name=\"" + key+ "\"  value=\""+ product +"\" "+ (isChecked ? 'checked' : '') +">";
        		};

        		var trOdd = "class=\"odd\"";
        		var odd = false;
        		var overflow = "";
        		if(WCC.cache.returnCheckedObjects().length > 1 ) {
        			overflow= " deleteOverflow ";
        		}
        		confirmMessage += $('#deleteHeader').tmpl().html();

        		var data = {};
        		data.overflow = overflow;
        		data.tab = tab;
        		data.rows = checkedKey.account;

        		confirmMessage += $('#deleteContent').tmpl(data).html();

        	}

        	var selectedTab = tab;
            var okCallback = function(){
                WCC.spinKontrol.open('componentConfirmationDiv');
                $("#componentConfirmationDiv input").each(function(index, o ) {
                	if($(o).prop('checked')===false) {
                		if(checkedKey.account[$(o).prop('name')] && checkedKey.account[$(o).prop('name')][$(o).prop('value')] )
                			delete checkedKey.account[$(o).prop('name')][$(o).prop('value')] ;
                			delete checkedKey.account[$(o).prop('name')]['__proto__'] ;
                			var eCount = 0;
                			$(checkedKey.account[$(o).prop('name')]).each( function(){eCount++;});

                			//allowance for a count of one for __proto__.
                			//if this is the only property, dont bother including the name in the delete request
                			if(eCount==0){ delete checkedKey.account[$(o).prop('name')]; }
                	}
        		});

        		WCC.components.deleteAccount.deleteAccounts(checkedKey);
        		WCC.components.componentConfirmation.closeDialog();
        		WCC.utils.uncheckAllThePossibleBoxes();
            };
            var notOkCallback =  function(){WCC.components.componentConfirmation.closeDialog();};

            WCC.components.componentConfirmation.open(titleMessage, confirmMessage, okCallback, notOkCallback, null, null );
            WCC.utils.centerThisDialog(properties.dialogDivId);

            return false;

        },


        /**
         * Delete Error
         *
         */
        deleteError: function(data) {
            var titleMessage = BRAVO.Translate._('WCC_Main_deleteErrorTitle');
            var oMessage = BRAVO.Translate._('WCC_Main_eDeleteError')+"<br/>";
            var confirmMessage = oMessage;
            if(data['responseText']) {
            	confirmMessage += data.responseText;
            }
            else {
	            for (var m in data) {
	            	if(confirmMessage == oMessage) {
	            		confirmMessage = '';
	            	}
	                confirmMessage += data[m] + "<br/>";
	            }
            }

            var okCallback = function(){
        		WCC.components.componentConfirmation.closeDialog();
            };

            WCC.components.componentConfirmation.open(titleMessage, confirmMessage, okCallback, okCallback, null, null );

        },

        /**
         * Delete some accounts
         *
         */
        deleteAccounts: function(checkedKey) {
        	var that = this;

        	// save for later...
            deleteKey = checkedKey;

            // delete that stuff
            checkedKey.postToken = Globals.POST_TOKEN;
            $.ajax({
                type: "POST",
                url: 'ajax/deleteaccounts/',
                data: checkedKey,
                dataType : 'json',
                success :  function(data) {deleteAccountsSuccess.call(that, data);},
                error :  function(data) {WCC.components.deleteAccount.deleteError.call(that, data);}
            });
        },

		makeCheckbox: function(key, product, isChecked) {
			return "<input type=checkbox name=\"" + key+ "\"  value=\""+ product +"\" "+ (isChecked ? 'checked' : '') +">";
		}


    };


}());



/* WCC alert control
 *
 * ... by Jon Roig.... jroig@godaddy.com
 *
 *
 */


var WCC = WCC || {};

WCC.alerts = (function(){

    // private methods
    var triggerInforowRefresh = true;
    var rawAccountAlertList = new Array();
    /**
     * Add alerts to the cache
     *
     * triggers infoRowRefresh, accountAlertRefresh
     *
     * @param string alertType
     * @param object data
     */
    var processAccountAlerts = function(alertType, data)
    {
        var dataCheck = WCC.utils.checkData(data);

        if (dataCheck == true)
        {
            // once we've got the data, we're gonna go through and add it to the wccCache
            for (var k in data)
            {
                if (data[k].length > 0)
                {
                    for (var x in data[k])
                    {
                        rawAccountAlertList[rawAccountAlertList.length] = data[k][x];

                        WCC.cache.addAlert(data[k][x], alertType, k);

                        if (alertType == 'email' && ( k == 'pending'))
                        {
                            setTimeout(function(){WCC.components.updateWatcher.watchEmail( data[k][x])}, 1000);
                        }

                        if (alertType == 'cal' && (k == 'pending'))
                        {
                            setTimeout(function(){WCC.components.updateWatcher.watchCalendar( data[k][x])}, 1000);
                        }
                    }
                }
            }
        }

        // trigger a refresh of both the alerts area and the rows....
        if (triggerInforowRefresh == true)
        {
            $(document).trigger('infoRowRefresh');
        }

        $(document).trigger('accountAlertRefresh');

        return true;
    };


    /**
     * AJAX success for getEmailAccountAlerts
     *
     * @param object data
     */
    var getEmailAccountAlertsSuccess = function(data)
    {
        var alerts = processAccountAlerts('email', data);
        return alerts;
    };


    /**
     * AJAX success for getOffAccountAlerts
     *
     * @param object data
     */
    var getCalAccountAlertsSuccess = function(data)
    {
        var alerts = processAccountAlerts('cal', data);
        return alerts;
    };


    /**
     * AJAX success for getOffAccountAlerts
     *
     * @param object data
     */
    var getOffAccountAlertsSuccess = function(data)
    {
        var alerts = processAccountAlerts('off', data);
        return alerts;
    };



    return {


        /**
         * Init function
         * ... fires off a bunch of AJAX requests to get alerts
         * for email / cal / off
         */
        init: function(checkArea, triggerInforowRefreshInput)

        {
            if (triggerInforowRefreshInput != undefined && triggerInforowRefreshInput == false)
            {
                triggerInforowRefresh = false
            }

            if (checkArea == 'email')
            {
                this.getEmailAccountAlerts();
            }
            else if (checkArea == 'cal')
            {
                this.getCalAccountAlerts();
            }
            else if (checkArea == 'off')
            {
                this.getOffAccountAlerts();
            }
            else
            {
                this.getEmailAccountAlerts();
                this.getCalAccountAlerts();
                this.getOffAccountAlerts();
            }

        },


        returnRawAlertList: function()
        {
            return rawAccountAlertList;
        },


        /**
         * Get email account alerts
         *
         */
        getEmailAccountAlerts: function()
        {
            $.ajax({
                type: "POST",
                url: 'ajaxemail/getemailaccountalerts/',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success : getEmailAccountAlertsSuccess,
                error :  WCC.utils.handleError
            });
        },


        /**
         * Get Cal alerts
         *
         */
        getCalAccountAlerts: function()
        {
            $.ajax({
                type: "POST",
                url: 'ajaxcalendar/getcalaccountalerts/',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success : getCalAccountAlertsSuccess,
                error :  WCC.utils.handleError
            });
        },


        /**
         * Get off alerts
         *
         */
        getOffAccountAlerts: function()
        {
            that = this;
            $.ajax({
                type: "POST",
                url: 'ajaxfiles/getoffaccountalerts/',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success : getOffAccountAlertsSuccess,
                error :  WCC.utils.handleError
            });
        },


        /**
         * Render account alerts
         *
         * listens for accountAlertRefresh
         */
        renderAccountAlerts: function()
        {
            var alertArea =  $("#alertArea");
            if (alertArea.length == 0)
            {
                return;
            }

            // generate the counts
            var renderObj = {};
            renderObj.overQuotaCount = WCC.cache.getAlertCounts('overQuota');

            var expireCount = WCC.cache.getAlertCounts('aboutToExpire') + WCC.cache.getAlertCounts('thirtyDaysUntilExpire');
            renderObj.expiringSoonCount = expireCount;
            renderObj.closeToQuotaCount = WCC.cache.getAlertCounts('closeToQuota');
            renderObj.outOfRelaysCount = WCC.cache.getAlertCounts('overSmtpQuota');
            renderObj.closeToSmtpQuotaCount = WCC.cache.getAlertCounts('closeToSmtpQuota');

            var totalNumberOfAlerts = renderObj.overQuotaCount + renderObj.expiringSoonCount + renderObj.closeToQuotaCount + renderObj.outOfRelaysCount + renderObj.closeToSmtpQuotaCount;
            renderObj.totalNumberOfAlerts = totalNumberOfAlerts;

            if (totalNumberOfAlerts == 0)
            {
                $('#alertAreaMain').hide();
                return;
            }
            $('#alertAreaMain').show();

            alertArea.empty();
            var renderedOutput = $("#indexAlertAreaTemplate").tmpl(renderObj);
            renderedOutput.appendTo( alertArea );

            return true;
        }

    };
}());



// LET'S MAKE THIS HAPPEN!!!!
$(document).ready(function()
{
    $(document).bind('accountAlertRefresh', function(){WCC.alerts.renderAccountAlerts();});
 });
/**
 * ECC Interactions.
*/

	$(document).ready(function(){

		// Sets margin to zero on the right most account views
		$(".account-views li:last-child").css("margin-right","0");

		// Table zebra striping
		$(".main-table-style table tr:odd").addClass("odd");

		// Switch accounts zebra striping
		$(".accounts-to-switch li:even,.all-accounts-to-switch li:even").css("background-color","#f5f5f5");

		// Table tr hover color
		$(".main-table-style table tr").hover(function(){
				$(this).addClass("tr-hover");
			},function(){
				$(this).removeClass("tr-hover");
		});


		// Table flyout hover - although with no delay.
		// There should be a delay as you hover over the user name before the flyout shows up. hover-intent.js would work.
		$(".main-table-style table tr td.user-name").hover(function(){
				$(this).addClass("td-hover");
			},function(){
				$(this).removeClass("td-hover");
		});




		// Show/Hide additional options
		$(".additional-options-top a.show-button").click(function(){
			$(this).toggleClass("hide-button");
			$(".additional-options-hider").slideToggle("slow");
			return false; //Prevent the browser jump to the link anchor
		});



		// Checkmark show auto replay
		$(".auto-reply-hide-show-container input:checkbox").change(function(){
			var checked = $(this).is(":checked");
			//alert (checked);
			$(this).toggleClass("hide-button");
			$(".auto-reply-container").slideToggle("slow");
			return false; //Prevent the browser jump to the link anchor
		});


	});


	// Popins
	$(function(){

		// Create Account Popin code
		var createAccountDialog = $(".create-account-popin")

			createAccountDialog.dialog({
				autoOpen: false,
			 	modal: true,
	            resizable: false,
				draggable: false,
	            width: 548,
	            title: "Create Account"
			});

			$(".create-account a").click(function(){
				createAccountDialog.dialog("open");
			});

			createAccountDialog.find(".cancel-button").click(function(){
				createAccountDialog.dialog("close");
			});

			createAccountDialog.find(".create-account-button").click(function(){
				alert("This button needs to have functionality");
				createAccountDialog.dialog("close");
			});




		// Edit Account popin code
		var editAccountDialog = $(".edit-account-popin")

			editAccountDialog.dialog({
				autoOpen: false,
			 	modal: true,
	            resizable: false,
				draggable: false,
	            width: 750,
	            title: "Edit Account"
			});

			$("a.edit-account").click(function(){
				editAccountDialog.dialog("open");
			});

			editAccountDialog.find(".cancel-button").click(function(){
				editAccountDialog.dialog("close");
			});

			editAccountDialog.find(".update-account-button").click(function(){
				alert("This button needs to have functionality");
				editAccountDialog.dialog("close");
			});




		// Switch Account Popin code
		var switchAccountDialog = $(".switch-account-popin")

			switchAccountDialog.dialog({
				autoOpen: false,
			 	modal: true,
	            resizable: false,
				draggable: false,
	            width: 428,
	            title: "Switch Account"
			});

			$(".switch-plans a").click(function (){
				switchAccountDialog.dialog("open");
			});

			switchAccountDialog.find(".cancel-button").click(function (){
				switchAccountDialog.dialog("close");
			});

			switchAccountDialog.find(".switch-account-button").click(function (){
				alert("This button needs to have functionality");
				switchAccountDialog.dialog("close");
			});


		// Switch Account Popin code
		var switchAllAccountDialog = $(".switch-all-accounts-popin")

			switchAllAccountDialog.dialog({
				autoOpen: false,
			 	modal: true,
	            resizable: false,
				draggable: false,
	            width: 428,
	            title: "Switch Account"
			});

			$(".switch-all-plans").click(function (){
				switchAllAccountDialog.dialog("open");
			});

			switchAllAccountDialog.find(".cancel-button").click(function (){
				switchAllAccountDialog.dialog("close");
			});

			switchAllAccountDialog.find(".switch-account-button").click(function (){
				alert("This button needs to have functionality");
				switchAllAccountDialog.dialog("close");
			});






		$(".table-progress-bar").progressbar({
			value: 66
		});


		// Popin Tabs
		$("#createAccountTabs, #editAccountTabs").tabs();


		//Datepicker start temp
		$(".start-time-picker").datetimepicker({
            ampm: true,
            timeFormat: 'h:mmtt',
			showOtherMonths: true,
			selectOtherMonths: true
		});

		//Datepicker end temp
		$(".end-time-picker").datetimepicker({
            ampm: true,
            timeFormat: 'h:mmtt',
			showOtherMonths: true,
			selectOtherMonths: true
		});

	});
/** COMMENTED OUT FOR NOW - this will return! 
(function($){
	$.fn.dragWidth = function(){
	
		var targetEl = $('#help-area .content-container');
		var mouseIsDown = false;
		
		$(this).mousedown( function(e){
			e.preventDefault();	
			mouseIsDown = true;
		});
		
		$(window).mouseup( function(e){
			mouseIsDown = false;
		});
		
		$(window).mousemove( function(e){
			if( mouseIsDown ){
				targetEl.width( e.pageX + 3 + 'px' );
				evaluateWidth();
			}
		});
	}
	
	$.fn.slideout = function( options ){
		$(this).find('.slideto').live( 'click', function(e){
			e.preventDefault();
			
			var contentContainer = $(this).parents('.content');
			var thisPane = $(this).parents('.subpane');
			
			var paneToGet = $(this).attr('rel');
			var paneSlidingTo = $(paneToGet).clone();
			var containerWidth = $(thisPane).width();
			
			$(this).parents('.subpane').after( paneSlidingTo );
						
			paneSlidingTo.css({
				width: $(this).outerWidth(),
				whiteSpace: 'normal',
				position: 'relative',
				top: '-' + $(thisPane).height() + 'px',
				left: $(thisPane).width()
			}).removeClass('hidden');
			
			contentContainer.css({
				overflow: 'hidden',
				whiteSpace: 'nowrap'
			});
			
			thisPane.css({
				position: 'relative',
				whiteSpace: 'normal'
			}).animate({
				left: '-' + $(this).outerWidth() + 'px'
			}, function(){
				$(this).removeAttr('style').addClass('hidden');
			});
			
			paneSlidingTo.animate({
				left: 0
			}, function(){
				paneSlidingTo.remove();
				$(paneToGet).removeClass('hidden');
				contentContainer.removeAttr('style');
				buildBreadcrumbs( $(this) );
				helpContentHeight();				
			});
		});
		
		function buildBreadcrumbs( $newPane ){
			var $breadcrumbArea = $( options.breadcrumb );
			var $defaultPane = {};
			$.extend( $defaultPane, $newPane );
			
			if( $defaultPane.length && !$defaultPane.is( options.home ) ){
				$breadcrumbArea.html(
					'<a id="home-crumb" href="#home"></a>' + 
					'&gt; <span>' + 
						$defaultPane.find('.breadcrumb-description').text() + 
					'</span>' 
				);
			} else {
				$breadcrumbArea.html(
					'<a id="home-crumb" href="#home"></a> <a href="#home">Home</a>' 
				);				
			}
		}
		
		$('.back').live( 'click', function(e){
			e.preventDefault();
			
			var newPaneId = $(this).attr('href');
			var $newPane = $( newPaneId );
			var $slidingPane = $newPane.clone();
			var $currentPane = $newPane.siblings('.subpane:not(.hidden)');
			var $contentContainer = $currentPane.parents('.content');
			
			$currentPane.after( $slidingPane );
						
			$slidingPane.css({
				width: $currentPane.width(),
				whiteSpace: 'normal',
				position: 'relative',
				top: '-' + $currentPane.height() + 'px',
				left: '-' + $currentPane.width() + 'px'
			}).removeClass('hidden');
			
			$contentContainer.css({
				overflow: 'hidden',
				whiteSpace: 'nowrap'
			});
			
			$currentPane.css({
				position: 'relative',
				whiteSpace: 'normal'
			}).animate({
				left: $currentPane.width() + 'px'
			}, function(){
				$(this).removeAttr('style').addClass('hidden');
			});
			
			$slidingPane.animate({
				left: 0
			}, function(){
				$(this).remove();
				$newPane.removeClass('hidden');
				$contentContainer.removeAttr('style');
				buildBreadcrumbs();
				helpContentHeight();
			});
		});
	}
})(jQuery);

$(document).ready( function(){
	onLoad();
	
	if( window.opener ){
		onLoadPopout();
	}
	
	$(window).resize( function(){
		helpHeight();
		helpContentHeight();
		
		if( window.opener ){
			helpWidth();
		}
	});
	
	$('#help-area .tab').toggle( function(){
		$('#help-area').animate({
			left: 0
		}, {
			step: function(){
				if( $('#help-area #pin').hasClass('selected') ){
					evaluateWidth();
				}
			}
		}).removeClass('hidden');
	}, function(){
		$('#help-area').animate({
			left: '-' + ( $('#help-area').width() + 1 )
		}, { 
			step: function(){
				if( $('#help-area #pin').hasClass('selected') ){
					evaluateWidth();
				}
			}
		}).addClass('hidden');
	});
	
	$('#help-area #pin').click( function(e){
		e.preventDefault();
		if( !$(this).hasClass('selected') ){
			$(this).addClass('selected');
		} else {
			$(this).removeClass('selected');
		}
		evaluateWidth();		
	});
	
	$('.nav-tabs a').click( function(e){
		e.preventDefault();
		var pane = $(this).attr('href');
		
		$('#help-area .content .pane').addClass('hidden');
		$(this).parent().siblings().removeClass('selected');
		$('#help-area .content ' + pane).removeClass('hidden');
		$('#help-area .content ' + pane + ' .subpane').each( function(){
			if( $(this).index() !== 0 && $(this).index() !== 1 ){
				$(this).addClass('hidden');
			} else {
				$(this).removeClass('hidden');
			}
		});
		$(this).parent().addClass('selected');
	});
	
	$('.content>.pane').each( function(){
		if( $(this).index() !== 0 ){
			$(this).addClass('hidden');
		}
	});
	
	$('#popout').live( 'click', function(){
		var strWindowFeatures = "location=no,menubar=no,resizable=yes,scrollbars=no,status=no,width=450,height=350";
		window.open('help-popout.html', 'help_popoutWindow', strWindowFeatures);
		$('#help-area').hide();
		evaluateWidth();
	});
	
	$('#popin').live( 'click', function(e){
		e.preventDefault();
		console.log(window.opener);
		window.opener.onPopin();
		window.close();
	});
});

function onLoad(){
	helpHeight();
	helpContentHeight();
	$('#drag-bar').dragWidth();
	$('#steps').slideout({
		breadcrumb: '#breadcrumbs',
		home: '#home'
	});
}

function onLoadPopout(){
	$('#help-area .tab').remove();
	$('#pin').remove();
	$('#help-area').css({left : 0 });
	$('#popout').removeAttr('id').attr('id','popin');
	helpWidth();
	evaluateWidth();
}

function onPopin(){
	$('#help-area').show();
	evaluateWidth();
}

function helpHeight(){
	var window_height = $(window).height();
	$('#help-area').css('height', window_height + 'px');
}

function helpWidth(){
	$('.content-container').width( $(window).width() - 1 );
}

function helpContentHeight(){
	var content_top = $('#help-area .content').offset().top;
	var content_bottom = $(window).height() - parseInt( $('#help-area .content').css('marginBottom'), 10 );
	var content_length = content_bottom - content_top - (2 * parseInt( $('#help-area .content').css('paddingTop'), 10 ) ) - (2 * parseInt( $('#help-area .content').css('borderTopWidth'), 10 ) );
	
	$('#help-area .content').css('height', content_length);
}

function evaluateWidth(){
	if( $('#help-area #pin').hasClass('selected') ){
		var helpAreaWidth = $('#help-area').width() + parseInt( $('#help-area').css('left'), 10 );
		
		$('#help-pin-wrapper').css('marginLeft', helpAreaWidth + 'px');
	} else {
		$('#help-pin-wrapper').removeAttr('style');
	}
}
*/
/**
 * My Account Flyout...
 * 
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.myAccountFlyout = (function()
{
    var properties = {};
    
    properties.dialogDivId = 'componentMyAccountFlyoutDiv';
    properties.template = '#componentMyAccountFlyout';
    
    var myaData = {};
    
    var getMYASuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            myaData = data;
            $(document).trigger('myaDataUpdate');
        }
    };
    
    return{
        
        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function()
        {   
            WCC.components.godaddyFlyout.close();
            
            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                
                WCC.utils.showLoading(properties.dialogDivId);
            }
            
            $.ajax({
                type: "POST",
                url: 'ajax/getmyadata/',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success : getMYASuccess,
                error :  WCC.utils.handleError 
            });
            
            var that = this;
            
            $(document).bind('myaDataUpdate', function(){that.renderFlyout();});

            return true;
        },
        
        
         /**
         * Render the dialog...
         * 
         */
        renderFlyout: function()
        {  
            var renderedOutput =  $(properties.template).tmpl();
            $('#'+properties.dialogDivId).html(renderedOutput);
        },
        
        
        /**
         * Return the data
         */
        returnMyaData: function()
        {
            var side = 'right';
            var output = {};
            output['left'] = [];
            output['right'] = [];
            var theData = myaData['mya'];
            for (var k in theData)
            {
                if (side == "right")
                {
                    side = 'left';
                }
                else
                {
                    side = 'right';
                }
                
                output[side][output[side].length] = theData[k];
            }
            
            return output;
            
        },
        
        
        /**
         * The left side of things
         */
        returnLeftMyaData : function()
        {
            var theData = this.returnMyaData(); 
            return theData['left'];
        },
        
        
        /**
         * The right side of things...
         */
        returnRightMyaData : function()
        {
            var theData = this.returnMyaData(); 
            return theData['right'];
        },
        
        
        /**
         * Close the flyout and remove the div
         * 
         */
        close: function()
        {
            $('#'+properties.dialogDivId).remove();
        }
        
    };
    
    
}());



/**
 * My Account Flyout...
 * 
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.godaddyFlyout = (function()
{
    var properties = {};
    
    properties.dialogDivId = 'componentGodaddyFlyoutDiv';
    properties.template = '#componentGodaddyFlyout';
    
    var myaData = {};
    
    // this is what happens when your MYA ajax hit succeeds...
    var getMYASuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            myaData = data;
            $(document).trigger('primaryDataUpdate');
        }
    };
    
    return{
        
        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function()
        {   
            WCC.components.myAccountFlyout.close();
            
            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                
                WCC.utils.showLoading(properties.dialogDivId);
            }
            
            $.ajax({
                type: "POST",
                url: 'ajax/getmyadata/',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN},
                success : getMYASuccess,
                error :  WCC.utils.handleError 
            });
            
            var that = this;
            
            $(document).bind('primaryDataUpdate', function(){that.renderFlyout();});

            return true;
        },
        
        
         /**
         * Render the dialog...
         * 
         */
        renderFlyout: function()
        {  
            var renderedOutput =  $(properties.template).tmpl();
            $('#'+properties.dialogDivId).html(renderedOutput);
        },
        
        
        /**
         * Return the data
         */
        returnPrimaryData: function()
        {
            var side = 'right';
            var output = {};
            output['left'] = [];
            output['right'] = [];
            var theData = myaData['primary'];
            for (var k in theData)
            {
                if (side == "right")
                {
                    side = 'left';
                }
                else
                {
                    side = 'right';
                }
                
                output[side][output[side].length] = theData[k];
            }
            
            return output;
            
        },
        
        
        /**
         * THe left side of things
         */
        returnLefPrimaryData : function()
        {
            var theData = this.returnPrimaryData(); 
            return theData['left'];
        },
        
        
        /**
         * The right side of things...
         */
        returnRightPrimaryData : function()
        {
            var theData = this.returnPrimaryData(); 
            return theData['right'];
        },
        
        
        /**
         * Close the flyout and remove the div
         * 
         */
        close: function()
        {
            $('#'+properties.dialogDivId).remove();
        }
        
    };
    
    
}());



/**
 * Server settings dialog
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.outlookSetupTool = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentOutlookSetupToolDiv';
    properties.template = '#componentOutlookSetupTool';
    properties.title = BRAVO.Translate._("WCC_MAIN_outlookSetupToolTitle");
    properties.url = '/ajax/domainsetting/';

    properties.data = {};


    return{

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function()
        {
            WCC.components.analytics.trackView('modal', 'wcc-outlook');

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                WCC.utils.centerThisDialog(properties.dialogDivId);

                WCC.utils.showLoading(properties.dialogDivId);
                WCC.utils.centerThisDialog(properties.dialogDivId);

            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 530 ,
                title: properties.title,
                position: 'center'
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");
            WCC.utils.centerThisDialog(properties.dialogDivId);

            WCC.components.outlookSetupTool.renderDialog();
        },

        /**
         * Render the dialog...
         *
         */
        renderDialog: function()
        {

            var renderedOutput =  $(properties.template).tmpl();
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#"+properties.dialogDivId).dialog( {position: 'center'} );
            WCC.utils.centerThisDialog(properties.dialogDivId);

        },


        /**
         * Return properties.data
         *
         */
        getData: function()
        {
            return properties.data;
        },


        /**
         * Close the dialog
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
        }


    };


}());



/**
 * Server settings dialog
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.welcomeEmail = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentWelcomeEmailDiv';
    properties.template = '#componentWelcomeEmail';
    properties.title = BRAVO.Translate._("WCC_MAIN_welcomeEmail-title");


    properties.data = {};

    var submitObj = null;

    /**
     * confirmation change submission success!
     */
    var submitOkSuccess = function (data)
    {
    	konsole.log(data);
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            WCC.components.welcomeEmail.closeDialog();
            return;
        } else {

            WCC.spinKontrol.close();

        	//ERROR HANDLING AND DISPLAY!
        	var textError = '';
        	for (var errorType in data.error) {
    			if (textError !== "") {
    				textError += '<br>';
    			}
    			textError += " - " + data.error[errorType];
        	}
        	var dataError = data.error;
            WCC.components.componentErrorDisplay.open("Account Confirmation Error", dataError, function(a, b, c){});
            $("#send-confirmation-button").attr('disabled', null);
        }
    };

    return{

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function()
        {
        	if(Globals.welcomeEmails == 0){
        		return;
        	}
            WCC.components.analytics.trackView('modal', 'wcc-welcomeemail');

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);

            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 530 ,
                title: properties.title,
                position: 'center'
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");
            WCC.utils.centerThisDialog(properties.dialogDivId);

            WCC.components.welcomeEmail.renderDialog();
            require('starfield/sf.tipper', function(){
            	$("#componentWelcomeEmailDiv").sfTipper({wireup:true});
            });
            var that = this;
            WCC.utils.centerThisDialog(properties.dialogDivId);

            $("#send-confirmation-button").click(function() {that.submitForm($("input:radio[name=sendTo]:checked").val(), $("input[name=others]").val());});

        },

        submitForm: function(sendTo, others)
        {
        	konsole.log($("input:radio[name=sendTo]").val());
        	konsole.log(sendTo);
        	konsole.log(others);

        	WCC.spinKontrol.open('componentWelcomeEmailDiv');
            $("#send-confirmation-button").attr('disabled', 'disabled');

            submitObj = {};
            submitObj.notify = properties.data['displayName'];
            submitObj.sendTo = sendTo;
            submitObj.others = others;
            submitObj.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajax/sendconfirmation/',
                dataType : 'json',
                data: submitObj,
                success : submitOkSuccess,
                error :  WCC.utils.handleError
            });

},

        /**
         * Render the dialog...
         *
         */
        renderDialog: function()
        {

            var renderedOutput =  $(properties.template).tmpl(properties.data);
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#"+properties.dialogDivId).dialog( {position: 'center'} );

        },


        /**
         * Return properties.data
         *
         */
        setData: function(attrib, value)
        {
            properties.data[attrib] = value;
        },

        /**
         * Return properties.data
         *
         */
        getData: function()
        {
            return properties.data;
        },


        /**
         * Close the dialog
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
            properties.data = {};
        }


    };


}());



/**
 * Example to use when making new components
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.workspaceTools = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentWorkspaceToolsDiv';
    properties.template = '#componentWorkspaceTools';
    properties.title = BRAVO.Translate._("wcc_main_workspaceTools");

    return{

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function()
        {

            WCC.components.analytics.trackView('modal', 'wcc-workspacetools');

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                WCC.utils.centerThisDialog(properties.dialogDivId);

                WCC.utils.showLoading(properties.dialogDivId);
                WCC.utils.centerThisDialog(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 816,
                height: 500,
                title: properties.title
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");
            WCC.utils.centerThisDialog(properties.dialogDivId);


            this.renderDialog();

            return true;
        },


        /**
         * Render the dialog...
         *
         */
        renderDialog: function()
        {
            var renderedOutput =  $(properties.template).tmpl();
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);

            $("#componentWorkspaceToolsDiv").css('background-image', 'url("' + Globals.CDNPath + '/../css/images/tan_fade_background.gif")');
        },


        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        }

    };


}());



//superfish
(function($){$.fn.superfish=function(op){var sf=$.fn.superfish,c=sf.c,$arrow=$(['<span class="',c.arrowClass,'"> &#187;</span>'].join('')),over=function(){var $$=$(this),menu=getMenu($$);clearTimeout(menu.sfTimer);$$.showSuperfishUl().siblings().hideSuperfishUl()},out=function(){var $$=$(this),menu=getMenu($$),o=sf.op;clearTimeout(menu.sfTimer);menu.sfTimer=setTimeout(function(){o.retainPath=($.inArray($$[0],o.$path)>-1);$$.hideSuperfishUl();if(o.$path.length&&$$.parents(['li.',o.hoverClass].join('')).length<1){over.call(o.$path)}},o.delay)},getMenu=function($menu){var menu=$menu.parents(['ul.',c.menuClass,':first'].join(''))[0];sf.op=sf.o[menu.serial];return menu},addArrow=function($a){$a.addClass(c.anchorClass).append($arrow.clone())};return this.each(function(){var s=this.serial=sf.o.length;var o=$.extend({},sf.defaults,op);o.$path=$('li.'+o.pathClass,this).slice(0,o.pathLevels).each(function(){$(this).addClass([o.hoverClass,c.bcClass].join(' ')).filter('li:has(ul)').removeClass(o.pathClass)});sf.o[s]=sf.op=o;$('li:has(ul)',this)[($.fn.hoverIntent&&!o.disableHI)?'hoverIntent':'hover'](over,out).each(function(){if(o.autoArrows)addArrow($('>a:first-child',this))}).not('.'+c.bcClass).hideSuperfishUl();var $a=$('a',this);$a.each(function(i){var $li=$a.eq(i).parents('li');$a.eq(i).focus(function(){over.call($li)}).blur(function(){out.call($li)})});o.onInit.call(this)}).each(function(){var menuClasses=[c.menuClass];if(sf.op.dropShadows&&!($.browser.msie&&$.browser.version<7))menuClasses.push(c.shadowClass);$(this).addClass(menuClasses.join(' '))})};var sf=$.fn.superfish;sf.o=[];sf.op={};sf.IE7fix=function(){var o=sf.op;if($.browser.msie&&$.browser.version>6&&o.dropShadows&&o.animation.opacity!=undefined)this.toggleClass(sf.c.shadowClass+'-off')};sf.c={bcClass:'sf-breadcrumb',menuClass:'sf-js-enabled',anchorClass:'sf-with-ul',arrowClass:'sf-sub-indicator',shadowClass:'sf-shadow'};sf.defaults={hoverClass:'sfHover',pathClass:'overideThisToUse',pathLevels:1,delay:800,animation:{opacity:'show'},speed:'normal',autoArrows:true,dropShadows:true,disableHI:false,onInit:function(){},onBeforeShow:function(){},onShow:function(){},onHide:function(){}};$.fn.extend({hideSuperfishUl:function(){var o=sf.op,not=(o.retainPath===true)?o.$path:'';o.retainPath=false;var $ul=$(['li.',o.hoverClass].join(''),this).add(this).not(not).removeClass(o.hoverClass).find('>ul').hide().css('visibility','hidden');o.onHide.call($ul);return this},showSuperfishUl:function(){var o=sf.op,sh=sf.c.shadowClass+'-off',$ul=this.addClass(o.hoverClass).find('>ul:hidden').css('visibility','visible');sf.IE7fix.call($ul);o.onBeforeShow.call($ul);$ul.animate(o.animation,o.speed,function(){sf.IE7fix.call($ul);o.onShow.call($ul)});return this}})})(jQuery);

//Supersubs
(function($){$.fn.supersubs=function(options){var opts=$.extend({},$.fn.supersubs.defaults,options);return this.each(function(){var $$=$(this);var o=$.meta?$.extend({},opts,$$.data()):opts;var fontsize=$('<li id="menu-fontsize">&#8212;</li>').css({'padding':0,'position':'absolute','top':'-999em','width':'auto'}).appendTo($$).width();$('#menu-fontsize').remove();$ULs=$$.find('ul');$ULs.each(function(i){var $ul=$ULs.eq(i);var $LIs=$ul.children();var $As=$LIs.children('a');var liFloat=$LIs.css('white-space','nowrap').css('float');var emWidth=$ul.add($LIs).add($As).css({'float':'none','width':'auto'}).end().end()[0].clientWidth/fontsize;emWidth+=o.extraWidth;if(emWidth>o.maxWidth){emWidth=o.maxWidth}else if(emWidth<o.minWidth){emWidth=o.minWidth}emWidth+='em';$ul.css('width',emWidth);$LIs.css({'float':liFloat,'width':'100%','white-space':'normal'}).each(function(){var $childUl=$('>ul',this);var offsetDirection=$childUl.css('left')!==undefined?'left':'right';$childUl.css(offsetDirection,emWidth)})})})};$.fn.supersubs.defaults={minWidth:9,maxWidth:25,extraWidth:0}})(jQuery);

//Hover
(function($){$.fn.hoverIntent=function(f,g){var cfg={sensitivity:7,interval:100,timeout:0};cfg=$.extend(cfg,g?{over:f,out:g}:f);var cX,cY,pX,pY;var track=function(ev){cX=ev.pageX;cY=ev.pageY};var compare=function(ev,ob){ob.hoverIntent_t=clearTimeout(ob.hoverIntent_t);if((Math.abs(pX-cX)+Math.abs(pY-cY))<cfg.sensitivity){$(ob).unbind("mousemove",track);ob.hoverIntent_s=1;return cfg.over.apply(ob,[ev])}else{pX=cX;pY=cY;ob.hoverIntent_t=setTimeout(function(){compare(ev,ob)},cfg.interval)}};var delay=function(ev,ob){ob.hoverIntent_t=clearTimeout(ob.hoverIntent_t);ob.hoverIntent_s=0;return cfg.out.apply(ob,[ev])};var handleHover=function(e){var p=(e.type=="mouseover"?e.fromElement:e.toElement)||e.relatedTarget;while(p&&p!=this){try{p=p.parentNode}catch(e){p=this}}if(p==this){return false}var ev=jQuery.extend({},e);var ob=this;if(ob.hoverIntent_t){ob.hoverIntent_t=clearTimeout(ob.hoverIntent_t)}if(e.type=="mouseover"){pX=ev.pageX;pY=ev.pageY;$(ob).bind("mousemove",track);if(ob.hoverIntent_s!=1){ob.hoverIntent_t=setTimeout(function(){compare(ev,ob)},cfg.interval)}}else{$(ob).unbind("mousemove",track);if(ob.hoverIntent_s==1){ob.hoverIntent_t=setTimeout(function(){delay(ev,ob)},cfg.timeout)}}};return this.mouseover(handleHover).mouseout(handleHover)}})(jQuery);

//BG iFrame
(function($){$.fn.bgiframe=($.browser.msie&&/msie 6\.0/i.test(navigator.userAgent)?function(s){s=$.extend({top:'auto',left:'auto',width:'auto',height:'auto',opacity:true,src:'javascript:false;'},s);var html='<iframe class="bgiframe"frameborder="0"tabindex="-1"src="'+s.src+'"'+'style="display:block;position:absolute;z-index:-1;'+(s.opacity!==false?'filter:Alpha(Opacity=\'0\');':'')+'top:'+(s.top=='auto'?'expression(((parseInt(this.parentNode.currentStyle.borderTopWidth)||0)*-1)+\'px\')':prop(s.top))+';'+'left:'+(s.left=='auto'?'expression(((parseInt(this.parentNode.currentStyle.borderLeftWidth)||0)*-1)+\'px\')':prop(s.left))+';'+'width:'+(s.width=='auto'?'expression(this.parentNode.offsetWidth+\'px\')':prop(s.width))+';'+'height:'+(s.height=='auto'?'expression(this.parentNode.offsetHeight+\'px\')':prop(s.height))+';'+'"/>';return this.each(function(){if($(this).children('iframe.bgiframe').length===0)this.insertBefore(document.createElement(html),this.firstChild);});}:function(){return this;});$.fn.bgIframe=$.fn.bgiframe;function prop(n){return n&&n.constructor===Number?n+'px':n;}})(jQuery);


/**
 * Header JavaScript
 */
// initialise plugins

$(document).ready(function(){
	/**
	$(function(){
		$('.integrated-menu ul').superfish({
			hoverClass:    'sfhover',          // the class applied to hovered list items 
		    pathLevels:    1,                  // the number of levels of submenus that remain open or are restored using pathClass 
		    delay:         300,                // the delay in milliseconds that the mouse can remain outside a submenu without it closing 
		    animation:     {opacity:'show'},   // an object equivalent to first parameter of jQuery’s .animate() method 
		    speed:         100,                // speed of the animation. Equivalent to second parameter of jQuery’s .animate() method 
		    autoArrows:    false,              // if true, arrow mark-up generated automatically = cleaner source code at expense of initialisation performance 
		    dropShadows:   false,              // completely disable drop shadows by setting this to false 
		    disableHI:     false,              // set to true to disable hoverIntent detection 
		    onInit:        function(){},       // callback function fires once Superfish is initialised – 'this' is the containing ul 
		    onBeforeShow:  function(){},       // callback function fires just before reveal animation begins – 'this' is the ul about to open 
		    onShow:        function(){},       // callback function fires once reveal animation completed – 'this' is the opened ul 
		    onHide:        function(){}		   // callback function fires after a sub-menu has closed – 'this' is the ul that just closed 
		}).find('ul').bgIframe({opacity:true}); ;
		
		$('.tabs-menu ul').superfish({
			hoverClass:    'sfhover',          // the class applied to hovered list items 
		    pathLevels:    1,                  // the number of levels of submenus that remain open or are restored using pathClass 
		    delay:         300,                // the delay in milliseconds that the mouse can remain outside a submenu without it closing 
		    animation:     {opacity:'show'},   // an object equivalent to first parameter of jQuery’s .animate() method 
		    speed:         100,                // speed of the animation. Equivalent to second parameter of jQuery’s .animate() method 
		    autoArrows:    false,              // if true, arrow mark-up generated automatically = cleaner source code at expense of initialisation performance 
		    dropShadows:   false,              // completely disable drop shadows by setting this to false 
		    disableHI:     false,              // set to true to disable hoverIntent detection 
		    onInit:        function(){},       // callback function fires once Superfish is initialised – 'this' is the containing ul 
		    onBeforeShow:  function(){},       // callback function fires just before reveal animation begins – 'this' is the ul about to open 
		    onShow:        function(){},       // callback function fires once reveal animation completed – 'this' is the opened ul 
		    onHide:        function(){}		   // callback function fires after a sub-menu has closed – 'this' is the ul that just closed 
		}).find('ul').bgIframe({opacity:true}); ;
		
		$('.top-dropdown').superfish({
			hoverClass:    'sfhover',          // the class applied to hovered list items 
		    pathLevels:    1,                  // the number of levels of submenus that remain open or are restored using pathClass 
		    delay:         300,                // the delay in milliseconds that the mouse can remain outside a submenu without it closing 
		    animation:     {opacity:'show'},   // an object equivalent to first parameter of jQuery’s .animate() method 
		    speed:         100,                // speed of the animation. Equivalent to second parameter of jQuery’s .animate() method 
		    autoArrows:    false,              // if true, arrow mark-up generated automatically = cleaner source code at expense of initialisation performance 
		    dropShadows:   false,              // completely disable drop shadows by setting this to false 
		    disableHI:     false,              // set to true to disable hoverIntent detection 
		    onInit:        function(){},       // callback function fires once Superfish is initialised – 'this' is the containing ul 
		    onBeforeShow:  function(){},       // callback function fires just before reveal animation begins – 'this' is the ul about to open 
		    onShow:        function(){},       // callback function fires once reveal animation completed – 'this' is the opened ul 
		    onHide:        function(){}		   // callback function fires after a sub-menu has closed – 'this' is the ul that just closed 
		}).find('ul').bgIframe({opacity:true}); ;
		
		$('.right-content').superfish({
			hoverClass:    'sfhover',          // the class applied to hovered list items 
		    pathLevels:    1,                  // the number of levels of submenus that remain open or are restored using pathClass 
		    delay:         1,                  // the delay in milliseconds that the mouse can remain outside a submenu without it closing 
		    animation:     {opacity:'show'},   // an object equivalent to first parameter of jQuery’s .animate() method 
		    speed:         1,                  // speed of the animation. Equivalent to second parameter of jQuery’s .animate() method 
		    autoArrows:    false,              // if true, arrow mark-up generated automatically = cleaner source code at expense of initialisation performance 
		    dropShadows:   false,              // completely disable drop shadows by setting this to false 
		    disableHI:     false,              // set to true to disable hoverIntent detection 
		    onInit:        function(){},       // callback function fires once Superfish is initialised – 'this' is the containing ul 
		    onBeforeShow:  function(){},       // callback function fires just before reveal animation begins – 'this' is the ul about to open 
		    onShow:        function(){},       // callback function fires once reveal animation completed – 'this' is the opened ul 
		    onHide:        function(){}		   // callback function fires after a sub-menu has closed – 'this' is the ul that just closed 
		}).find('ul').bgIframe({opacity:true}); ;		
		
                
                $('#newFeaturesLink').superfish({
			hoverClass:    'sfhover',          // the class applied to hovered list items 
		    pathLevels:    1,                  // the number of levels of submenus that remain open or are restored using pathClass 
		    delay:         1,                  // the delay in milliseconds that the mouse can remain outside a submenu without it closing 
		    animation:     {opacity:'show'},   // an object equivalent to first parameter of jQuery’s .animate() method 
		    speed:         1,                  // speed of the animation. Equivalent to second parameter of jQuery’s .animate() method 
		    autoArrows:    false,              // if true, arrow mark-up generated automatically = cleaner source code at expense of initialisation performance 
		    dropShadows:   false,              // completely disable drop shadows by setting this to false 
		    disableHI:     false,              // set to true to disable hoverIntent detection 
		    onInit:        function(){},       // callback function fires once Superfish is initialised – 'this' is the containing ul 
		    onBeforeShow:  function(){},       // callback function fires just before reveal animation begins – 'this' is the ul about to open 
		    onShow:        function(){},       // callback function fires once reveal animation completed – 'this' is the opened ul 
		    onHide:        function(){}		   // callback function fires after a sub-menu has closed – 'this' is the ul that just closed 
		}).find('ul').bgIframe({opacity:true}); ;	
                
	});
	
	$(".tabs-menu ul ul ul li:last-child a,.integrated-menu ul ul ul li:last-child a").css({
		'border-bottom':'1px solid #c9c9c9'
	});
	
	var badBrowser = (/MSIE ((5\.5)|6|7)/.test(navigator.userAgent) && navigator.platform == "Win32");
	if (badBrowser) {
		$(".tabs-menu li").hover(function(){
			$(this).addClass("sfhover");
		}, function(){
			$(this).removeClass("sfhover");
		});
	};
	
	var badIe6 = (/MSIE ((5\.5)|6)/.test(navigator.userAgent) && navigator.platform == "Win32");
	if (badIe6) {
		// png fix
		var arVersion=navigator.appVersion.split("MSIE")
		var version=parseFloat(arVersion[1])
		if((version>=5.5)&&(document.body.filters))
		{for(var i=0;i<document.images.length;i++)
		{var img=document.images[i]
		var imgName=img.src.toUpperCase()
		if(imgName.substring(imgName.length-3,imgName.length)=="PNG")
		{var imgID=(img.id)?"id='"+img.id+"' ":""
		var imgClass=(img.className)?"class='"+img.className+"' ":""
		var imgTitle=(img.title)?"title='"+img.title+"' ":"title='"+img.alt+"' "
		var imgStyle="display:inline-block;"+img.style.cssText
		if(img.align=="left")imgStyle="float:left;"+imgStyle
		if(img.align=="right")imgStyle="float:right;"+imgStyle
		if(img.parentElement.href)imgStyle="cursor:hand;"+imgStyle
		var strNewHTML="<span "+imgID+imgClass+imgTitle
		+" style=\""+"width:"+img.width+"px; height:"+img.height+"px;"+imgStyle+";"
		+"filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"
		+"(src=\'"+img.src+"\', sizingMethod='scale');\"></span>"
		img.outerHTML=strNewHTML
		i=i-1}}}
		//end png fix
	}; **/
});

/**
 * Welcome to spinKontrol
 * This just gives you a Loading Spinner when shits gotta happen.
 * 
 * 
 * 
 */

var WCC = WCC || {};

WCC.spinKontrol = (function(){
	
        
        var properties = {};
        
        return {
            
            /**
             * Open
             * ... expects you to feed it a div
             * 
             */
            open: function (openDivInput)
            {
                $('#spinnerLand').remove();
                
                // create the grey box
                properties.inputDiv = $('#' + openDivInput);
                properties.inputDiv.append('<div id="spinnerLand"><span style="top: 120px; position: absolute; text-align: center; width: 100%; font-size: 16px">'+BRAVO.Translate._("WCC_MAIN_Loading_")+'</span></div>');
                var spinnerLand = $('#spinnerLand');
                
                // figure out where stuff should go....
                var inputWidth =  properties.inputDiv.width();
                var inputHeight =  properties.inputDiv.height();
                var inputOffset =  properties.inputDiv.offset();
                
                var offsetLeft = inputOffset.left +  ((inputWidth/2) - 75) + 20;
                var offsetTop = inputOffset.top + ( (inputHeight/2) - 75) + 20 ;
                
                spinnerLand.offset({ top: offsetTop, left: offsetLeft });
                
                var target = document.getElementById('spinnerLand');
                
                var opts = {
                  lines: 13, // The number of lines to draw
                  length: 7, // The length of each line
                  width: 4, // The line thickness
                  radius: 10, // The radius of the inner circle
                  rotate: 0, // The rotation offset
                  color: '#FFFFFF', // #rgb or #rrggbb
                  speed: 1, // Rounds per second
                  trail: 60, // Afterglow percentage
                  shadow: false, // Whether to render a shadow
                  hwaccel: false, // Whether to use hardware acceleration
                  className: 'spinner', // The CSS class to assign to the spinner
                  zIndex: 2e9, // The z-index (defaults to 2000000000)
                  top: 'auto', // Top position relative to parent in px
                  left: 'auto' // Left position relative to parent in px
                };
                
                var spinner = new Spinner(opts).spin(target);
            },
            
            
            /**
             * Close and remove the overlayer
             * 
             */
            close: function()
            {
                $('#spinnerLand').remove();
            }
            
            
        };
        
}());



// +LICENCE
//fgnass.github.com/spin.js#v1.2.5
// -LICENCE
(function(window, document, undefined) {

/**
 * Copyright (c) 2011 Felix Gnass [fgnass at neteye dot de]
 * Licensed under the MIT license
 */

  var prefixes = ['webkit', 'Moz', 'ms', 'O']; /* Vendor prefixes */
  var animations = {}; /* Animation rules keyed by their name */
  var useCssAnimations;

  /**
   * Utility function to create elements. If no tag name is given,
   * a DIV is created. Optionally properties can be passed.
   */
  function createEl(tag, prop) {
    var el = document.createElement(tag || 'div');
    var n;

    for(n in prop) {
      el[n] = prop[n];
    }
    return el;
  }

  /**
   * Appends children and returns the parent.
   */
  function ins(parent /* child1, child2, ...*/) {
    for (var i=1, n=arguments.length; i<n; i++) {
      parent.appendChild(arguments[i]);
    }
    return parent;
  }

  /**
   * Insert a new stylesheet to hold the @keyframe or VML rules.
   */
  var sheet = function() {
    var el = createEl('style');
    ins(document.getElementsByTagName('head')[0], el);
    return el.sheet || el.styleSheet;
  }();

  /**
   * Creates an opacity keyframe animation rule and returns its name.
   * Since most mobile Webkits have timing issues with animation-delay,
   * we create separate rules for each line/segment.
   */
  function addAnimation(alpha, trail, i, lines) {
    var name = ['opacity', trail, ~~(alpha*100), i, lines].join('-');
    var start = 0.01 + i/lines*100;
    var z = Math.max(1-(1-alpha)/trail*(100-start) , alpha);
    var prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase();
    var pre = prefix && '-'+prefix+'-' || '';

    if (!animations[name]) {
      sheet.insertRule(
        '@' + pre + 'keyframes ' + name + '{' +
        '0%{opacity:'+z+'}' +
        start + '%{opacity:'+ alpha + '}' +
        (start+0.01) + '%{opacity:1}' +
        (start+trail)%100 + '%{opacity:'+ alpha + '}' +
        '100%{opacity:'+ z + '}' +
        '}', 0);
      animations[name] = 1;
    }
    return name;
  }

  /**
   * Tries various vendor prefixes and returns the first supported property.
   **/
  function vendor(el, prop) {
    var s = el.style;
    var pp;
    var i;

    if(s[prop] !== undefined) return prop;
    prop = prop.charAt(0).toUpperCase() + prop.slice(1);
    for(i=0; i<prefixes.length; i++) {
      pp = prefixes[i]+prop;
      if(s[pp] !== undefined) return pp;
    }
  }

  /**
   * Sets multiple style properties at once.
   */
  function css(el, prop) {
    for (var n in prop) {
      el.style[vendor(el, n)||n] = prop[n];
    }
    return el;
  }

  /**
   * Fills in default values.
   */
  function merge(obj) {
    for (var i=1; i < arguments.length; i++) {
      var def = arguments[i];
      for (var n in def) {
        if (obj[n] === undefined) obj[n] = def[n];
      }
    }
    return obj;
  }

  /**
   * Returns the absolute page-offset of the given element.
   */
  function pos(el) {
    var o = {x:el.offsetLeft, y:el.offsetTop};
    while((el = el.offsetParent)) {
      o.x+=el.offsetLeft;
      o.y+=el.offsetTop;
    }
    return o;
  }

  var defaults = {
    lines: 12,            // The number of lines to draw
    length: 7,            // The length of each line
    width: 5,             // The line thickness
    radius: 10,           // The radius of the inner circle
    rotate: 0,            // rotation offset
    color: '#000',        // #rgb or #rrggbb
    speed: 1,             // Rounds per second
    trail: 100,           // Afterglow percentage
    opacity: 1/4,         // Opacity of the lines
    fps: 20,              // Frames per second when using setTimeout()
    zIndex: 2e9,          // Use a high z-index by default
    className: 'spinner', // CSS class to assign to the element
    top: 'auto',          // center vertically
    left: 'auto'          // center horizontally
  };

  /** The constructor */
  var Spinner = function Spinner(o) {
    if (!this.spin) return new Spinner(o);
    this.opts = merge(o || {}, Spinner.defaults, defaults);
  };

  Spinner.defaults = {};
  merge(Spinner.prototype, {
    spin: function(target) {
      this.stop();
      var self = this;
      var o = self.opts;
      var el = self.el = css(createEl(0, {className: o.className}), {position: 'relative', zIndex: o.zIndex});
      var mid = o.radius+o.length+o.width;
      var ep; // element position
      var tp; // target position

      if (target) {
        target.insertBefore(el, target.firstChild||null);
        tp = pos(target);
        ep = pos(el);
        css(el, {
          left: (o.left == 'auto' ? tp.x-ep.x + (target.offsetWidth >> 1) : o.left+mid) + 'px',
          top: (o.top == 'auto' ? tp.y-ep.y + (target.offsetHeight >> 1) : o.top+mid)  + 'px'
        });
      }

      el.setAttribute('aria-role', 'progressbar');
      self.lines(el, self.opts);

      if (!useCssAnimations) {
        // No CSS animation support, use setTimeout() instead
        var i = 0;
        var fps = o.fps;
        var f = fps/o.speed;
        var ostep = (1-o.opacity)/(f*o.trail / 100);
        var astep = f/o.lines;

        !function anim() {
          i++;
          for (var s=o.lines; s; s--) {
            var alpha = Math.max(1-(i+s*astep)%f * ostep, o.opacity);
            self.opacity(el, o.lines-s, alpha, o);
          }
          self.timeout = self.el && setTimeout(anim, ~~(1000/fps));
        }();
      }
      return self;
    },
    stop: function() {
      var el = this.el;
      if (el) {
        clearTimeout(this.timeout);
        if (el.parentNode) el.parentNode.removeChild(el);
        this.el = undefined;
      }
      return this;
    },
    lines: function(el, o) {
      var i = 0;
      var seg;

      function fill(color, shadow) {
        return css(createEl(), {
          position: 'absolute',
          width: (o.length+o.width) + 'px',
          height: o.width + 'px',
          background: color,
          boxShadow: shadow,
          transformOrigin: 'left',
          transform: 'rotate(' + ~~(360/o.lines*i+o.rotate) + 'deg) translate(' + o.radius+'px' +',0)',
          borderRadius: (o.width>>1) + 'px'
        });
      }
      for (; i < o.lines; i++) {
        seg = css(createEl(), {
          position: 'absolute',
          top: 1+~(o.width/2) + 'px',
          transform: o.hwaccel ? 'translate3d(0,0,0)' : '',
          opacity: o.opacity,
          animation: useCssAnimations && addAnimation(o.opacity, o.trail, i, o.lines) + ' ' + 1/o.speed + 's linear infinite'
        });
        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), {top: 2+'px'}));
        ins(el, ins(seg, fill(o.color, '0 0 1px rgba(0,0,0,.1)')));
      }
      return el;
    },
    opacity: function(el, i, val) {
      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val;
    }
  });

  /////////////////////////////////////////////////////////////////////////
  // VML rendering for IE
  /////////////////////////////////////////////////////////////////////////

  /**
   * Check and init VML support
   */
  !function() {

    function vml(tag, attr) {
      return createEl('<' + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', attr);
    }

    var s = css(createEl('group'), {behavior: 'url(#default#VML)'});

    if (!vendor(s, 'transform') && s.adj) {

      // VML support detected. Insert CSS rule ...
      sheet.addRule('.spin-vml', 'behavior:url(#default#VML)');

      Spinner.prototype.lines = function(el, o) {
        var r = o.length+o.width;
        var s = 2*r;

        function grp() {
          return css(vml('group', {coordsize: s +' '+s, coordorigin: -r +' '+-r}), {width: s, height: s});
        }

        var margin = -(o.width+o.length)*2+'px';
        var g = css(grp(), {position: 'absolute', top: margin, left: margin});

        var i;

        function seg(i, dx, filter) {
          ins(g,
            ins(css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx}),
              ins(css(vml('roundrect', {arcsize: 1}), {
                  width: r,
                  height: o.width,
                  left: o.radius,
                  top: -o.width>>1,
                  filter: filter
                }),
                vml('fill', {color: o.color, opacity: o.opacity}),
                vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change
              )
            )
          );
        }

        if (o.shadow) {
          for (i = 1; i <= o.lines; i++) {
            seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)');
          }
        }
        for (i = 1; i <= o.lines; i++) seg(i);
        return ins(el, g);
      };
      Spinner.prototype.opacity = function(el, i, val, o) {
        var c = el.firstChild;
        o = o.shadow && o.lines || 0;
        if (c && i+o < c.childNodes.length) {
          c = c.childNodes[i+o]; c = c && c.firstChild; c = c && c.firstChild;
          if (c) c.opacity = val;
        }
      };
    }
    else {
      useCssAnimations = vendor(s, 'animation');
    }
  }();

  window.Spinner = Spinner;

})(window, document);
/**
 * New Features Modal...
 * ... version 1.0 by Jon Roig (jroig@godaddy.com)
 * 
 * Usage looks like this:
 
 var newFeatures = [
        {"Content":"<p>We’ve updated the look of the Workspace Control Center and added new features to help you stay organized and manage your workspace more easily.</p>" + buttonText,"ContentUrl":null,"ImageUrl":Globals.CDNPath + '/../css/images/newFeatures/01_new_interface_notext.jpg',"Title":"Welcome to the New Look!"},
        {"Content":"<p>We've added account alerts to the Workspace Control Center to help you stay better informed of your account status.</p>" + buttonText,"ContentUrl":null,"ImageUrl":Globals.CDNPath + '/../css/images/newFeatures/02_account_alerts_notext.jpg',"Title":"Welcome to the New Look!"},
        {"Content":"<p>Now, you can set a single sign-on username and password to use for all your Workspace applications.</p>" + buttonText,"ContentUrl":null,"ImageUrl":Globals.CDNPath + '/../css/images/newFeatures/03_single_sign_on.jpg',"Title":"Welcome to the New Look!"},
    ];
 
  var options = {
        open:true,
        features: newFeatures,
        onClosed: function () {  },
        onIndicatorClicked: function () {  }
    };

    $('#componentNewFeaturesDiv').newFeaturesModal(options);


    public stuff is called like this:
        $('#componentNewFeaturesDiv').data('newFeaturesModal').closeDialog()
 */

(function($) {

    $.newFeaturesModal = function(element, options) {

        // default options
        var defaults = {
            opacity: .9,
            features: new Array(),
            onClosed: false,
            onIndicatorClicked: false,
            page: 0,
            closeButtonText: "Close",
            doNotShowText: "Don't show this message again"
        }

        var plugin = this;

        plugin.settings = {}

        var $element = $(element), // reference to the jQuery version of DOM element
             element = element;    // reference to the actual DOM element

        // the "constructor" method 
        plugin.init = function() 
        {
            // merge the settings
            plugin.settings = $.extend({}, defaults, options);

            // you've gotta have some contents... duh!
            if (plugin.settings.features.length == 0)
            {
                return false;
            }
            
            // we're gonna build this badboy...
            $element.addClass('modal');
            
            var defaultPage = plugin.settings.page;
            
            if (plugin.settings.open == true)
            {
                plugin.open();
            }
            
            // this seems dumb, but apparently I needs it
            var tempSettings = [];
            for (var i in plugin.settings.features)
            {
                tempSettings[tempSettings.length] = plugin.settings.features[i];
            }
           
            plugin.settings.features = tempSettings;
        }

        
        // public method for going to a page
        plugin.goPage = function(page)
        {
            renderDialog(page);
        }
        
        // the public open method
        plugin.open = function()
        {
            renderDialog(0);
        }

       

        // private method... render the box...
        var renderDialog = function(page) 
        {
            $element.show();
            
            renderOverlay();
            
            $element.html('');
            
            var html = '';
            
            if (page > 0)
            {
                html += '<a class="nav_arrow left_nav_arrow" href="#">Previous</a>';
            }
            
            if (page < plugin.settings.features.length - 1)
            {
                html += '<a class="nav_arrow right_nav_arrow" href="#">Next</a>';
            }
            
            html += '<div class="modal_titlebar"><span class="modal_header">' + plugin.settings.features[page]['Title'] + '</span>';
            html += '<span class="modal_header" style="display:none;">' + plugin.settings.features[page]['Title'] + '</span></div>';
            
            html += '<div class="modal_content">';
            
            html += '<div class="modal_banner"><img src="' + plugin.settings.features[page]['ImageUrl'] + '"  /></div>';
            
            html += '<div class="page_dots"><ul>';
            
            for (var i in plugin.settings.features)
            {
                if (i == page)
                {
                    html += ' <li><a class="page_dot_active">&nbsp;</a></li>';
                }
                else
                {
                     html += ' <li><a class="page_dot_inactive">&nbsp;</a></li>';
                }
            }

            html += '</ul></div>';
            html += '<div class="modal_description">';
            html += '<div class="modal_text">' + plugin.settings.features[page]['Content'] + '</div>';
            html += '</div>';
            html += '<div class="modal_buttonpane clear-fix"><div class="right"><a class="g-btn-sm g-btn-sec" href="#" id="nfeatCloseButton">' + plugin.settings.closeButtonText +'</a></div>';
            html += '<div class="left"><input name="" type="checkbox" value="" id="nfeatDontShowCheckbox"/>' + plugin.settings.doNotShowText + '</div></div>';
            
            $element.append(html);
            
            // put stuff in the right place...
            positionDialog();
            
            // add some behaviors 'n' stuff
            
            // switch pages
            var nextPage = page + 1;
            var prevPage = page - 1;
            $element.find('.right_nav_arrow').click(function(){plugin.goPage(nextPage)});
            $element.find('.left_nav_arrow').click(function(){plugin.goPage(prevPage)});
            
            // page dots
            var pageDots =  $element.find('.page_dots li a');
            for (var x = 0; x < pageDots.length; x++)
            {
                $(pageDots[x]).data('x', x);
                $(pageDots[x]).bind('click',function(){plugin.goPage($(this).data('x'))});
            }
            
            // close button
            $element.find('#nfeatCloseButton').click(function(){plugin.closeDialog()});
            
            // indicator
            if (jQuery.isFunction(plugin.settings.onIndicatorClicked) )
            {
                $element.find('#nfeatDontShowCheckbox').click(function(){callIndicatorClickedCallback()})
            }
            
            // attach the resize event handler
            $(window).bind('resize',handleResize);
        }
        
        
        // handle the indicator clicking
        var callIndicatorClickedCallback = function()
        {
            plugin.settings.onIndicatorClicked.call();
        }
        
        
        // render the background overlay
        var renderOverlay = function()
        {
            if ($('#newFeaturesOverlay').length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = 'newFeaturesOverlay';
                $(document.body).append(newDiv);
            }
            
            $('#newFeaturesOverlay')
                .width($(document).width())
                .height($(document).height())
                .css({"opacity": plugin.settings.opacity, "cursor": "auto"})
                .css({'position' : 'absolute', 'top': '0px', 'left' : '0px', 'background-color': '#4f4f4f'})
                .css({'z-index': 1920});
    
            $("body").css("overflow", "hidden");
        }
       
        
        // close the modal
        plugin.closeDialog = function()
        {
            
            
            $("body").css("overflow", 'visible');

            $element.hide();
            
            if (jQuery.isFunction(plugin.settings.onClosed) )
            {
                plugin.settings.onClosed.call();
            }
            
            $(window).unbind('resize', handleResize);
            $('#newFeaturesOverlay').remove();
            
            setTimeout(function()
            {
                $("body").css("overflow", 'visible');  
                if (WCC.email != undefined)
                {
                    WCC.email.setupUsernameResize();
                }
                if (WCC.main != undefined)
                {
                    WCC.main.setupUsernameResize();
                }
            }, 100);
            WCC.utils.handleUserAddressWidth()
            
            return true;
        }
        
        
        // handle any page resize events
        var handleResize = function()
        {
            positionDialog();
            renderOverlay();
        }
        
        
        // position the dialog box
        var positionDialog = function()
        {
            var elementHeight = $element.height();
            var elementWidth = $element.width();
            var heightOffset = ($(window).height() - elementHeight)/2;
            var widthOffset = ($(window).width() - elementWidth)/2;
            
            $element.css('top', heightOffset);
            $element.css('left', widthOffset);
        }

        plugin.init();

    }

    $.fn.newFeaturesModal = function(options) 
    {
        return this.each(function() 
        {
            if (undefined == $(this).data('newFeaturesModal')) 
            {
                var plugin = new $.newFeaturesModal(this, options);

                $(this).data('newFeaturesModal', plugin);
            }
        });
    }

})(jQuery);
/**
 * Example to use when making new components
 * 
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.newFeatures = (function()
{
    var properties = {};
    
    properties.dialogDivId = 'componentNewFeaturesDiv';
    properties.template = '#componentNewFeatures';
    properties.title = BRAVO.Translate._("WCC_MAIN_newFeaturesTitle");

    return{
        
        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function()
        {   
            return false; // turned off for now - jon
            
            if (WCC.userSettings.getLoaded() == false)
            {
                setTimeout(function(){ WCC.components.newFeatures.open();}, 100);
                return;
            }
            
            if (WCC.userSettings.get('showWelcome') == "false" )
            {
               return;
            }
            

            
            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
            }

            
            //var buttonText = "<div style='height: 50px; text-align: center; padding-top: 25px'><a href='#' onclick='WCC.components.newFeatures.doTour(); return false'><img src='" + Globals.CDNPath + "/../css/images/newFeatures/tour_green_button.png'/></a></div>";
            var buttonText = '<div id="tourButtonHolder"><a href="#" onclick="WCC.components.newFeatures.doTour(); return false" class="imp-button main-action-fos-button"><div id="tourLine1">' + BRAVO.Translate._("WCC_MAIN_getStarted") + '</div></a></div>';
            
            var newFeatures = [
                    {"Content":"<p>" + BRAVO.Translate._("WCC_MAIN_newFeaturesFour") + "</p>" + buttonText,"ContentUrl":null,"ImageUrl":Globals.CDNPath + '/../css/images/newFeatures/4_create_account.jpg',"Title":BRAVO.Translate._("WCC_MAIN_welcomeControlCenter")},
                    {"Content":"<p>" + BRAVO.Translate._("WCC_MAIN_newFeaturesFive") + "</p>" + buttonText,"ContentUrl":null,"ImageUrl":Globals.CDNPath + '/../css/images/newFeatures/5_account_alerts.jpg',"Title":BRAVO.Translate._("WCC_MAIN_welcomeControlCenter")},
                    {"Content":"<p>" + BRAVO.Translate._("WCC_MAIN_newFeaturesSix") + "</p>" + buttonText,"ContentUrl":null,"ImageUrl":Globals.CDNPath + '/../css/images/newFeatures/6_launch.jpg',"Title":BRAVO.Translate._("WCC_MAIN_welcomeControlCenter")}
                ];
            
            
            
            var options = {
                open:true,
                features: newFeatures,
                close: function () { setTimeout(function(){ WCC.utils.handleUserAddressWidth()}, 100); },
                onIndicatorClicked: function () { WCC.components.newFeatures.doNotEverShow(); },
                closeButtonText: BRAVO.Translate._("WCC_MAIN_close"),
                doNotShowText: BRAVO.Translate._("WCC_MAIN_newFeaturesDoNotShow")
            };

            $('#componentNewFeaturesDiv').newFeaturesModal(options);
            return true;
        },
        
        
        doNotEverShow: function()
        {
            if ($('#nfeatDontShowCheckbox').prop("checked") == true )
            {
                 WCC.userSettings.set('showWelcome', 'false');
            }
            else
            {
                WCC.userSettings.set('showWelcome', 'true');
            }
        },
        
        
        doTour: function()
        {
            if ($('#componentNewFeaturesDiv').length > 0)
            {
                $('#componentNewFeaturesDiv').data('newFeaturesModal').closeDialog();
            }
            
            
            require("starfield/sf.tourguide", function () {
                $("#welcomeTour").sfTourGuide({pointHeading: BRAVO.Translate._("WCC_MAIN_newFeature"), pointAutoOpen: true});
              });
              
            if (Globals.thisPage == 'index')
            {
                $('#emailAccountsBadge').click(function(){window.location='/email?extendedTour=true'})
            }
            
        }
        

      

        
    };
    
    
}());



/**
 * Seichner wrote this... pretty awesome.
 * Jroig fixed it a tiny bit.
 * 
 */

(function()
{
  $.fn.bravo_resizable = function( options )
  {
    var defaults = {
        'horizontal' : true,
        'vertical'    : true,
        'minwidth'    : 0,
        'minheight'   : 0,
        'maxwidth'    : 100000,
        'maxheight'   : 100000,
        'resizeicon'  : false, //not done yet
        'resizeiconclass' : null, //not done yet
        'onresizestart'   : function( event, newwidth, newheight ){},
        'onresizemove'    : function( event, newwidth, newheight ){},
        'onresizestop'    : function( event, newwidth, newheight ){},
        'dragToResizeText' : 'Drag to resize'
      };

    var opts = $.extend( defaults, options );

    $(this).css( 'position' , 'relative' );
    $(this).each( function( index, elm )
    {
      var _startPos = null;
      var _resizing = false;
      var _origWidth = null;
      var _origHeight = null;
      var _dir = null;
      var _t = $(elm);
      

      
      var _resizeStart = function( event )
      {
        var $target = $(event.currentTarget);
        _dir = $target.attr( 'data-resize-dir' );
        if( _startPos === null )
        {
          if( _dir == 'horizontal' )
          {
            _startPos = event.clientX;
            _origWidth = _t.width();
          }
          else
          {
            _startPos = event.clientY;
            _origHeight = _t.height();
          }
        }
        _resizing = true;
        opts.onresizestart( event );
        return false;

      }
      
      var _resizeMove = function( event )
      {
        if( !_resizing )
        {
          return true;
        }

        var newWidth;
        if( _dir == 'horizontal' )
        {
          var newX = event.clientX;
          var change = Math.abs( _startPos - newX );
          if( newX < _startPos )
          {
            _t.width( Math.min( opts.maxwidth, Math.max( opts.minwidth,_origWidth - change ) ) ); 
          }
          else
          {
            _t.width( Math.min( opts.maxwidth, Math.max( opts.minwidth,_origWidth + change ) ) ); 
          }
        }
        else
        {
          var newY = event.clientY;
          var change = Math.abs( _startPos - newY );
          if( newY < _startPos )
          {
            _t.height( Math.min( opts.maxheight, Math.max( opts.minheight,_origHeight - change ) ) );
          }
          else
          {
            _t.height( Math.min( opts.maxheight, Math.max( opts.minheight,_origHeight + change ) ) );
          }
        }

        opts.onresizemove( event, _t.width(), _t.height() );
        return false;
      }
      
      var _resizeStop = function( event )
      {
        _startPos = null;
        _resizing = false;
        _dir = null;
        
        opts.onresizestop( event, _t.width(), _t.height() );
        return false;
      }

      if( opts.horizontal )
      {
       var hBarFind = _t.find('.resizeHBar');
       if (hBarFind.length > 0)
       {
           hbar = $(hBarFind[0]);
       }
       else
       {
             
        var hbar = $(document.createElement('div')).css({
          'height' : _t.height()-2 + "px", 
          'width'  : '10px',
          'background-color' : 'transparent',
          'position' : 'absolute',
          'z-index'  : '1000',
          'right'    : '-1px',
          'top'      : '0px',
          'cursor'   : 'col-resize',
          'margin-top':'-3px'
        }).attr( 'data-resize-dir', 'horizontal' ).attr('title', 'Drag to resize')
        .addClass('resizeHBar').addClass('theGripper');
        
        _t.append( hbar );
        
          hbar.on( 'mousedown', _resizeStart );
         $(document).on( 'mousemove', _resizeMove );
         $(document).on( 'mouseup', _resizeStop );
       }
        
        
     
      }
      
      if( opts.vertical)
      {
           var vBarFind = _t.find('.resizeVBar');
           if (vBarFind.length > 0)
           {
               vbar = $(vBarFind[0]);
           }
           else
           {
               var vbar = $(document.createElement('div')).css({
              'width' : _t.width() + "px",
              'height'  : '3px',
              'background-color' : 'transparent',
              'position' : 'absolute',
              'z-index'  : '1000',
              'left'     : '0px',
              'bottom'   : '-1px',
              'cursor'   : 'row-resize'
            }).attr( 'data-resize-dir', 'vertical' )
            .addClass('resizeVBar');


            _t.append( vbar );

            vbar.on( 'mousedown', _resizeStart );
            $(document).on( 'mousemove', _resizeMove );
            $(document).on( 'mouseup'  , _resizeStop );
           }
          
        
      }
    
    });
    return this;
  }
})();

/**
 * Keep alive the IDP connections
 * 
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.keepAlive = (function()
{
    return{
        
        /**
         * Create the div... prepare it for the img
         *
         */
        open: function()
        {   
            if (Globals.keepAliveURL == undefined)
            {
                return false;
            }
            
            // create the div...
            if ( $('#keepAliveDiv').length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = 'keepAliveDiv';
                $(document.body).append(newDiv);
            }
            
            
            $('#keepAliveDiv').width(0).height(0);
            
            WCC.components.keepAlive.stayAlive();
            
            return true;
        },
        
        
        /**
         * Stayin' alive... ah ah ah ah... stayin' alive...
         * 
         * Reloads every 5 mins... using... (you guessed it) SetTimeout!!!!
         * 
         */
        stayAlive: function()
        {  
            $('#keepAliveDiv').html(' ');
            $('#keepAliveDiv').html('<img src="' + Globals.keepAliveURL + '" height="1" width="1" />');
            
            setTimeout(function(){WCC.components.keepAlive.stayAlive()}, 54000);
        }
        
    };
    
    
}());


WCC.components.keepAlive.open();
/**
 * You can pick your dates... you can pick your nose...
   but pick your date's nose... and ...

    leans on jstz for timezone data
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.datePicker = (function()
{
    var properties = {};

    var timezoneObj = null;
    var gettingTZData = false;


    /**
     * AJAX success for getting timezones...
     *
     */
    var getTimezoneObjSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            timezoneObj = data;
        }
        gettingTZData = false;
    };



    /**
     * Internal function to determine timezone...
     *
     * grabs the tz first from the userSettings... then tries to calculate...
     */
    var determineTimezone = function(inputDatetime)
    {

        // fix anything that got set to "null" for some reason
        if (WCC.userSettings.get('userTimezone') == 'null')
        {
            WCC.userSettings.set('userTimezone', null);
        }

        var isDaylightSavings = null;

        var tzData = WCC.components.datePicker.getTimezoneData();
        while (tzData == null)
        {

            tzData = WCC.components.datePicker.getTimezoneData();
        }

        if (WCC.userSettings.get('userTimezone') != null)
        {

            if (inputDatetime != undefined)
            {

                if (WCC.utils.isMac() == true)
                {
                    try
                    {
                        isDaylightSavings = Date.parse(inputDatetime).isDST();
                    }
                    catch (err)
                    {
                         var tmpDate = new Date(inputDatetime);
                        isDaylightSavings = WCC.components.datePicker.isDaylightSavingsTime(tmpDate );
                    }
                }
                else
                {
                    var tmpDate = new Date(inputDatetime);
                    isDaylightSavings = WCC.components.datePicker.isDaylightSavingsTime(tmpDate ); //;
                }

            }
            else
            {
                if (WCC.utils.isMac() == true)
                {
                    try
                    {
                        isDaylightSavings = Date.today().isDST();
                    }
                    catch(err)
                    {
                        isDaylightSavings = WCC.components.datePicker.isDaylightSavingsTime(new Date() );
                    }
                }
                else
                {
                    isDaylightSavings = WCC.components.datePicker.isDaylightSavingsTime(new Date() );
                }

            }


            var foundTZ = null;
            var foundTZOffset = null;

            var tzString = WCC.userSettings.get('userTimezone');
            for (var k in jstz.olson.timezones)
            {
                if (jstz.olson.timezones[k] == WCC.userSettings.get('userTimezone') )
                {
                    foundTZ = jstz.olson.timezones[k];
                    foundTZOffset = k;
                    break;
                }
            }



            var currentOffset = (foundTZOffset.split(',')[0]);




        }
        else
        {
            if (inputDatetime != undefined)
            {
                var currentTime = new Date.parse(inputDatetime);
            }
            else
            {
                var currentTime = new Date();
            }
            var currentOffset = currentTime.getTimezoneOffset();

            var timezone = jstz.determine();
            var tzString = timezone.name();

        }




        var tzObj = {};
        for (var x = 0; x < tzData.length; x++ )
        {
            if (tzData[x].timezone_id == tzString)
            {
                if (tzData[x].offset == convert(currentOffset) || tzData[x].offset == (convert(currentOffset) * -1) )
                {
                    tzObj = tzData[x];
                    break;
                }
            }
        }

        // fallback - get to the choppa!
        if (tzObj.offset == undefined)
        {
            for (var x = 0; x < tzData.length; x++ )
            {
                if (tzData[x].offset == convert(currentOffset) || tzData[x].offset == (convert(currentOffset) * -1) )
                {

                    tzObj = tzData[x];
                    break;
                }
            }
        }

        tzObj.isDaylightSavings = isDaylightSavings;

        return tzObj;
    };


    /**
     * Slightly different ways of determining TZ
     *
     */
    var extractTZFromString = function(inputString)
    {
        var result = inputString.match(/\(.*\)$/);
        if (result.length == 0)
        {
            return false;
        }

        result = result[0].replace('(', '');
        result = result.replace(')', '');

        return result;
     }


    /**
     * Convert the tz we normally get into the offset we can use
     *
     */
    var convert = function (inputOffset)
    {
        return inputOffset * 60;
    }


    /**
     * Sort the list
     */
    var timeListSort = function(a,b)
    {
        if (a.label < b.label)
        {
            return -1
        }
        if (a.label > b.label)
        {
            return 1;
        }

        return 0;
    };






    return{



    isDaylightSavingsTime: function(theDate)
    {
        var theTime = theDate.toTimeString().toLowerCase();
        var isDST = false;
        if (WCC.utils.isIE()) //do the IE based code for determining whether it's daylight savings time or not...
        {
            if (theTime.length > 9)
            {
                theTime = theTime.substr(9); //trim off the time so we just have the time zone
                if (theTime.length > 1 && theTime.indexOf("d") > -1)
                {
                    isDST = true;
                }
            }
        }
        else //handle W3C compliant browsers
        {
            if (theTime.indexOf("daylight") > -1)
            {
                isDST = true;
            }
        }
        return isDST;
    },



        /**
         * Calculate the timezone the user is supposed to see and then show it
         * ... used in the edit panel
         *
         */
        calculateEditOutputTime: function(inputDatetime)
        {
            if (inputDatetime == '0000-00-00 00:00:00' || inputDatetime == '' )
            {
                var dateObj = Date.today();
            }
            else
            {
                while (determineTimezone() == null)
                {
                    konsole.log('waiting');
                }

                var tzObj = determineTimezone(inputDatetime);
                var offsetHours = tzObj.offset / 60 / 60;

                var dateObj = Date.parse(inputDatetime);
                dateObj.addHours(offsetHours);

                if (tzObj.isDaylightSavings != undefined && tzObj.isDaylightSavings == false)
                {
                	if(undefined != tzObj.dst && tzObj.dst !== false ) {
                        dateObj.addHours(1);
                	}
                }
            }



            //
            //var outputString = date('n/j/Y G:i', dateObj.toString() );
            // "10/26/2012 0:00"
            var outputString = dateObj.toString('MM/dd/yyyy H:mm');

            return outputString;
        },


        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        add: function(inputTargetDiv)
        {


            var tzData = WCC.components.datePicker.getTimezoneData();
            if (tzData == null)
            {
                setTimeout(function(){WCC.components.datePicker.add(inputTargetDiv)}, 100);
                return;
            }

            var tzObj = determineTimezone();

            var filteredList = WCC.components.datePicker.returnFilteredList(tzObj.dst);


            inputTargetDiv.datetimepicker({
                allowTimezoneChange : true,
                showButtonPanel: false,
                showOtherMonths : true,
                selectOtherMonths: true,
                defaultTimezone: tzObj.timezone_id,
                stepMinute : 5,
                dateFormat: 'm/d/yy',
                timeFormat: 'h:mm tt',
                outputTimezone: false,
                useLocalTimezone: false,
                showTimezone: true,
                timezoneList:  WCC.components.datePicker.returnFilteredList(),
                onClose: function(dateText, inst) {

                    if (inst.id != undefined)
                    {
                        var timezone = $('#' + inst.id).datetimepicker('getSelectedTimezone');
                        if(undefined != timezone && timezone != null && timezone.length>0) {
                            WCC.userSettings.set('userTimezone', timezone);
                        }
                    }

                }
            });

            // disable keypress
            inputTargetDiv.keypress(function(){return false});

            return true;
        },


        /**
         * Return the timezone for a given user
         *
         */
        returnTimezone: function()
        {
            return determineTimezone();
        },


        /**
         * Return the timezone data
         *
         */
        returnTZData: function(tzInput)
        {
            var tzData = WCC.components.datePicker.getTimezoneData();
            while (tzData == null)
            {
                tzData = WCC.components.datePicker.getTimezoneData();
            }

            return tzData;
        },


        /**
         * Return the list of timezones...
         *
         */
        returnFilteredList: function (dstSelect)
        {
            var outputArray = [];

            for (var k in jstz.olson.timezones)
            {
                outputArray[outputArray.length] = jstz.olson.timezones[k];
            }

            return outputArray;
        },


        /**
         * off, perhaps? gimme a uid, i give you url
         *
         */
        getTimezoneData: function()
        {

           if (timezoneObj != null)
           {
               return timezoneObj;
           }
           if (gettingTZData == true)
           {
               return null;
           }

           gettingTZData = true;

           $.ajax({
                type: "POST",
                url: 'ajax/gettimezonedata/',
                dataType : 'json',
                async : false,
                data: {'postToken':Globals.POST_TOKEN},
                success : getTimezoneObjSuccess

            });

          return null;
        }


    };


}());



// +LICENCE
/*!
 * jsTimezoneDetect
 * http://www.pageloom.com/automatic-timezone-detection-with-javascript
 * 
 */
// -LICENCE

var jstz=function(){var b=function(a){a=-a.getTimezoneOffset();return null!==a?a:0},c=function(){return b(new Date(2010,0,1,0,0,0,0))},f=function(){return b(new Date(2010,5,1,0,0,0,0))},e=function(){var a=c(),d=f(),b=c()-f();return new jstz.TimeZone(jstz.olson.timezones[0>b?a+",1":0<b?d+",1,s":a+",0"])};return{determine_timezone:function(){"undefined"!==typeof console&&console.log("jstz.determine_timezone() is deprecated and will be removed in an upcoming version. Please use jstz.determine() instead.");
return e()},determine:e,date_is_dst:function(a){var d=5<a.getMonth()?f():c(),a=b(a);return 0!==d-a}}}();jstz.TimeZone=function(b){var c=null,c=b;"undefined"!==typeof jstz.olson.ambiguity_list[c]&&function(){for(var b=jstz.olson.ambiguity_list[c],e=b.length,a=0,d=b[0];a<e;a+=1)if(d=b[a],jstz.date_is_dst(jstz.olson.dst_start_dates[d])){c=d;break}}();return{name:function(){return c}}};jstz.olson={};
jstz.olson.timezones={"-720,0":"Etc/GMT+12","-660,0":"Pacific/Pago_Pago","-600,1":"America/Adak","-600,0":"Pacific/Honolulu","-570,0":"Pacific/Marquesas","-540,0":"Pacific/Gambier","-540,1":"America/Anchorage","-480,1":"America/Los_Angeles","-480,0":"Pacific/Pitcairn","-420,0":"America/Phoenix","-420,1":"America/Denver","-360,0":"America/Guatemala","-360,1":"America/Chicago","-360,1,s":"Pacific/Easter","-300,0":"America/Bogota","-300,1":"America/New_York","-270,0":"America/Caracas","-240,1":"America/Halifax",
"-240,0":"America/Santo_Domingo","-240,1,s":"America/Asuncion","-210,1":"America/St_Johns","-180,1":"America/Godthab","-180,0":"America/Argentina/Buenos_Aires","-180,1,s":"America/Montevideo","-120,0":"America/Noronha","-120,1":"Etc/GMT+2","-60,1":"Atlantic/Azores","-60,0":"Atlantic/Cape_Verde","0,0":"Etc/UTC","0,1":"Europe/London","60,1":"Europe/Berlin","60,0":"Africa/Lagos","60,1,s":"Africa/Windhoek","120,1":"Asia/Beirut","120,0":"Africa/Johannesburg","180,1":"Europe/Moscow","180,0":"Asia/Baghdad",
"210,1":"Asia/Tehran","240,0":"Asia/Dubai","240,1":"Asia/Yerevan","270,0":"Asia/Kabul","300,1":"Asia/Yekaterinburg","300,0":"Asia/Karachi","330,0":"Asia/Kolkata","345,0":"Asia/Kathmandu","360,0":"Asia/Dhaka","360,1":"Asia/Omsk","390,0":"Asia/Rangoon","420,1":"Asia/Krasnoyarsk","420,0":"Asia/Jakarta","480,0":"Asia/Shanghai","480,1":"Asia/Irkutsk","525,0":"Australia/Eucla","525,1,s":"Australia/Eucla","540,1":"Asia/Yakutsk","540,0":"Asia/Tokyo","570,0":"Australia/Darwin","570,1,s":"Australia/Adelaide",
"600,0":"Australia/Brisbane","600,1":"Asia/Vladivostok","600,1,s":"Australia/Sydney","630,1,s":"Australia/Lord_Howe","660,1":"Asia/Kamchatka","660,0":"Pacific/Noumea","690,0":"Pacific/Norfolk","720,1,s":"Pacific/Auckland","720,0":"Pacific/Tarawa","765,1,s":"Pacific/Chatham","780,0":"Pacific/Tongatapu","780,1,s":"Pacific/Apia","840,0":"Pacific/Kiritimati"};
jstz.olson.dst_start_dates={"America/Denver":new Date(2011,2,13,3,0,0,0),"America/Mazatlan":new Date(2011,3,3,3,0,0,0),"America/Chicago":new Date(2011,2,13,3,0,0,0),"America/Mexico_City":new Date(2011,3,3,3,0,0,0),"Atlantic/Stanley":new Date(2011,8,4,7,0,0,0),"America/Asuncion":new Date(2011,9,2,3,0,0,0),"America/Santiago":new Date(2011,9,9,3,0,0,0),"America/Campo_Grande":new Date(2011,9,16,5,0,0,0),"America/Montevideo":new Date(2011,9,2,3,0,0,0),"America/Sao_Paulo":new Date(2011,9,16,5,0,0,0),"America/Los_Angeles":new Date(2011,
2,13,8,0,0,0),"America/Santa_Isabel":new Date(2011,3,5,8,0,0,0),"America/Havana":new Date(2011,2,13,2,0,0,0),"America/New_York":new Date(2011,2,13,7,0,0,0),"Asia/Gaza":new Date(2011,2,26,23,0,0,0),"Asia/Beirut":new Date(2011,2,27,1,0,0,0),"Europe/Minsk":new Date(2011,2,27,2,0,0,0),"Europe/Helsinki":new Date(2011,2,27,4,0,0,0),"Europe/Istanbul":new Date(2011,2,28,5,0,0,0),"Asia/Damascus":new Date(2011,3,1,2,0,0,0),"Asia/Jerusalem":new Date(2011,3,1,6,0,0,0),"Africa/Cairo":new Date(2010,3,30,4,0,0,
0),"Asia/Yerevan":new Date(2011,2,27,4,0,0,0),"Asia/Baku":new Date(2011,2,27,8,0,0,0),"Pacific/Auckland":new Date(2011,8,26,7,0,0,0),"Pacific/Fiji":new Date(2010,11,29,23,0,0,0),"America/Halifax":new Date(2011,2,13,6,0,0,0),"America/Goose_Bay":new Date(2011,2,13,2,1,0,0),"America/Miquelon":new Date(2011,2,13,5,0,0,0),"America/Godthab":new Date(2011,2,27,1,0,0,0)};
jstz.olson.ambiguity_list={"America/Denver":["America/Denver","America/Mazatlan"],"America/Chicago":["America/Chicago","America/Mexico_City"],"America/Asuncion":["Atlantic/Stanley","America/Asuncion","America/Santiago","America/Campo_Grande"],"America/Montevideo":["America/Montevideo","America/Sao_Paulo"],"Asia/Beirut":"Asia/Gaza Asia/Beirut Europe/Minsk Europe/Helsinki Europe/Istanbul Asia/Damascus Asia/Jerusalem Africa/Cairo".split(" "),"Asia/Yerevan":["Asia/Yerevan","Asia/Baku"],"Pacific/Auckland":["Pacific/Auckland",
"Pacific/Fiji"],"America/Los_Angeles":["America/Los_Angeles","America/Santa_Isabel"],"America/New_York":["America/Havana","America/New_York"],"America/Halifax":["America/Goose_Bay","America/Halifax"],"America/Godthab":["America/Miquelon","America/Godthab"]};
/**
 * Switch account functionality
 * 
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.printList = (function()
{
    var properties = {};
    
    properties.dialogDivId = 'componentPrintListDiv';
    properties.template = '#componentPrintList';
    properties.title = BRAVO.Translate._("WCC_MAIN_print");
    
    properties.method = "WCC.components.printList";
    properties.getMethodObj = function () {
    	return WCC.components.printList;
    };
    
    var savedSubmitObj = null;
   
    var templateData={};
    
    var fullColumnArray = {
      "username": {
   	   	"column": BRAVO.Translate._("wcc_main_username")
   	   	}, 
   	  "displayName": {
        "column": BRAVO.Translate._("wcc_main_username")
      }, 
      "accountalerts": {
   	   "column": BRAVO.Translate._("wcc_main_accountalerts")
   	   }, 
      "email": {
   	   "column": BRAVO.Translate._("wcc_main_email")
   	   }, 
      "calendar": {
   	   "column": BRAVO.Translate._("wcc_main_calendar")
   	   }, 
      "files": {
   	   "column": BRAVO.Translate._("wcc_main_files")
   	   },
      "lastlogin": {
   	   "column": BRAVO.Translate._("wcc_main_lastlogin")
   	   },
      "usedquota": {
   	   "column": BRAVO.Translate._("wcc_main_usedQuota")
   	   },
      "emailAddress": {
   	   "column": BRAVO.Translate._("wcc_main_emailaddress")
   	   },
      "pack_name": {
   	   "column": BRAVO.Translate._("wcc_main_plan")
   	   },
      "relaysPerDay": {
   	   "column": BRAVO.Translate._("wcc_main_relays")
   	   },
      "expires": {
   	   "column": BRAVO.Translate._("wcc_main_expires")
       },
       
       "cc": {
       	   "column": BRAVO.Translate._("wcc_main_cc")
           },
       "forwarding": {
       	   "column": BRAVO.Translate._("wcc_main_forwarding")
           },
       "catchall": {
       	   "column": BRAVO.Translate._("wcc_main_catchall")
           },
       "autoreply": {
       	   "column": BRAVO.Translate._("wcc_main_autoreply")
           }
           
       
    };
    
    var columnLists = {
	    'all': { 
	    	displayName: fullColumnArray.displayName,  
	    	accountalerts: fullColumnArray.accountalerts, 
	        email: fullColumnArray.email, 
	        calendar:  fullColumnArray.calendar, 
	        files: fullColumnArray.files,
	        lastlogin: fullColumnArray.lastlogin,
	        usedquota: fullColumnArray.usedquota
	    },
	    'email' : {
	    	displayName: fullColumnArray.displayName, 
	        accountalerts: fullColumnArray.accountalerts, 
	        pack_name:  fullColumnArray.pack_name, 
	        usedquota: fullColumnArray.usedquota,
	        relaysPerDay: fullColumnArray.relaysPerDay,
	    	expires: fullColumnArray.expires ,
	    	cc: fullColumnArray.cc,
	    	forwarding: fullColumnArray.forwarding,
	    	catchall: fullColumnArray.catchall,
	    	autoreply: fullColumnArray.autoreply
	    },
	    'calendar' : {
	    	displayName: fullColumnArray.displayName, 
	        accountalerts: fullColumnArray.accountalerts, 
	    	expires: fullColumnArray.expires 
	    },
	    'files' : {
	    	displayName: fullColumnArray.displayName, 
	        accountalerts: fullColumnArray.accountalerts, 
	    	usedquota: fullColumnArray.usedquota,
	    	expires: fullColumnArray.expires 
    }
    };

    
    /**
     * We have successfully submitted data!
     */
    var submitOkSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            properties.getMethodObj().closeDialog();

        } else {
            WCC.spinKontrol.close();
            
            //ERROR HANDLING AND DISPLAY!
            var textError = '';
            for (var errorType in data.error) {
                    if (textError !== "") {
                            textError += '<br>';
                    }
                    textError += " - " + data.error[errorType];
            }
            var dataError = data.error;
            WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_eSwitchingAccountsFailure"), textError, function(a, b, c){});
        }
    };
    
     
    return{
        
        checkAllRows: function() {
        	var value = $(':checkbox[id|="col"]').prop('checked') ? false : true;
          	 $(':checkbox[id|="col"]').each(
           		 function(index,element) {
           			 $(element).attr('checked', value);
       		 });
           	return true;
        },
    	
        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(tab)
        {   
            savedSubmitObj = null;
            
            // ok... so we've survived that...'
            // we'll need the email planlist...
            properties.getMethodObj().renderDialog(tab);
   
            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);
                
                WCC.utils.showLoading(properties.dialogDivId);
            }
            
            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 320,
                title: properties.title
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");
            
            this.renderDialog(tab);
            
            return true;
        },
        
        
        /**
         * Render the dialog...
         * 
         */
        renderDialog: function(tab)
        {  
            var data={};
            
            data.tabList = [
                        	{'tab':'all', 'displayName': BRAVO.Translate._("wcc_main_allAccounts")},
                        	{'tab':'email', 'displayName': BRAVO.Translate._("wcc_main_email")},
                        	{'tab':'calendar', 'displayName': BRAVO.Translate._("wcc_main_calendar")},
                        	{'tab':'files', 'displayName': BRAVO.Translate._("wcc_main_files")}
        	];
            data.selectedTab = tab;
            data.selectTitle = properties.title;
            data.thisMethod = properties.method;
            data.thisMethodObj = properties.getMethodObj();
            
            data.columnArray = columnLists[data.selectedTab];
            
            var count = 0;
            for (var k in data.columnArray) {
                if (data.columnArray.hasOwnProperty(k)) {
                   ++count;
                }
            }
            var half = Math.ceil(count/2);
            data.column1={};
            data.column2={};
            count =0;
            for (var k in data.columnArray) {
                if (data.columnArray.hasOwnProperty(k)) {
                   ++count;
                }
                if (count<=half) {
                	data.column1[k] = data.columnArray[k];
                }
                if (count>half) {
                	data.column2[k] = data.columnArray[k];
                }
            }
            
            var renderedOutput =  $(properties.template).tmpl(data);
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );
            
            $('#outputTabSelect').change(function(){data.thisMethodObj.renderDialog($("#outputTabSelect").val());});
            data.thisMethodObj.checkAllRows();
        },
        
        
        /**
         * Close the dialog and remove the div
         * 
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        },
        
        
        /**
         * Submit!
         * 
         */
        submit: function()
        {
           if (this.validate() == true)
           {
               this.submitOk();
           }
           
           // otherwise... handle that stuff...
            
        },
        
        
        /**
         * Validate
         * 
         */
        validate: function()
        {
            // put some stuff here!
            return true;
        },
        
        
        /**
         * Submit ok
         * 
         */
        submitOk: function() 
        {
             submitObj = {};
             
             savedSubmitObj = submitObj;
             
             submitObj.tab = $("#outputTabSelect").val();
             submitObj.columns = []; 
        	 $(':checkbox[id|="col"]').each(
        		 function(index,element) {
        			 if($(element).attr('checked')) {submitObj.columns[index]=$(element).val(); }
    		 });

             submitObj.postToken = Globals.POST_TOKEN;
             WCC.spinKontrol.open('componentPrintListDiv');
             
             var getParams = jQuery.param(submitObj);
 	 		$("#printStuff").html("<iframe id=\"printf\" name=\"printf\" src=\/output/print?" + getParams +"\"></iframe>");
            $("#printf").load(function() {
                        window.frames['printf'].focus();
                        window.frames['printf'].print();
        		        WCC.spinKontrol.close();
        		        properties.getMethodObj().closeDialog();
            });

            
//             $.post("output/print", submitObj, 
//            		    function (data) {
//            	 		$("#printf").html(data);
//            		        //var win=window.open('output/index', 'WCC', "menubar=0,resizeable=1,titlebar=1,toolbar=0");
//
//            		        
//            		        //with(win.document)
//            		        with(window.frames["printf"])
//            		        {
//                		        $("#printf").get(0).contentWindow.print();
//            		        	open();
//            		        	write(data); 
//            		        	close();  
//                		        window.frames["printf"].focus();
//                		        window.frames["printf"].print();
//            		        };
//            		        WCC.spinKontrol.close();
//            		        properties.getMethodObj().closeDialog();
//            		    });
             
             
             
//             $.ajax({
//                type: "POST",
//                url: 'output/print',
//                dataType : 'html',
//                data: submitObj,
//                success : submitOkSuccess,
//                error :  {} //WCC.utils.handleError 
//            });
        },
        
        
        /**
         * Submit that you actually wanna switch regions
         * 
         */
        submitPrintList: function()
        {
            properties.getMethodObj().submitOk();
        } 
        
    };
    
    
}());



/**
 * Switch account functionality
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.exportList = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentExportListDiv';
    properties.template = '#componentExportList';
    properties.title = BRAVO.Translate._("WCC_MAIN_Export");

    properties.method = "WCC.components.exportList";
    properties.getMethodObj = function () {
    	return WCC.components.exportList;
    };

    var savedSubmitObj = null;

    var templateData={};

    var fullColumnArray = {
      "username": {
   	   	"column": BRAVO.Translate._("wcc_main_username")
   	   	},
   	  "displayName": {
        "column": BRAVO.Translate._("wcc_main_username")
      },
      "accountalerts": {
   	   "column": BRAVO.Translate._("wcc_main_accountalerts")
   	   },
      "email": {
   	   "column": BRAVO.Translate._("wcc_main_email")
   	   },
      "calendar": {
   	   "column": BRAVO.Translate._("wcc_main_calendar")
   	   },
      "files": {
   	   "column": BRAVO.Translate._("wcc_main_files")
   	   },
      "lastlogin": {
   	   "column": BRAVO.Translate._("wcc_main_lastlogin")
   	   },
      "usedquota": {
   	   "column": BRAVO.Translate._("wcc_main_usedQuota")
   	   },
      "emailAddress": {
   	   "column": BRAVO.Translate._("wcc_main_emailaddress")
   	   },
      "pack_name": {
   	   "column": BRAVO.Translate._("wcc_main_plan")
   	   },
      "relaysPerDay": {
   	   "column": BRAVO.Translate._("wcc_main_relays")
   	   },
      "expires": {
   	   "column": BRAVO.Translate._("wcc_main_expires")
       },

       "cc": {
       	   "column": BRAVO.Translate._("wcc_main_cc")
           },
       "forwarding": {
       	   "column": BRAVO.Translate._("wcc_main_forwarding")
           },
       "catchall": {
       	   "column": BRAVO.Translate._("wcc_main_catchall")
           },
       "autoreply": {
       	   "column": BRAVO.Translate._("wcc_main_autoreply")
           }


    };

    var columnLists = {
	    'all': {
	    	displayName: fullColumnArray.displayName,
	    	accountalerts: fullColumnArray.accountalerts,
	        email: fullColumnArray.email,
	        calendar:  fullColumnArray.calendar,
	        files: fullColumnArray.files,
	        lastlogin: fullColumnArray.lastlogin,
	        usedquota: fullColumnArray.usedquota
	    },
	    'email' : {
	    	displayName: fullColumnArray.displayName,
	        accountalerts: fullColumnArray.accountalerts,
	        pack_name:  fullColumnArray.pack_name,
	        usedquota: fullColumnArray.usedquota,
	        relaysPerDay: fullColumnArray.relaysPerDay,
	    	expires: fullColumnArray.expires ,
	    	cc: fullColumnArray.cc,
	    	forwarding: fullColumnArray.forwarding,
	    	catchall: fullColumnArray.catchall,
	    	autoreply: fullColumnArray.autoreply
	    },
	    'calendar' : {
	    	displayName: fullColumnArray.displayName,
	        accountalerts: fullColumnArray.accountalerts,
	    	expires: fullColumnArray.expires
	    },
	    'files' : {
	    	displayName: fullColumnArray.displayName,
	        accountalerts: fullColumnArray.accountalerts,
	    	usedquota: fullColumnArray.usedquota,
	    	expires: fullColumnArray.expires
    }
    };

    if(Globals.APIResellerClient) {
    	delete columnLists.all;
    	delete columnLists.calendar;
    	delete columnLists.files;
}


    /**
     * We have successfully submitted data!
     */
    var submitOkSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            properties.getMethodObj().closeDialog();

        } else {
            WCC.spinKontrol.close();

            //ERROR HANDLING AND DISPLAY!
            var textError = '';
            for (var errorType in data.error) {
                    if (textError !== "") {
                            textError += '<br>';
                    }
                    textError += " - " + data.error[errorType];
            }
            var dataError = data.error;
            WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_eSwitchingAccountsFailure"), textError, function(a, b, c){});
        }
    };


    return{

        checkAllRows: function() {
        	var value = $(':checkbox[id|="col"]').prop('checked') ? false : true;
          	 $(':checkbox[id|="col"]').each(
           		 function(index,element) {
           			 $(element).attr('checked', value);
       		 });
           	return true;
        },

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(tab)
        {

            WCC.components.analytics.trackView('modal', 'wcc-export');

            savedSubmitObj = null;

            // ok... so we've survived that...'
            // we'll need the email planlist...
            properties.getMethodObj().renderDialog(tab);

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);

                WCC.utils.showLoading(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 320,
                title: properties.title
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");

            this.renderDialog(tab);
            WCC.utils.centerThisDialog(properties.dialogDivId);

            return true;
        },


        /**
         * Render the dialog...
         *
         */
        renderDialog: function(tab)
        {
            var data={};

            data.tabList = [
                        	{'tab':'all', 'displayName': BRAVO.Translate._("wcc_main_allAccounts")},
                        	{'tab':'email', 'displayName': BRAVO.Translate._("wcc_main_email")},
                        	{'tab':'calendar', 'displayName': BRAVO.Translate._("wcc_main_calendar")},
                        	{'tab':'files', 'displayName': BRAVO.Translate._("wcc_main_files")}
        	];
            if(Globals.APIResellerClient) {
                data.tabList = [
                            	{'tab':'email', 'displayName': BRAVO.Translate._("wcc_main_email")},
            	];

            }
            data.selectedTab = tab;
            data.selectTitle = properties.title;
            data.thisMethod = properties.method;
            data.thisMethodObj = properties.getMethodObj();

            data.columnArray = columnLists[data.selectedTab];

            var count = 0;
            for (var k in data.columnArray) {
                if (data.columnArray.hasOwnProperty(k)) {
                   ++count;
                }
            }
            var half = Math.ceil(count/2);
            data.column1={};
            data.column2={};
            count =0;
            for (var k in data.columnArray) {
                if (data.columnArray.hasOwnProperty(k)) {
                   ++count;
                }
                if (count<=half) {
                	data.column1[k] = data.columnArray[k];
                }
                if (count>half) {
                	data.column2[k] = data.columnArray[k];
                }
            }

            var renderedOutput =  $(properties.template).tmpl(data);
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );

            $('#outputTabSelect').change(function(){data.thisMethodObj.renderDialog($("#outputTabSelect").val());});
            data.thisMethodObj.checkAllRows();
        },


        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        },


        /**
         * Submit!
         *
         */
        submit: function()
        {
           if (this.validate() == true)
           {
               this.submitOk();
           }

           // otherwise... handle that stuff...

        },


        /**
         * Validate
         *
         */
        validate: function()
        {
            // put some stuff here!
            return true;
        },


        /**
         * Submit ok
         *
         */
        submitOk: function()
        {
             submitObj = {};

             savedSubmitObj = submitObj;
             submitObj.fileType = $("#outputFiletypeSelect").val();
             submitObj.tab = $("#outputTabSelect").val();
             submitObj.columns = [];
        	 $(':checkbox[id|="col"]').each(
        		 function(index,element) {
        			 if($(element).attr('checked') ) {
        				 submitObj.columns.push($(element).val());
    				 }
    		 });

             submitObj.postToken = Globals.POST_TOKEN;
             WCC.spinKontrol.open('componentExportListDiv');

             var getParams = jQuery.param(submitObj);
 	 		$("#printStuff").html("<iframe id=\"printf\" name=\"printf\" src=\/output/export?" + getParams +"\"></iframe>");



	        WCC.spinKontrol.close();
	        properties.getMethodObj().closeDialog();
            $("#printf").load(function() {
                        //window.frames['printf'].focus();
                        //window.frames['printf'].print();
            });


        },


        /**
         * Submit that you actually wanna Export
         *
         */
        submitExportList: function()
        {
            properties.getMethodObj().submitOk();
        }

    };


}());



/**
 * MuiPod Tool
 * ... by jon roig (jroig@godaddy.com)
 *
 * With, of course, some help from the mya folks.
 *
 * muiClientFC.OrionAccountUid
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.muiPod = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentMuiPodDiv';
    properties.title = BRAVO.Translate._("WCC_MAIN_consumeACredit");

    var freeAccounts = null;
    var fetchingFreeStatus = false;

    var freeForwardingAccounts = null;
    var fetchingFreeForwardingStatus = false;

    var openFrom = null;


    var clickedOk = false;

    /**
     * AJAX success for the free account lookup
     */
    var hasFreeCreditsSuccess = function(data)
    {
        fetchingFreeStatus = false;
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            freeAccounts = data;
        }

        $(document).trigger('updateEmailPlans');
        $(document).trigger('updateAvailableEmailPlans');
    }


    /**
     * AJAX success for free forwarding account
     */
    var hasFreeForwardingCreditsSuccess = function(data)
    {
        fetchingFreeForwardingStatus = false;
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            freeForwardingAccounts = data;
        }

        $(document).trigger('updateAvailableForwardingPlans');
        $(document).trigger('updateForwardingPlans');
    }


    /**
     * Success! reset the plans
     */
    var resetPlansSuccess = function(data)
    {
        freeAccounts = null;

        if (clickedOk == false)
        {
             if (openFrom == 'create')
             {
                 WCC.components.createAccount.closeDialog();
             }
             else if (openFrom == 'forward')
             {
                 WCC.components.createForwarding.closeDialog();
             }
             else if (openFrom == 'bulkcreate')
             {
                 WCC.components.createAccount.closeDialog();
             }
             else if (openFrom == 'bulkforwarding')
             {
                 WCC.components.createForwarding.closeDialog();
             }

             return;
        }

        WCC.model.emailPlans.reset(true);
        WCC.model.availableEmailPlans.reset(true);
        WCC.model.availableForwardingPlans.reset(true);



        $(document).trigger('accountCountUpdate');
        $(document).trigger('updateEmailPlans');
        $(document).trigger('updateAvailableEmailPlans');
        $(document).trigger('updateForwardingPlans');
        $(document).trigger('updateAvailableForwardingPlans');

        //$('#currentlyResettingPlans').sfDialog("close");

        if (openFrom == 'create')
        {
            WCC.components.createAccount.closeDialog();

            if ( muiClientFC.OrionAccountUid == undefined)
            {
                WCC.components.createAccount.open('email', 'freeCredit');
            }
            else
            {
                WCC.components.createAccount.open('email', muiClientFC.OrionAccountUid);
            }
        }
        else if (openFrom == 'forward')
        {
            WCC.components.createForwarding.closeDialog();

            if ( muiClientFC.OrionAccountUid == undefined)
            {
                WCC.components.createForwarding.open('freeCredit');
            }
            else
            {
                WCC.components.createForwarding.open( muiClientFC.OrionAccountUid);
            }
        }
        else if (openFrom == 'bulkcreate')
        {
            WCC.components.createAccount.closeDialog();

            if ( muiClientFC.OrionAccountUid == undefined)
            {
                WCC.components.bulkCreation.open('freeCredit');
            }
            else
            {
                WCC.components.bulkCreation.open(muiClientFC.OrionAccountUid);
            }
        }
        else if (openFrom == 'bulkforwarding')
        {
            WCC.components.createForwarding.closeDialog();

            if ( muiClientFC.OrionAccountUid == undefined)
            {
                WCC.components.bulkCreateForwarding.open('freeCredit');
            }
            else
            {
                WCC.components.bulkCreateForwarding.open(muiClientFC.OrionAccountUid);
            }
        }

        openFrom = null;
    }

    return{

        /**
         * Reset plans....
         * ... hits the reset plans service...
         *
         */
        resetPlans: function()
        {
            if (openFrom == 'create')
            {
                WCC.utils.showLoading('componentCreateAccount', BRAVO.Translate._("WCC_MAIN_refreshingPlans"));
                $("#componentCreateAccount").dialog( 'option', 'position', 'center' );
            }
            if (openFrom == 'forward')
            {
                WCC.utils.showLoading('componentCreateForwardingDiv', BRAVO.Translate._("WCC_MAIN_refreshingPlans"));
                $("#componentCreateForwardingDiv").dialog( 'option', 'position', 'center' );
            }
            if (openFrom == 'bulkcreate')
            {
                WCC.utils.showLoading('componentCreateAccount', BRAVO.Translate._("WCC_MAIN_refreshingPlans"));
                $("#componentCreateAccount").dialog( 'option', 'position', 'center' );
            }
            if (openFrom == 'bulkforwarding')
            {
                WCC.utils.showLoading('componentCreateForwardingDiv', BRAVO.Translate._("WCC_MAIN_refreshingPlans"));
                $("#componentCreateForwardingDiv").dialog( 'option', 'position', 'center' );
            }

            that = this;
            var submitObj = {};
            submitObj.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajaxemail/resetplans/',
                data: submitObj,
                dataType : 'json',
                success :  function(data) {resetPlansSuccess.call(that, data);},
                error :  {}
            });
        },


        /**
         * Has free forwarding accounts?
         * Returns null while in progress
         */
        hasFreeForwardingAccounts: function()
        {
            if (freeForwardingAccounts != null)
            {
                return freeForwardingAccounts;
            }
            if (fetchingFreeForwardingStatus == true)
            {
                return null;
            }

            fetchingFreeForwardingStatus = true;

            that = this;
            var submitObj = {};
            submitObj.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajaxemail/hasfreeforwardingcredits/',
                data: submitObj,
                dataType : 'json',
                success :  function(data) {hasFreeForwardingCreditsSuccess.call(that, data);},
                error :  WCC.utils.handleError
            });

            return null;
        },


        /**
         * Has free email accounts?
         * Returns null while in progress
         */
        hasFreeAccounts: function()
        {
            if (freeAccounts != null)
            {
                return freeAccounts;
            }
            if (fetchingFreeStatus == true)
            {
                return null;
            }

            fetchingFreeStatus = true;

            that = this;
            var submitObj = {};
            submitObj.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajaxemail/hasfreeemailcredits/',
                data: submitObj,
                dataType : 'json',
                success :  function(data) {hasFreeCreditsSuccess.call(that, data);},
                error :  WCC.utils.handleError
            });

            return null;
        },


        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        showMuiDialog: function()
        {
            clickedOk = false;

            if (openFrom == 'create' || openFrom == 'bulkcreate')
            {
                WCC.components.analytics.trackView('modal', 'wcc-muiemailpod');
                $('#createAccountEmailAddress').remove();
                $('#componentCreateAccount').find('.sf-msg-overlay').remove();
                WCC.components.createAccount.hideAllInfo();
            }
            else if (openFrom == 'forward' || openFrom == 'bulkforwarding')
            {
                WCC.components.analytics.trackView('modal', 'wcc-muiforwardpod');
                $('#createAccountEmailAddress').remove();
                $('#componentCreateForwardingDiv').find('.sf-msg-overlay-wrap').remove();
            }

            WCC.components.muiPod.positionVeil();
            WCC.components.muiPod.coverDialogContents();

            $('#btnFreeCredSetup').click(function(){
                if ($('#btnFreeCredSetup').hasClass('g-btn-mya-inactive'))
                {

                }
                else
                {
                    clickedOk = true;
                }
            });

            return true;
        },


        /**
         * Cover up the contents of the email dialog
         */
        coverDialogContents: function()
        {
            if (openFrom == 'create' || openFrom == 'bulkcreate')
            {
                var theDialog = $('#componentCreateAccount');
            }
            else if (openFrom == 'forward' || openFrom == 'bulkforwarding')
            {
                var theDialog = $('#componentCreateForwardingDiv');
            }

            if ( $('#componentCreateAccountHider').length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = 'componentCreateAccountHider';
                theDialog.append(newDiv);
            }

            var createOffset = theDialog.offset();

            $('#componentCreateAccountHider')
                .css('position', 'absolute')
                .width(theDialog.width() + 35)
                .height(theDialog.height() + 35)
                .css('top', '32px')
                .css('left', '0px')
                .css('z-index', 100000)
                .css('background', "white")
                .css('-moz-opacity', '0.90')
                .css('filter', 'alpha(opacity=90)')
                .css('opacity', '.70');
        },


        /**
         * Hide the cover dialog
         */
        hideDialogCover: function()
        {
            $('#componentCreateAccountHider').remove();
        },


        /**
         * Position the veil
         */
        positionVeil: function()
        {
            var defaultWidth = 510;

            $('#componentMuiPodDiv')
                .css('position', 'absolute')
                .width(defaultWidth)
                .css('top', '31px')
                .css('left', '20px')
                .css('z-index', 100001)
                .css('box-shadow', '0 0 10px #000');

            if (WCC.utils.isIE() == true)
            {
                $('#componentMuiPodDiv')
                    .css('border-color', 'black')
                    .css('border-width', '1px')
                    .css('border-style', 'solid');
            }
        },


        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();

            if (clickedOk == false)
            {

                if (openFrom == 'create' )
                {
                    WCC.components.createAccount.closeDialog();
                    WCC.components.createAccount.open();
                }
                if (openFrom == 'forward')
                {
                    WCC.components.createForwarding.closeDialog();
                    WCC.components.createForwarding.open();
                }
                if (openFrom == 'bulkcreate')
                {
                    WCC.components.createAccount.closeDialog();
                    WCC.components.bulkCreation.open();
                }
                if (openFrom == 'bulkforwarding')
                {
                    WCC.components.createForwarding.closeDialog();
                    WCC.components.bulkCreateForwarding.open();
                }

                return;
            }
            WCC.components.muiPod.resetPlans();
        },



        /**
         * Open the muipod from bulk create
         *
         */
        openMuiDialogFromBulkForwarding: function()
        {
            openFrom = 'bulkforwarding';
            this.getMeAMuiPod(193, WCC.components.muiPod.showMuiDialog, WCC.components.muiPod.closeDialog);
        },


        /**
         * Open the muipod from bulk create
         *
         */
        openMuiDialogFromBulkCreate: function()
        {
            openFrom = 'bulkcreate';
            this.getMeAMuiPod(187, WCC.components.muiPod.showMuiDialog, WCC.components.muiPod.closeDialog);
        },

        /**
         * Open the muipod from create forwarding
         *
         */
        openMuiDialogFromCreateForwarding: function()
        {
            openFrom = 'forward';
            this.getMeAMuiPod(193, WCC.components.muiPod.showMuiDialog, WCC.components.muiPod.closeDialog);
        },


        /**
         * Open the muipod from create email
         *
         */
        openMuiDialogFromCreate: function()
        {
            openFrom = 'create';
            this.getMeAMuiPod(187, WCC.components.muiPod.showMuiDialog, WCC.components.muiPod.closeDialog);
        },


        /**
         *  Generic mui pod opener
         *
         */
        openMuiDialog: function()
        {
            openFrom = '';
            var that = this;
            this.getMeAMuiPod(that.showMuiDialog, that.closeDialog)
        },


        /**
         * Igor! Get me a muipod!
         *
         */
        getMeAMuiPod: function(groupIdInput, openCallbackInput, closeCallbackInput)
        {

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                if (openFrom == 'create' || openFrom == 'bulkcreate')
                {
                    $('#componentCreateAccount').append(newDiv);
                }
                if (openFrom == 'forward' || openFrom == 'bulkforwarding')
                {
                    $('#componentCreateForwardingDiv').append(newDiv);
                }

            }

            if (openCallbackInput == undefined)
            {
                var openCallback = function(){};
            }
            else
            {
                var openCallback = openCallbackInput;
            }
            if (closeCallbackInput == undefined)
            {
                var closeCallback = function(){};
            }
            else
            {
                var closeCallback = closeCallbackInput;
            }

            if (groupIdInput != undefined)
            {
                groupId = groupIdInput;
            }

            // @TODO -fix this!
            var muiUrlPrefix = Globals.muiUrlPrefix;
            var muiProgId = Globals.progID;
            var spKey = Globals.spKey;
            var idpUrlParameters = 'myaUrl=/Default.aspx';
            var hideDebugInfo = 1;
            var MgrShopper = Globals.mgrID;

            var Args = {
                GroupId: groupId,
                MuiUrlPrefix: muiUrlPrefix,
                TargetDivId: "componentMuiPodDiv",
                MuiProgId: muiProgId,
                SpKey: spKey,
                IdpUrlParameters: idpUrlParameters,
                HideDebugInfo: hideDebugInfo,
                OpenCallback: openCallback,
                OpenArgs: {fadeIn: 800},
                CloseCallback: closeCallback,
                CloseArgs: {fadeOut: 800},
                MgrShopper: MgrShopper,
                SharedCssIsLoaded: 0,
                SuccessText: BRAVO.Translate._("WCC_MAIN_freePlanSuccessMessage")
            };

            muiClientFC.ShowVeil(Args);
        }

    }


}());



/**
 * Switch account functionality
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.recreateAccount = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentRecreateAccountDiv';
    properties.template = '#componentRecreateAccount';
    properties.title = 'Recreate Email Account';
    //properties.title = BRAVO.Translate._("WCC_MAIN_switchPlans");

    var emailPlanArray = null;
    var recreateAccountArray = null;

    var savedSubmitObj = null;

    var templateData={};

    /**
     * We have successfully submitted data!
     */
    var submitOkSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            WCC.components.recreateAccount.closeDialog();
            if (data.switched && data.switched==true)
            {
                var newPlanName = WCC.components.recreateAccount.returnPlanNameForPlanId(data.newPackUid);


                if (data.migrate != undefined && data.migrate.domains != undefined)
                {
                    for (var key in data.migrate.domains)
                    {
                        var searchObj =  {'key' : 'domain', 'value' : key};
                        var replaceObj =  {'key' : 'pack_id', 'value' : data.newPackUid};
                        WCC.cache.replace(searchObj, replaceObj);

                        replaceObj =  {'key' : 'pack_name', 'value' : newPlanName};
                        WCC.cache.replace(searchObj, replaceObj);
                    }
                }


                $(document).trigger('infoRowRefresh');

                WCC.model.emailPlans.reset();
                WCC.model.availableEmailPlans.reset();


                setTimeout(function(){$(document).trigger('infoRowRefresh');}, 100);
                return;
            }


        } else {
            WCC.spinKontrol.close();
            $("#okSwitchPlans").attr('disabled', null);
            $('#componentRecreateAccountSwitchAll').attr('disabled', null);

            //ERROR HANDLING AND DISPLAY!
            var textError = '';
            for (var errorType in data.error) {
                    if (textError !== "") {
                            textError += '<br>';
                    }
                    textError += " - " + data.error[errorType];
            }
            var dataError = data.error;
            //WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_eSwitchingAccountsFailure"), textError, function(a, b, c){});
            WCC.components.componentErrorDisplay.open('Account Recreation Error', textError, function(a, b, c){});
        }
    };


    return{

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(displayName)
        {
            $(document).bind('updatePenddelData.recreateAccount', function(){WCC.components.recreateAccount.open();});

            fetchedData = WCC.model.penddelData.get();
            if(fetchedData===null) {
            	return;
            }

            savedSubmitObj = null;

            var checkedObjArray = WCC.model.penddelData.get();
            // first, we've gotta see if something is checked...
            if (checkedObjArray == null || checkedObjArray.length == 0)
            {
                //WCC.components.componentErrorDisplay.open(BRAVO.Translate._("WCC_MAIN_eSwitchPlansSelectTitle"), BRAVO.Translate._("WCC_MAIN_eSwitchPlansSelect"));
                WCC.components.componentErrorDisplay.open('Recreate Email Account', 'Recreate Email Account');
                return;
            }

            // now... are these local or forwarding accounts?
            var localCount = 0;
            localCount = localCount + 1;

            //var dialogTitle =  BRAVO.Translate._("WCC_MAIN_switchPlans");
            var dialogTitle =  "Recreate Email Account";



            recreateAccountArray = checkedObjArray;


            $(document).bind('updateAvailableEmailPlans', function(){WCC.components.recreateAccount.renderDialog(checkedObjArray, 'local');});

            // create the dialog box div... if it's not there
            if ( $('#'+properties.dialogDivId).length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);

                WCC.utils.showLoading(properties.dialogDivId);
            }

            // create the dialog
            $('#'+properties.dialogDivId).dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 420,
                title: dialogTitle
            });

            // open it...
            $('#'+properties.dialogDivId).dialog("open");

            this.renderDialog(checkedObjArray);

            return true;
        },


        /**
         * Render the dialog...
         *
         */
        renderDialog: function(checkedObjArray)
        {
            var switchTemplate = null;
                if (WCC.model.availableEmailPlans.get() == null)
                {
                    return;
                }
                switchTemplate = '#componentRecreateAccount';


            var data={};
            data['checkedObjArray'] = checkedObjArray;
            var renderedOutput =  $(switchTemplate).tmpl(data);
            $('#'+properties.dialogDivId).html(renderedOutput);
            $("#" + properties.dialogDivId).dialog( 'option', 'position', 'center' );

            // we've gotta set timeout this stuff
            setTimeout(function(){$('#componentRecreateAccountList li:even').css('background-color', '#f5f5f5');}, 100);
        },


        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            $('#'+properties.dialogDivId).dialog("close");
            $('#'+properties.dialogDivId).remove();
        },


        /**
         * retrieve plan data from the depths of the obj
         *
         */
        returnEmailPlanArray: function()
        {
            return emailPlanArray;
        },


        /**
         * Submitter for forwarding accounts
         *
         */
        submitForwarding: function()
        {
            var emailArray = {};
            for (var k in recreateAccountArray)
            {
                emailArray[recreateAccountArray[k]['email_address_id']] = recreateAccountArray[k]['pack_id'];
            }

            submitObj = {};
            submitObj.emailAddress = $('#componentRecreateAccountItem').val();
            submitObj.newPackUid = $('#componentRecreateAccountPlan').val();
            savedSubmitObj = submitObj;

            submitObj.postToken = Globals.POST_TOKEN;

            $.ajax({
                type: "POST",
                url: 'ajaxemail/recreateplan/',
                dataType : 'json',
                data: submitObj,
                success : submitOkSuccess,
                error :  WCC.utils.handleError
            });
        },

        /**
         * Submit!
         *
         */
        submit: function()
        {
           if (this.validate() == true)
           {
               this.submitOk();
           }

           // otherwise... handle that stuff...

        },


        /**
         * Validate
         *
         */
        validate: function()
        {
            // put some stuff here!
            return true;
        },




        /**
         * Submit ok
         *
         */
        submitOk: function(emailAccountOverride, planOverride)
        {
            // now... hold on there pardner...
            if($("#okSwitchPlans").attr('disabled')=='disabled') {
                return;
            }

            if($("#componentRecreateAccountSwitchAll").attr('disabled')=='disabled') {
                return;
            }


            if ($('#componentRecreateAccountConfirm').length > 0)
            {
                WCC.spinKontrol.open('componentRecreateAccountConfirm');
                $("#componentRecreateAccountSwitchAll").attr('disabled', 'disabled');
            }
            else if ($('#componentRecreateAccountDiv').length > 0)
            {
                WCC.spinKontrol.open('componentRecreateAccountDiv');
                $("#okSwitchPlans").attr('disabled', 'disabled');
            }

            var emailArray = {};
            for (var k in recreateAccountArray)
            {
                emailArray[recreateAccountArray[k]['email_address_id']] = recreateAccountArray[k]['pack_id'];
            }

             submitObj = {};
             submitObj.recreateAccountArray = emailArray;
             if(emailAccountOverride) {
                 submitObj.recreateAccountArray = emailAccountOverride;
             }
             submitObj.newPackUid = $('#componentRecreateAccountPlan').val();
             if (planOverride) {
            	 submitObj.newPackUid = planOverride;
             }

             submitObj.emailAddress = $('#componentRecreateAccountItem').val();
             submitObj.password = $('#componentRecreateAccountPassword').val();
             submitObj.newPackUid = $('#componentRecreateAccountPlan').val();


             savedSubmitObj = submitObj;

             submitObj.postToken = Globals.POST_TOKEN;

             $.ajax({
                type: "POST",
                url: 'ajaxemail/recreateemail/',
                dataType : 'json',
                data: submitObj,
                success : submitOkSuccess,
                error :  WCC.utils.handleError
            });
        },


        /**
         * Submit that you actually wanna switch
         *
         */
        submitRecreateAccountConfirm: function()
        {

            if ($('#componentRecreateAccountPlan').val() == undefined)
            {
                 var newPackUid = savedSubmitObj.newPackUid;
            }
            else
            {
                var newPackUid = $('#componentRecreateAccountPlan').val();
            }

            WCC.components.recreateAccount.submitOk(savedSubmitObj['recreateAccountArray'], newPackUid);
        },


        /**
         * Return available email plans
         *
         */
        returnAvailableAccounts: function(numNeededInput)
        {
            if (numNeededInput == undefined)
            {
                var numNeeded = recreateAccountArray.length;
            }
            else
            {
                var numNeeded = numNeededInput;
            }
            var numNeeded = 1;


            var planArray = WCC.model.availableEmailPlans.get();
            var outputArray = [];
            for (var key in planArray)
            {
                var availableAccounts = planArray[key].address_count - planArray[key].used_address_count;

                if (planArray[key].delivery_mode == 'forward')
                {
                    // skip it. Forward plans can go to hell
                }
                else if (planArray[key].address_count != -1 && (numNeeded > (planArray[key].address_count - planArray[key].used_address_count)))
                {
                    // skip that loser plan if it doesn't have enough stuff
                    var tempArray = planArray[key];
                    tempArray['disabled'] = true;
                    outputArray[outputArray.length] = tempArray;
                }
                else
                {
                    var tempArray = planArray[key];
                    tempArray['disabled'] = false;
                    outputArray[outputArray.length] = planArray[key];
                }
            }

            return outputArray;
        },



        /**
         * Return accounts for a given plan id
         *
         */
        returnAvailableAccountsForPlan: function(planId)
        {
            var planArray = WCC.model.emailPlans.get();
            for (var key in planArray)
            {
                if (planArray[key].pack_uid == planId)
                {
                    var availableAccounts = planArray[key].address_count - planArray[key].used_address_count;
                    if(planArray[key].address_count == -1) {
                    	availableAccounts = planArray[key].address_count;
                    }
                    return availableAccounts;
                }
            }

            return 0;
        },


        returnPlanNameForPlanId: function(planId)
        {
            var planArray = WCC.model.emailPlans.get();
            for (var key in planArray)
            {
                if (planArray[key].pack_uid == planId)
                {
                    return planArray[key].pack_name;
                }
            }

            return false;
        }



    };


}());



/**
 * MX record corrector
 * ... by jon (jroig@godaddy.com)
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.mxRecordSettings = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentMXRecordSettingsDiv';
    properties.theDialog = null;
    properties.template = '#componentMXRecordSettings';
    properties.title = 'MX Records Settings';

    var theEmailAddress = null;

    var theMXProvider = null;
    var canForce = null;

    var deleteData = null;

    // success? Let us then load the dialog box 'n' stuff....
    var ajaxSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck != false)
        {
            theMXProvider = data['mxProvider'];
            canForce = data['canForce'];

            this.renderDialog();
        }
    };


    var forceMXSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck != false)
        {

            var successText = BRAVO.Translate._("WCC_MAIN_mxRecordReconfigureSuccess");
            successText = successText.replace('#VALUE#', WCC.utils.utf8Address(theEmailAddress));

            WCC.components.mxRecordSettings.closeDialog();

            WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), successText);
        }
    };


    var deleteAccountSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck != false)
        {
            WCC.components.mxRecordSettings.closeDialog();

            var deleteText = BRAVO.Translate._("WCC_MAIN_mxRecordDelete");
            deleteText = deleteText.replace('#VALUE#', theEmailAddress);

            require("starfield/sf.growl", function() {
              $("<div />").sfGrowl({ icon: "success", title: BRAVO.Translate._("WCC_MAIN_success")
                , content: deleteText  });
                setTimeout(function(){$('#sf_growl').css('z-index', 13013)}, 100);
            });

            // do some search and replace on the delete key...
            WCC.cache.addAlert(deleteData[theEmailAddress]['displayName'], 'email', 'penddel');

            if (WCC.allAccounts)
            {
                // WCC.allAccounts.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.domains.reset();
                WCC.model.emailPlans.reset();
                WCC.model.offPlans.reset();
                WCC.model.relayData.reset();
                WCC.model.availableCalPlans.reset();
                WCC.model.availableEmailPlans.reset();
                WCC.model.availableOffPlans.reset();
            }
            if (WCC.email)
            {
                //WCC.email.getAllAccounts();
                WCC.model.emailPlans.reset();
                WCC.model.availableEmailPlans.reset();
            }
            if (WCC.calendar)
            {
                // WCC.calendar.getAllAccounts();
                WCC.model.calPlans.reset();
                WCC.model.availableCalPlans.reset();
            }
            if (WCC.off)
            {
                // WCC.off.getAllAccounts();
                WCC.model.offPlans.reset();
                WCC.model.availableOffPlans.reset();
            }
        }
    };




    return{

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(emailAddressInput)
        {

            WCC.components.analytics.trackView('modal', 'wcc-mxrecords');

            deleteData = null;
            theEmailAddress = emailAddressInput;

            // create the dialog box div... if it's not there
            if ($('#componentMXRecordSettingsDiv').length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = properties.dialogDivId;
                $(document.body).append(newDiv);

                WCC.utils.showLoading(properties.dialogDivId);

                properties.theDialog = $('#componentMXRecordSettingsDiv');
            }

            // create the dialog
            $('#componentMXRecordSettingsDiv').dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 560,
                title: properties.title
            });

            // open it...
            $('#componentMXRecordSettingsDiv').dialog("open");

            // fire off the ajax request
            var that = this;
            $.ajax({
                type: "POST",
                url: '/ajaxemail/getmxprovider',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN, 'emailAddress':theEmailAddress},
                success: function(data) {ajaxSuccess.call(that, data);},
                error: WCC.utils.handleError
            });

            return true;
        },


        /**
         * Render the dialog...
         *
         */
        renderDialog: function()
        {

            var mxProviderText = BRAVO.Translate._("WCC_MAIN_mxRecordsDifferentProvider");
            if (theMXProvider == false)
            {
                var aDifferentProvider = BRAVO.Translate._("WCC_MAIN_aDifferentProvider");
                mxProviderText = mxProviderText.replace('#VALUE#',aDifferentProvider);
            }
            else
            {
                mxProviderText = mxProviderText.replace('#VALUE#',theMXProvider);
            }

            var renderedOutput =  $(properties.template).tmpl({'mxProviderText': mxProviderText, 'theMXProvider' : theMXProvider, 'canForce' : canForce});
            properties.theDialog.html(renderedOutput);
            properties.theDialog.dialog( 'option', 'position', 'center' );

            // make stuff do stuff
            var componentMXRecordSettingsDiv = $('#componentMXRecordSettingsDiv');
            componentMXRecordSettingsDiv.find('#componentMXRecordSettingsOneChoice').click(function(){
                WCC.components.mxRecordSettings.toggleInfo('One');
                return false;
            });
            componentMXRecordSettingsDiv.find('#componentMXRecordSettingsOneImage').click(function(){
                WCC.components.mxRecordSettings.toggleInfo('One');
                return false;
            });


            componentMXRecordSettingsDiv.find('#componentMXRecordSettingsTwoChoice').click(function(){
                WCC.components.mxRecordSettings.toggleInfo('Two');
                return false;
            });
            componentMXRecordSettingsDiv.find('#componentMXRecordSettingsTwoImage').click(function(){
                WCC.components.mxRecordSettings.toggleInfo('Two');
                return false;
            });

            componentMXRecordSettingsDiv.find('#componentMXRecordSettingsThreeChoice').click(function(){
                WCC.components.mxRecordSettings.toggleInfo('Three');
                return false;
            });
            componentMXRecordSettingsDiv.find('#componentMXRecordSettingsThreeImage').click(function(){
                WCC.components.mxRecordSettings.toggleInfo('Three');
                return false;
            });

            componentMXRecordSettingsDiv.find('#mxRecordSaveButton').click(function(){
                WCC.components.mxRecordSettings.handleMXChoice();
                return false;
            });
            componentMXRecordSettingsDiv.find('#mxRecordCancelButton').click(function(){
                WCC.components.mxRecordSettings.closeDialog();
                return false;
            });

            WCC.components.analytics.init(componentMXRecordSettingsDiv);


            $('#componentMXRecordSettingsDiv').parent().find('.ui-dialog-titlebar-close').click(function(){
                WCC.components.analytics.trackEvent('wcc-mxrecords', 'x-button', 'link', 0, '');
                return false;
            });

        },


        showDeleteTheAccount: function()
        {
            WCC.components.analytics.trackView('modal', 'wcc-mxrecords-delete');

            WCC.components.mxRecordSettings.coverDialogContents();
            WCC.components.mxRecordSettings.positionVeil();

            var renderedOutput =  $('#componentMXRecordSettingsDelete').tmpl();
            $('#componentMXRecordSettingsVeil').html(renderedOutput);

            var componentMXRecordSettingsDiv = $('#componentMXRecordSettingsDiv');
            componentMXRecordSettingsDiv.find('#mxRecordDeleteAccount').click(function(){
                WCC.components.mxRecordSettings.deleteTheAccount();
                return false;
            });
            componentMXRecordSettingsDiv.find('#mxRecordDeleteAccountCancel').click(function(){
                WCC.components.mxRecordSettings.closeVeil();
                return false;
            });

            WCC.components.analytics.init($('#componentMXRecordSettingsVeil'));
        },


        showReconfigureTheAccount: function()
        {
            WCC.components.analytics.trackView('modal', 'wcc-mxrecords-reconfigure');

            WCC.components.mxRecordSettings.coverDialogContents();
            WCC.components.mxRecordSettings.positionVeil();

            var renderedOutput =  $('#componentMXRecordSettingsReconfigure').tmpl();
            $('#componentMXRecordSettingsVeil').html(renderedOutput);

            var componentMXRecordSettingsDiv = $('#componentMXRecordSettingsDiv');
            componentMXRecordSettingsDiv.find('#mxRecordReconfigure').click(function(){
                WCC.components.mxRecordSettings.forceMXChange();
                return false;
            });
            componentMXRecordSettingsDiv.find('#mxRecordReconfigureCancel').click(function(){
                WCC.components.mxRecordSettings.closeVeil();
                return false;
            });

            WCC.components.analytics.init($('#componentMXRecordSettingsVeil'));
        },


        handleMXChoice: function()
        {
            if ($('#mxRecordChoiceDelete').is(':checked') )
            {
                WCC.components.mxRecordSettings.showDeleteTheAccount();
            }
            else if ($('#mxRecordChoiceReconfig').is(':checked') )
            {
                WCC.components.mxRecordSettings.showReconfigureTheAccount();
            }
            else if ($('#mxRecordChoiceInstructions').is(':checked') )
            {
                var win=window.open('/supporttransfer?helpArticle=4228', '_blank');
                win.focus();
            }

            return false;
        },


        forceMXChange: function()
        {
            var emailArray = theEmailAddress.split('@');

            var that = this;
            $.ajax({
                type: "POST",
                url: '/ajax/forcemx',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN, 'domain':emailArray[1]},
                success: function(data) {forceMXSuccess.call(that, data);},
                error: WCC.utils.handleError
            });
        },


        deleteTheAccount: function()
        {
            var theObj = WCC.cache.searchByField(WCC.cache.returnCacheObject(), 'emailAddress', theEmailAddress);

            var deleteArray = {};
            deleteArray[theEmailAddress] = {};
            deleteArray[theEmailAddress]['email'] = {};
            deleteArray[theEmailAddress]['displayName'] = theObj[0]['displayName'];
            deleteArray[theEmailAddress]['email']['email_address_id'] = theObj[0]['email_address_id'];
            deleteArray[theEmailAddress]['email']['emailAddress'] = theEmailAddress;

            var submitObj = {};
            submitObj.postToken = Globals.POST_TOKEN;
            submitObj.account = deleteArray;

            var that = this;
            $.ajax({
                type: "POST",
                url: '/ajax/deleteaccounts',
                dataType : 'json',
                data: submitObj,
                success: function(data) {deleteAccountSuccess.call(that, data);},
                error: WCC.utils.handleError
            });

            deleteData = deleteArray;
        },


        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            properties.theDialog.dialog("close");
            properties.theDialog.remove();
        },


        /**
         * Cover up the contents of the email dialog
         */
        coverDialogContents: function()
        {
            if ( $('#componentMXRecordSettingsHider').length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = 'componentMXRecordSettingsHider';
                properties.theDialog.append(newDiv);
            }

            var createOffset = properties.theDialog.offset();

            $('#componentMXRecordSettingsHider')
                .css('position', 'absolute')
                .width(properties.theDialog.width() + 35)
                .height(properties.theDialog.height() + 35)
                .css('top', '32px')
                .css('left', '0px')
                .css('z-index', 100000)
                .css('background', "white")
                .css('-moz-opacity', '0.90')
                .css('filter', 'alpha(opacity=90)')
                .css('opacity', '.70');
        },


        /**
         * Hide the cover dialog
         */
        hideDialogCover: function()
        {
            $('#componentMXRecordSettingsHider').remove();
        },


        /**
         * Position the veil
         */
        positionVeil: function()
        {
            var defaultWidth = 510;

            if ( $('#componentMXRecordSettingsVeil').length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = 'componentMXRecordSettingsVeil';
                properties.theDialog.append(newDiv);
            }

            $('#componentMXRecordSettingsVeil')
                .css('position', 'absolute')
                .width(defaultWidth)
                .css('top', '31px')
                .css('left', '20px')
                .css('z-index', 100001)
                .css('box-shadow', '0 0 10px #000')
                .css('background-color', 'white');

            if (WCC.utils.isIE() == true)
            {
                $('#componentMXRecordSettingsVeil')
                    .css('border-color', 'black')
                    .css('border-width', '1px')
                    .css('border-style', 'solid');
            }
        },


        closeVeil: function()
        {
            $('#componentMXRecordSettingsVeil').remove();
            WCC.components.mxRecordSettings.hideDialogCover();
        },


        toggleInfo: function(theThing)
        {
            var theDiv = $('#componentMXRecordSettings' + theThing + 'Info');
            var theImage = $('#componentMXRecordSettings' + theThing + 'Image');
            var theChoice = $('#componentMXRecordSettings' + theThing + 'Choice');
            if (theDiv.css('display') == 'none')
            {
                //theDiv.show({'duration': 200});
                theDiv.slideDown(200);
                theImage.attr('src', Globals.CDNPath + '/../css/images/green_arrow_down.png');
                theChoice.css('top', '-1px');
            }
            else
            {
                theDiv.slideUp(200);
                theImage.attr('src', Globals.CDNPath + '/../css/images/green_right_arrow.png');
                theChoice.css('top', '-5px');
            }
        }

    };


}());



/**
 * He's the DJ, I'm the Wrapper for Google Analytics
 * 
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.analytics = (function()
{
    var debug = false;
    
    var jonsole_log = function(message)
    {
        if (debug == true)
        {
            konsole.log(message);
        }
        
    }
    
    
    var handleCheckbox = function(theItemInput)
    {
         jonsole_log('handleCheckbox');
         var theItem = $(theItemInput);
         
         var gaCategory = theItem.attr('gaCategory');
         var gaAction = theItem.attr('gaAction');
         var isChecked = theItem.is(':checked');
         var theType = theItem.attr('type');
         
         
         jonsole_log('gaCategory=' + gaCategory);
         jonsole_log('gaAction=' + gaAction);
         jonsole_log('isChecked=' + isChecked);
         jonsole_log('theType=' + theType);
         
         var checkedValue = 1;
         if (!isChecked)
         {
             checkedValue = 0;
         }
   
         WCC.components.analytics.trackEvent(gaCategory, gaAction, theType, checkedValue, '');
         
         return true;
    };
    

    var handleLink = function(theItemInput)
    {
        jonsole_log('handleLink');
        var theItem = $(theItemInput);

        var gaCategory = theItem.attr('gaCategory');
        var gaAction = theItem.attr('gaAction');

        jonsole_log('gaCategory=' + gaCategory);
        jonsole_log('gaAction=' + gaAction);
        
        WCC.components.analytics.trackEvent(gaCategory, gaAction, 'link', 0, '');
        
        return true;
    };
    
    
    var handleSelect = function (theItemInput)
    {
        jonsole_log('handleSelect');
         var theItem = $(theItemInput);
         
         var gaCategory = theItem.attr('gaCategory');
         var gaAction = theItem.attr('gaAction');
         
         jonsole_log('gaCategory=' + gaCategory);
         jonsole_log('gaAction=' + gaAction);

         WCC.components.analytics.trackEvent(gaCategory, gaAction, 'dropdown', 0, '');
         
         return true;
    };
    
    
    var handleTextarea = function (theItemInput)
    {
        jonsole_log('handleTextarea');
        var theItem = $(theItemInput);

        var gaCategory = theItem.attr('gaCategory');
        var gaAction = theItem.attr('gaAction');

        jonsole_log('gaCategory=' + gaCategory);
        jonsole_log('gaAction=' + gaAction);

        WCC.components.analytics.trackEvent(gaCategory, gaAction, 'text-field', 0, '');

        return true;
    };
    

    return{
        
        
        trackEvent: function(theCategory, theAction, theLabel, theValue, misc)
        {
            if (theValue == undefined)
            {
                theValue = 0;
            }
            if (misc == undefined)
            {
                misc = '';
            }

            var outputCategory = theCategory;
            if (WCC.utils.getCRM() == true)
            {
                outputCategory = 'crm-' + theCategory;
            }

            _gaq.push(['_trackEvent', outputCategory, theAction, theLabel, theValue, misc ]);
        },

        
        /**
         *
         */
        trackView: function(theCategory, thePage)
        {   
            jonsole_log('trackView theCategory=' + theCategory + ' thePage=' + thePage);
            
            var outputCategory = theCategory;
            if (WCC.utils.getCRM() == true)
            {
                outputCategory = 'crm-' + theCategory;
            }

            var GAText = 'vpv/' + outputCategory + '/' + thePage;
            
            _gaq.push(['_trackPageview', GAText]);
            return true;
        },
        
        
 
        
        handleGA: function(event)
        {
            jonsole_log('event');
            jonsole_log(event);
            jonsole_log(this);
            
            
            jonsole_log('this.tagName=' + this.tagName);
            
            switch (this.tagName)
            {
                case 'INPUT':
                    handleCheckbox(event.currentTarget);
                    break;
                case 'A':
                    handleLink(event.currentTarget);
                    break;
                case 'SELECT':
                    handleSelect(event.currentTarget);
                    break;
                case 'TEXTAREA':
                    handleTextarea(event.currentTarget);
                    break;
                default:
                    handleLink(event.currentTarget);
                    break;
            }
            
        },
        
        
        setDebug: function (debugInput)
        {
            debug = debugInput;
        },
        
        
        init: function(theDiv)
        {   
            jonsole_log('GA init');
            
            if (theDiv == undefined)
            {
                theDiv = $(document);
            }
            
            
            theDiv.find('.gaTrackable').unbind('.gaHandler');
            
            theDiv.find('.gaTrackable').bind('click.gaHandler', WCC.components.analytics.handleGA);
            theDiv.find('.gaTrackable').filter('select').bind('change.gaHandler', WCC.components.analytics.handleGA);
            return; 
            
        }
        
        
    };
    
    
}());



/**
 * Example to use when making new components
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.updateWatcher = (function()
{
    var properties = {};

    properties.emailArray = [];
    properties.calArray = [];
    properties.offArray = [];


    /**
     * Do the growl when email status changes
     *
     * @param object data
     * @returns
     */
    var emailStatusCheckSuccess = function(data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            if (data.status == 'cool')
            {
                  // reset the email
                var theEmail = data.emailAddress;

                var searchArray = WCC.cache.searchByField(WCC.cache.returnCacheObject(), 'emailAddress', theEmail);
                for (var x = 0; x < searchArray.length; x++)
                {
                    WCC.cache.removeAlert(searchArray[x]['realName'], 'email', 'pendsetup');
                    WCC.cache.removeAlert(searchArray[x]['realName'], 'email', 'pending-not in mailAPI');
                    WCC.cache.removeAlert(searchArray[x]['realName'], 'email', 'pending');
                    WCC.cache.removeAlert(searchArray[x]['realName'], 'email', 'pendingMigration');
                }

                WCC.model.emailPlans.reset();
                WCC.model.availableEmailPlans.reset();

                for (var x = 0; x < properties.emailArray.length; x++)
                {
                    if (properties.emailArray[x] == theEmail)
                    {
                        delete(properties.emailArray[x]);
                    }
                }
                WCC.cache.deleteAttribute(theEmail, 'emailAccountDataObj');
                WCC.emailAccount.getEmailAccountData(theEmail);

                $(document).trigger('infoRowRefresh');

                var emailAccountSetupSuccess = BRAVO.Translate._("WCC_MAIN_emailAccountSetupSuccess");
                emailAccountSetupSuccess = emailAccountSetupSuccess.replace('#VALUE#', WCC.utils.utf8Address(theEmail));

                WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), emailAccountSetupSuccess);
            }
            else
            {
              if( undefined !== data.emailAddress ) {
                    var theEmail = data.emailAddress;
                    WCC.cache.deleteAttribute(theEmail, 'emailAccountDataObj');
                    WCC.emailAccount.getEmailAccountData(theEmail);

                    $(document).trigger('infoRowRefresh');

              }

            }
        }

    }


    /**
     * Do the growl when cal status changes
     *
     * @param object data
     * @returns
     */
    var calStatusCheckSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            if (data.status == 'cool')
            {
                var theCalUser = data.calUser;

                var searchArray = WCC.cache.searchByField(WCC.cache.returnCacheObject(), 'calUser', theCalUser);
                for (var x = 0; x < searchArray.length; x++)
                {
                    WCC.cache.removeAlert(searchArray[x]['realName'], 'cal', 'pending');
                    WCC.cache.removeAlert(searchArray[x]['realName'], 'cal', 'pendsetup');
                }

                WCC.model.calPlans.reset();
                WCC.model.availableCalPlans.reset();

                for (var x = 0; x < properties.calArray.length; x++)
                {
                    if (properties.calArray[x] == theCalUser)
                    {
                        delete(properties.calArray[x]);
                    }
                }

                $(document).trigger('infoRowRefresh');

                var calAccountSetupSuccess = BRAVO.Translate._("WCC_MAIN_calAccountSetupSuccess");
                calAccountSetupSuccess = calAccountSetupSuccess.replace('#VALUE#', WCC.utils.utf8Address(theCalUser));

                WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), calAccountSetupSuccess);
            }
        }
    }


    /**
     * Do the growl when off status changes
     *
     * @param object data
     * @returns
     */
    var offStatusCheckSuccess = function (data)
    {
        var dataCheck = WCC.utils.checkData(data);
        if (dataCheck == true)
        {
            if (data.status == 'cool')
            {
                var theOffUser = data.offUser;

                var searchArray = WCC.cache.searchByField(WCC.cache.returnCacheObject(), 'offUser', theOffUser);
                for (var x = 0; x < searchArray.length; x++)
                {
                    WCC.cache.removeAlert(searchArray[x]['realName'], 'off', 'pending');
                    WCC.cache.removeAlert(searchArray[x]['realName'], 'off', 'pendsetup');
                    if (WCC.off)
                    {
                        WCC.off.getOtherData(searchArray[x]['offUser']);
                    }
                }

                WCC.model.offPlans.reset();
                WCC.model.availableOffPlans.reset();

                for (var x = 0; x < properties.offArray.length; x++)
                {
                    if (properties.offArray[x] == theOffUser)
                    {
                        delete(properties.offArray[x]);
                    }
                }

                if (WCC.off)
                {

                    WCC.off.getQuotas();
                }

                $(document).trigger('infoRowRefresh');

                var offAccountSetupSuccess = BRAVO.Translate._("WCC_MAIN_offAccountSetupSuccess");
                offAccountSetupSuccess = offAccountSetupSuccess.replace('#VALUE#', WCC.utils.utf8Address(theOffUser));

                WCC.utils.doGrowl("success", BRAVO.Translate._("WCC_MAIN_success"), offAccountSetupSuccess);
            }
        }
    }


    return{

        /**
         * Watch for the email account to become active
         *
         * @param string emailAddress
         */
        watchEmail: function(emailAddress)
        {

            if (jQuery.inArray(emailAddress, properties.emailArray) == -1)
            {
                 properties.emailArray[ properties.emailArray.length] = emailAddress;
            }
            return true;
        },

        /**
         * How ya doing cal account?
         *
         * @param string calUser
         * @returns true
         *
         */
        watchCalendar: function(calUser)
        {
            if (jQuery.inArray(calUser, properties.calArray) == -1)
            {
                 properties.calArray[ properties.calArray.length] = calUser;
            }
            return true;
        },


        /**
         * Wassup, online storage account?
         *
         * @param {type} offUser
         * @returns true
         */
        watchOff:function(offUser)
        {
            if (jQuery.inArray(offUser, properties.offArray) == -1)
            {
                 properties.offArray[ properties.offArray.length] = offUser;
            }
            return true;
        },


        /**
         * The main update loop
         *
         * @returns nothing
         */
        updateLoop: function()
        {
            if (properties.emailArray.length == 0 && properties.calArray.length == 0 && properties.offArray.length == 0)
            {
                return;
            }

            var that = this;

            // email?
            if (properties.emailArray.length > 0)
            {
                for (var x = 0; x < properties.emailArray.length; x++)
                {
                    if (properties.emailArray[x] == '' || properties.emailArray[x] == undefined)
                    {
                        // do nothing
                    }
                    else
                    {
                        var submitObj = {};
                        submitObj.emailAddress = properties.emailArray[x];
                        submitObj.postToken = Globals.POST_TOKEN;

                        $.ajax({
                            type: "POST",
                            url: 'ajaxemail/checkstatus/',
                            data: submitObj,
                            dataType : 'json',
                            success :  function(data) {emailStatusCheckSuccess.call(that, data);},
                            error :  WCC.utils.handleError
                        });
                    }
                }
            }

            // cal?
            if (properties.calArray.length > 0)
            {
                for (var x = 0; x < properties.calArray.length; x++)
                {
                    if (properties.calArray[x] == '' || properties.calArray[x] == undefined)
                    {
                        // do nothing
                    }
                    else
                    {
                        var submitObj = {};
                        submitObj.calUser = properties.calArray[x];
                        submitObj.postToken = Globals.POST_TOKEN;

                        $.ajax({
                            type: "POST",
                            url: 'ajaxcalendar/checkstatus/',
                            data: submitObj,
                            dataType : 'json',
                            success :  function(data) {calStatusCheckSuccess.call(that, data);},
                            error :  WCC.utils.handleError
                        });
                    }
                }
            }

            // off?
            if (properties.offArray.length > 0)
            {
                for (var x = 0; x < properties.offArray.length; x++)
                {
                    if (properties.offArray[x] == '' || properties.offArray[x] == undefined)
                    {
                        // do nothing
                    }
                    else
                    {
                        var submitObj = {};
                        submitObj.offUser = properties.offArray[x];
                        submitObj.postToken = Globals.POST_TOKEN;

                        $.ajax({
                            type: "POST",
                            url: 'ajaxfiles/checkstatus/',
                            data: submitObj,
                            dataType : 'json',
                            success :  function(data) {offStatusCheckSuccess.call(that, data);},
                            error :  WCC.utils.handleError
                        });
                    }
                }
            }
        }



    };


}());


var updateWatcherInterval = self.setInterval(function(){WCC.components.updateWatcher.updateLoop()}, 60000);



/**
 * Easy Setup for Mobile / Desktop Email Clients
 * ... by Jon Roig (jroig@godaddy.com)
 *
 */

var WCC = WCC || {};
WCC.components = WCC.components || {};

WCC.components.easySetup = (function()
{
    var properties = {};

    properties.dialogDivId = 'componentEasySetupDiv';
    properties.template = '#componentEasySetup';
    properties.title = 'Email Setup';


    var setupEmailAddress = null;
    var currentClient = null;
    var stuff = null;

    return{

        /**
         * Fire up the dialog box and take care of other stuff
         *
         */
        open: function(initialEmailAddress)
        {

            if (initialEmailAddress != undefined)
            {
                this.setSetupEmailAddress(initialEmailAddress);
            }

            if (WCC.model.emailAccounts.get() == null)
            {
                setTimeout(function(){WCC.components.easySetup.open()},100);
                return;
            }

            var easySetupDiv = $('#componentEasySetupDiv');
            // create the dialog box div... if it's not there
            if ( easySetupDiv.length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = 'componentEasySetupDiv';
                $(document.body).append(newDiv);
            }

            // create the dialog
            $('#componentEasySetupDiv').dialog({
                autoOpen: false,
                modal: true,
                resizable: false,
                draggable: false,
                width: 550,
                height: 265,
                title: properties.title,
                close: WCC.components.easySetup.clearState
            });

            // open it...
            $('#componentEasySetupDiv').dialog("open");
            WCC.utils.centerThisDialog(properties.dialogDivId);

            this.renderDialog();
            WCC.utils.centerThisDialog(properties.dialogDivId);



            return true;
        },


        /**
         * Render the main dialog...
         *
         */
        renderDialog: function()
        {
            $('#componentEasySetupDiv').removeClass('componentEasySetupDivSized');

            var renderedOutput =  $('#componentEasySetup').tmpl();
            $('#componentEasySetupDiv').html(renderedOutput);
            $('#componentEasySetupDiv').dialog( 'option', 'position', 'center' );

            $('#componentEasySetupDiv #componentEasySetupMobileStart').click(function(){
                /**
                $('#componentEasySetupDiv #componentEasySetupMobileStart').removeClass('componentEasySetupButton');
                $('#componentEasySetupDiv #componentEasySetupMobileStart').addClass('componentEasySetupSelected');

                $('#componentEasySetupDiv #componentEasySetupDesktopStart').removeClass('componentEasySetupSelected');
                $('#componentEasySetupDiv #componentEasySetupDesktopStart').addClass('componentEasySetupButton');

                $('#componentEasySetupDiv #componentEasySetupNext').attr('disabled', false);
                **/

                 WCC.components.easySetup.renderMobileSetup();
            });

            $('#componentEasySetupDiv #componentEasySetupDesktopStart').click(function(){
                /**
                $('#componentEasySetupDiv #componentEasySetupMobileStart').addClass('componentEasySetupButton');
                $('#componentEasySetupDiv #componentEasySetupMobileStart').removeClass('componentEasySetupSelected');

                $('#componentEasySetupDiv #componentEasySetupDesktopStart').addClass('componentEasySetupSelected');
                $('#componentEasySetupDiv #componentEasySetupDesktopStart').removeClass('componentEasySetupButton');

                $('#componentEasySetupDiv #componentEasySetupNext').attr('disabled', false);
                **/

                WCC.components.easySetup.renderDesktopSetup();
            });


            $('#componentEasySetupDiv #componentEasySetupCancel').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv #componentEasySetupNext').click(function(){
                if ($('#componentEasySetupDiv #componentEasySetupMobileStart').hasClass('componentEasySetupSelected'))
                {
                    WCC.components.easySetup.renderMobileSetup();
                }
                else
                {
                    WCC.components.easySetup.renderDesktopSetup();
                }
            });

            WCC.components.analytics.trackView('modal', 'wcc-easysetup');
            WCC.components.analytics.init($('#componentEasySetupDiv'));


            if (WCC.model.emailAccounts.get().length == 0)
            {
                $("#componentEasySetupDiv").sfMsgOverlay({message:'You must first create an email address', style:null});
            }
            WCC.utils.centerThisDialog(properties.dialogDivId);

        },


        /**
        First step in the desktop setup process
        **/
        renderDesktopSetup: function()
        {
            WCC.components.analytics.trackView('modal', 'wcc-easysetup-desktop');

            $('#componentEasySetupDiv').removeClass('componentEasySetupDivSized');

            var renderedOutput =  $('#componentEasySetupDesktop').tmpl();
            $('#componentEasySetupDiv').html(renderedOutput);
            $('#componentEasySetupDiv').dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);

            //
            $('#componentEasySetupDiv #componentEasySetupDesktopCancel').click(function(){
                WCC.components.easySetup.closeDialog();
            });

            $('#componentEasySetupDiv #componentEasySetupDesktopBack').click(function(){
                WCC.components.easySetup.renderDialog();
                WCC.utils.centerThisDialog(properties.dialogDivId);
            });

            $('#componentEasySetupDiv #componentEasySetupDesktopOk').click(function(){

                //
                WCC.components.easySetup.setSetupEmailAddress($('#componentEasySetupDesktopEmailAddress').val());

                WCC.components.easySetup.setCurrentClient($('#componentEasySetupDesktopClient').val());

                if ($('#componentEasySetupDesktopClient').val() == 'outlook2010')
                {
                    var emailArray = $('#componentEasySetupDesktopEmailAddress').val().split('@');

                    $.ajax({
                        type: "POST",
                        url: '/ajax/getsrv',
                        dataType : 'json',
                        data: {'postToken':Globals.POST_TOKEN, 'domain': emailArray[1]},
                        success: function(data) { WCC.components.easySetup.renderDesktopSetupOutlook(data); },
                        error: WCC.utils.handleError
                    });
                }
                else if ($('#componentEasySetupDesktopClient').val() == 'applemail')
                {
                    WCC.components.easySetup.setSetupEmailAddress($('#componentEasySetupDesktopEmailAddress').val());

                    $.ajax({
                        type: "POST",
                        url: 'ajaxemail/getemailsettings',
                        dataType : 'json',
                        data: {'postToken':Globals.POST_TOKEN, 'emailAddress' : $('#componentEasySetupDesktopEmailAddress').val()},
                        success: function(data) {WCC.components.easySetup.renderDesktopSetupAppleMail(data)},
                        error: WCC.utils.handleError
                    });
                }

                else if ($('#componentEasySetupDesktopClient').val() == 'other')
                {

                    WCC.components.easySetup.setSetupEmailAddress($('#componentEasySetupDesktopEmailAddress').val());

                    $.ajax({
                        type: "POST",
                        url: 'ajaxemail/getemailsettings',
                        dataType : 'json',
                        data: {'postToken':Globals.POST_TOKEN, 'emailAddress' : $('#componentEasySetupDesktopEmailAddress').val()},
                        success: function(data) {WCC.components.easySetup.renderDesktopSetupOther(data)},
                        error: WCC.utils.handleError
                    });
                }
            });

            WCC.components.analytics.init($('#componentEasySetupDiv'));
        },


        /*
        The outlook autodiscover dialog page
        */
        renderDesktopSetupOutlook: function(data)
        {
            WCC.components.analytics.trackView('modal', 'wcc-easysetup-desktop-outlook');

            var renderedOutput =  $('#componentEasySetupDesktopOutlook').tmpl(data);
            $('#componentEasySetupDiv').html(renderedOutput);

            $('#componentEasySetupDiv').html($('#componentEasySetupDiv').html().replace('||DOMAIN||', data.domain));

            $('#componentEasySetupDiv').dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);

            $('#componentEasySetupDiv #componentEasySetupDesktopOutlookCancel').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv #componentEasySetupDesktopOutlookBack').click(function(){
                WCC.components.easySetup.renderDesktopSetup()
                WCC.utils.centerThisDialog(properties.dialogDivId);
            });

            $('#componentEasySetupDiv #componentEasySetupDesktopOutlookOk').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            var emailArray = WCC.components.easySetup.getSetupEmailAddress().split('@');

            // if the status is true, we want to give the user the ability to turn it off...
            // ... or... vice versa
            if (data.status == true)
            {
                $('#componentEasySetupDiv #changeSrvStatus').click(function(){
                    $.ajax({
                        type: "POST",
                        url: '/ajax/setsrv',
                        dataType : 'json',
                        data: {'postToken':Globals.POST_TOKEN, 'domain': emailArray[1], 'status' : false},
                        success: function(data) { WCC.components.easySetup.refreshDesktopSetupOutlook(data); },
                        error: WCC.utils.handleError
                    });

                });
            }
            else
            {
                $('#componentEasySetupDiv #changeSrvStatus').click(function(){
                    $.ajax({
                        type: "POST",
                        url: '/ajax/setsrv',
                        dataType : 'json',
                        data: {'postToken':Globals.POST_TOKEN, 'domain': emailArray[1], 'status' : true},
                        success: function(data) { WCC.components.easySetup.refreshDesktopSetupOutlook(data); },
                        error: WCC.utils.handleError
                    });

                });
            }

            WCC.components.analytics.init($('#componentEasySetupDiv'));

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_print').click(function(){
                WCC.components.easySetup.printContents();
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_email').click(function(){
                WCC.components.easySetup.emailSetupInstructions('Outlook Setup Instructions');
            });

            WCC.components.easySetup.attachToolTipsForMailAndPrint();
        },


        /*
        Just kind of an intermediary -- when you click the SRV status, this runs, the refreshes renderDesktopSetupOutlook
        */
        refreshDesktopSetupOutlook: function(data)
        {
            $.ajax({
                type: "POST",
                url: '/ajax/getsrv',
                dataType : 'json',
                data: {'postToken':Globals.POST_TOKEN, 'domain': data.domain},
                success: function(data) { WCC.components.easySetup.renderDesktopSetupOutlook(data); },
                error: WCC.utils.handleError
            });
        },


        /*
        The first set of screens for mobile setup. Choose iphone / manual / auto / etc...
        */
        renderMobileSetup: function()
        {
            WCC.components.analytics.trackView('modal', 'wcc-easysetup-mobile');

            $('#componentEasySetupDiv').removeClass('componentEasySetupDivSized');

            var renderedOutput =  $('#componentEasySetupMobile').tmpl();
            $('#componentEasySetupDiv').html(renderedOutput);
            $('#componentEasySetupDiv').dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);

            var iPhoneVal = $('#componentEasySetupDiv #componentEasySetupMobilePhone').val();
            if (iPhoneVal == 'iPhone')
            {
                $('#componentEasySetupDiv #componentEasySetupMobileSetupIphone').show();
            }
            else
            {
                $('#componentEasySetupDiv #componentEasySetupMobileSetupIphone').hide();
            }

            $('#componentEasySetupDiv #componentEasySetupMobileIphoneManualButton').click(function(){

                $('#componentEasySetupDiv #componentEasySetupMobileIphoneManualButton').addClass('componentEasySetupMobileButtonSelected');
                $('#componentEasySetupDiv #componentEasySetupMobileIphoneManualButton').removeClass('componentEasySetupMobileButton');

                $('#componentEasySetupDiv #componentEasySetupMobileIphoneAutoButton').removeClass('componentEasySetupMobileButtonSelected');
                $('#componentEasySetupDiv #componentEasySetupMobileIphoneAutoButton').addClass('componentEasySetupMobileButton');

            });

            $('#componentEasySetupDiv #componentEasySetupMobileIphoneAutoButton').click(function(){

                $('#componentEasySetupDiv #componentEasySetupMobileIphoneManualButton').removeClass('componentEasySetupMobileButtonSelected');
                $('#componentEasySetupDiv #componentEasySetupMobileIphoneManualButton').addClass('componentEasySetupMobileButton');

                $('#componentEasySetupDiv #componentEasySetupMobileIphoneAutoButton').addClass('componentEasySetupMobileButtonSelected');
                $('#componentEasySetupDiv #componentEasySetupMobileIphoneAutoButton').removeClass('componentEasySetupMobileButton');
            });

            $('#componentEasySetupDiv #componentEasySetupMobilePhone').change(function(){

                // hide all the stuff
                $('#componentEasySetupDiv #componentEasySetupMobileSetupIphone').hide();
                $('#componentEasySetupDiv #componentEasySetupMobileSetupAndroid').hide();
                $('#componentEasySetupDiv #componentEasySetupMobileSetupWindows').hide();
                $('#componentEasySetupDiv #componentEasySetupMobileSetupBlackberry').hide();
                $('#componentEasySetupDiv #componentEasySetupMobileSetupOther').hide();

                var iPhoneVal = $('#componentEasySetupDiv #componentEasySetupMobilePhone').val();
                if (iPhoneVal == 'iPhone')
                {
                    $('#componentEasySetupDiv #componentEasySetupMobileSetupIphone').show();
                }
            });

            $('#componentEasySetupDiv #componentEasySetupMobileCancel').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv #componentEasySetupMobileBack').click(function(){
                WCC.components.easySetup.renderDialog()
            });

            // next button
            $('#componentEasySetupDiv #componentEasySetupMobileNext').click(function(){

                // iphone?
                var phoneVal = $('#componentEasySetupDiv #componentEasySetupMobilePhone').val();

                WCC.components.easySetup.setCurrentClient($('#componentEasySetupMobilePhone').val());

                if (phoneVal == 'iPhone')
                {
                    // auto or manual
                    if ($('#componentEasySetupDiv #componentEasySetupMobileSetupIphoneManual').attr('checked') == undefined )
                    {
                        // manuel
                        WCC.components.easySetup.setSetupEmailAddress($('#componentEasySetupMobileEmailAddress').val());

                        $.ajax({
                            type: "POST",
                            url: 'ajaxemail/getemailsettings',
                            dataType : 'json',
                            data: {'postToken':Globals.POST_TOKEN, 'emailAddress' : $('#componentEasySetupMobileEmailAddress').val()},
                            success: function(data) {WCC.components.easySetup.renderMobileSetupManualIphone(data)},
                            error: WCC.utils.handleError
                        });
                    }
                    else
                    {
                        WCC.components.easySetup.setSetupEmailAddress($('#componentEasySetupMobileEmailAddress').val());

                        $.ajax({
                            type: "POST",
                            url: 'ajaxemail/getxco',
                            dataType : 'json',
                            data: {'postToken':Globals.POST_TOKEN, 'emailAddress' : $('#componentEasySetupMobileEmailAddress').val()},
                            success: function(data) {WCC.components.easySetup.renderMobileSetupAutoIphone(data)},
                            error: WCC.utils.handleError
                        });
                    }
                }
                else if (phoneVal == 'android')
                {
                    WCC.components.easySetup.setSetupEmailAddress($('#componentEasySetupMobileEmailAddress').val());

                    $.ajax({
                        type: "POST",
                        url: 'ajaxemail/getemailsettings',
                        dataType : 'json',
                        data: {'postToken':Globals.POST_TOKEN, 'emailAddress' : $('#componentEasySetupMobileEmailAddress').val()},
                        success: function(data) {WCC.components.easySetup.renderMobileSetupAndroid(data)},
                        error: WCC.utils.handleError
                    });
                }
                else if (phoneVal == 'windows')
                {
                    WCC.components.easySetup.setSetupEmailAddress($('#componentEasySetupMobileEmailAddress').val());

                    $.ajax({
                        type: "POST",
                        url: 'ajaxemail/getemailsettings',
                        dataType : 'json',
                        data: {'postToken':Globals.POST_TOKEN, 'emailAddress' : $('#componentEasySetupMobileEmailAddress').val()},
                        success: function(data) {WCC.components.easySetup.renderMobileSetupWindows(data)},
                        error: WCC.utils.handleError
                    });
                }
                else if (phoneVal == 'other')
                {
                    WCC.components.easySetup.setSetupEmailAddress($('#componentEasySetupMobileEmailAddress').val());

                    $.ajax({
                        type: "POST",
                        url: 'ajaxemail/getemailsettings',
                        dataType : 'json',
                        data: {'postToken':Globals.POST_TOKEN, 'emailAddress' : $('#componentEasySetupMobileEmailAddress').val()},
                        success: function(data) {WCC.components.easySetup.renderMobileSetupOther(data)},
                        error: WCC.utils.handleError
                    });
                }
            });

            WCC.components.analytics.init($('#componentEasySetupDiv'));
            WCC.utils.centerThisDialog(properties.dialogDivId);

        },


        /**
        Iphone auto setup screen
        **/
        renderMobileSetupAutoIphone: function(data)
        {
            WCC.components.analytics.trackView('modal', 'wcc-easysetup-mobile-iphone-auto');

            var renderedOutput =  $('#componentEasySetupMobileAutolIphone').tmpl(data);


            $('#componentEasySetupDiv').html(renderedOutput);
            $('#componentEasySetupDiv').html($('#componentEasySetupDiv').html().replace('||XCOLINK||', data.xcoLink));
            $('#componentEasySetupDiv').dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);

            $('#componentEasySetupDiv #componentEasySetupMobileAutolIphoneOk').attr('disabled', 'disabled');

            $('#componentEasySetupDiv #componentEasySetupMobileAutolIphoneCancel').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv #componentEasySetupMobileAutolIphoneBack').click(function(){
                WCC.components.easySetup.renderMobileSetup()
                WCC.utils.centerThisDialog(properties.dialogDivId);
            });

            $('#componentEasySetupDiv #componentEasySetupMobileAutolIphoneOk').click(function(){
                if ($('#componentEasySetupDiv #componentEasySetupMobileAutolIphoneOk').attr('disabled') == 'disabled')
                {
                    return false;
                }
                $.ajax({
                    type: "POST",
                    url: 'ajaxemail/sendxco',
                    dataType : 'json',
                    data: {'postToken':Globals.POST_TOKEN, 'destinationEmail': $('#componentEasySetupMobileAutolIphoneSmsEmail').val(), 'emailAddress' : WCC.components.easySetup.getSetupEmailAddress()},
                    success: function(data) { WCC.components.easySetup.closeDialog() },
                    error: WCC.utils.handleError
                });
            });

            $('#componentEasySetupDiv #componentEasySetupMobileAutolIphoneSmsCarrier').change(function(){
                WCC.components.easySetup.showOrHideEmailAddress();
            });

            $('#componentEasySetupDiv #componentEasySetupMobileAutolIphoneSmsNumber').keyup(function(){
                WCC.components.easySetup.buildEmailAddress()
            });

            this.fixHeaderHeight();
            WCC.components.analytics.init($('#componentEasySetupDiv'));
            WCC.utils.centerThisDialog(properties.dialogDivId);

        },


        /**
        Manual setup screen for the iPhone
        **/
        renderMobileSetupManualIphone: function(data)
        {
            WCC.components.analytics.trackView('modal', 'wcc-easysetup-mobile-iphone-manual');

            var renderedOutput =  $('#componentEasySetupMobileManualIphone').tmpl(data);
            $('#componentEasySetupDiv').html(renderedOutput);
            $('#componentEasySetupDiv').dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);


            $('#componentEasySetupDiv #componentEasySetupMobileIphoneManualOk').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv #componentEasySetupMobileIphoneManualBack').click(function(){
                WCC.components.easySetup.renderMobileSetup()
                WCC.utils.centerThisDialog(properties.dialogDivId);
            });

            $('#componentEasySetupDiv #componentEasySetupMobileIphoneManualCancel').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_print').click(function(){
                WCC.components.easySetup.printContents();
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_email').click(function(){
                WCC.components.easySetup.emailSetupInstructions('iPhone Mail Setup Instructions');
            });

            this.fixHeaderHeight();
            this.fixDialogHeight();

            WCC.components.analytics.init($('#componentEasySetupDiv'));
            WCC.components.easySetup.attachToolTipsForMailAndPrint();
            WCC.utils.centerThisDialog(properties.dialogDivId);

        },


        /**
        Windows setup
        **/
        renderMobileSetupWindows: function(data)
        {
            WCC.components.analytics.trackView('modal', 'wcc-easysetup-mobile-windows');

            var renderedOutput =  $('#componentEasySetupMobileWindows').tmpl(data);
            $('#componentEasySetupDiv').html(renderedOutput);
            $('#componentEasySetupDiv').dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);

            $('#componentEasySetupDiv #componentEasySetupMobileWindowsOk').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv #componentEasySetupMobileWindowsBack').click(function(){
                WCC.components.easySetup.renderMobileSetup()
                WCC.utils.centerThisDialog(properties.dialogDivId);
            });

            $('#componentEasySetupDiv #componentEasySetupMobileWindowsCancel').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_print').click(function(){
                WCC.components.easySetup.printContents();
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_email').click(function(){
                WCC.components.easySetup.emailSetupInstructions('Windows Phone Setup Instructions');
            });

            this.fixHeaderHeight();
            this.fixDialogHeight();

            WCC.components.analytics.init($('#componentEasySetupDiv'));
            WCC.components.easySetup.attachToolTipsForMailAndPrint();
            WCC.utils.centerThisDialog(properties.dialogDivId);

        },


        /**
        Windows setup
        **/
        renderMobileSetupOther: function(data)
        {
            WCC.components.analytics.trackView('modal', 'wcc-easysetup-mobile-other');

            var renderedOutput =  $('#componentEasySetupMobileOther').tmpl(data);
            $('#componentEasySetupDiv').html(renderedOutput);
            $('#componentEasySetupDiv').dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);


            $('#componentEasySetupDiv #componentEasySetupMobileOtherOk').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv #componentEasySetupMobileOtherBack').click(function(){
                WCC.components.easySetup.renderMobileSetup()
                WCC.utils.centerThisDialog(properties.dialogDivId);

            });

            $('#componentEasySetupDiv #componentEasySetupMobileOtherCancel').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_print').click(function(){
                WCC.components.easySetup.printContents();
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_email').click(function(){
                WCC.components.easySetup.emailSetupInstructions('Mobile Mail Setup Instructions');
            });

            this.fixHeaderHeight();
            this.fixDialogHeight();

            WCC.components.analytics.init($('#componentEasySetupDiv'));
            WCC.components.easySetup.attachToolTipsForMailAndPrint();
            WCC.utils.centerThisDialog(properties.dialogDivId);
        },


        /**
        Android setup
        **/
        renderMobileSetupAndroid: function(data)
        {
            WCC.components.analytics.trackView('modal', 'wcc-easysetup-mobile-android');

            var renderedOutput =  $('#componentEasySetupMobileAndroid').tmpl(data);
            $('#componentEasySetupDiv').html(renderedOutput);
            $('#componentEasySetupDiv').dialog( 'option', 'position', 'center' );
            WCC.utils.centerThisDialog(properties.dialogDivId);


            $('#componentEasySetupDiv #componentEasySetupMobileAndroidOk').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv #componentEasySetupMobileAndroidBack').click(function(){
                WCC.components.easySetup.renderMobileSetup()
                WCC.utils.centerThisDialog(properties.dialogDivId);
            });

            $('#componentEasySetupDiv #componentEasySetupMobileAndroidCancel').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_print').click(function(){
                WCC.components.easySetup.printContents();
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_email').click(function(){
                WCC.components.easySetup.emailSetupInstructions('Android Mail Setup Instructions');
            });

            this.fixHeaderHeight();
            this.fixDialogHeight();

            WCC.components.analytics.init($('#componentEasySetupDiv'));

            WCC.components.easySetup.attachToolTipsForMailAndPrint();
            WCC.utils.centerThisDialog(properties.dialogDivId);
        },


         /**
        Apple mail
        **/
        renderDesktopSetupAppleMail: function(data)
        {
            WCC.components.analytics.trackView('modal', 'wcc-easysetup-desktop-applemail');

            var renderedOutput =  $('#componentEasySetupDesktopAppleMail').tmpl(data);
            $('#componentEasySetupDiv').html(renderedOutput);

            for (var i = 0; i < 5; i++)
            {
                $('#componentEasySetupDiv').html($('#componentEasySetupDiv').html().replace('||EMAILADDRESS||', WCC.utils.utf8Address(WCC.components.easySetup.getSetupEmailAddress())));
            };

            if (data.imapStatus == 1)
            {
                $('#componentEasySetupDiv').html($('#componentEasySetupDiv').html().replace('||IMAPORPOP||', "IMAP"));
                $('#componentEasySetupDiv').html($('#componentEasySetupDiv').html().replace('||MAILSERVER||', data.imapMailServer));
            }
            else
            {
                $('#componentEasySetupDiv').html($('#componentEasySetupDiv').html().replace('||IMAPORPOP||', "POP"));
                $('#componentEasySetupDiv').html($('#componentEasySetupDiv').html().replace('||MAILSERVER||', data.popMailServer));
            }

            $('#componentEasySetupDiv').html($('#componentEasySetupDiv').html().replace('||OUTGOINGMAILSERVER||', data.outgoingMailServer));
            WCC.utils.centerThisDialog(properties.dialogDivId);

            $('#componentEasySetupDiv #componentEasySetupDesktopAppleMailCancel').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv #componentEasySetupDesktopAppleMailBack').click(function(){
                WCC.components.easySetup.renderDesktopSetup();
                WCC.utils.centerThisDialog(properties.dialogDivId);
            });

            $('#componentEasySetupDiv #componentEasySetupDesktopAppleMailOk').click(function(){
                WCC.components.easySetup.closeDialog();
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_print').click(function(){
                WCC.components.easySetup.printContents();
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_email').click(function(){
                WCC.components.easySetup.emailSetupInstructions('Apple Mail Setup Instructions');
            });


            this.fixHeaderHeight();
            this.fixDialogHeight();

            WCC.components.analytics.init($('#componentEasySetupDiv'));
            WCC.components.easySetup.attachToolTipsForMailAndPrint();
            WCC.utils.centerThisDialog(properties.dialogDivId);
        },


        /**
        Apple mail
        **/
        renderDesktopSetupOther: function(data)
        {
            WCC.components.analytics.trackView('modal', 'wcc-easysetup-desktop-other');

            var renderedOutput =  $('#componentEasySetupDesktopOther').tmpl(data);
            $('#componentEasySetupDiv').html(renderedOutput);
            WCC.utils.centerThisDialog(properties.dialogDivId);


            $('#componentEasySetupDiv #componentEasySetupDesktopOtherCancel').click(function(){
                WCC.components.easySetup.closeDialog()
            });

            $('#componentEasySetupDiv #componentEasySetupDesktopOtherBack').click(function(){
                WCC.components.easySetup.renderDesktopSetup();
                WCC.utils.centerThisDialog(properties.dialogDivId);
            });

            $('#componentEasySetupDiv #componentEasySetupDesktopOtherOk').click(function(){
                WCC.components.easySetup.closeDialog();
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_print').click(function(){
                WCC.components.easySetup.printContents();
            });

            $('#componentEasySetupDiv .easysetup_sprite_icon_setup_email').click(function(){
                WCC.components.easySetup.emailSetupInstructions('Mail Setup Instructions');
            });

            this.fixHeaderHeight();
            this.fixDialogHeight();

            WCC.components.analytics.init($('#componentEasySetupDiv'));
            WCC.components.easySetup.attachToolTipsForMailAndPrint();
            WCC.utils.centerThisDialog(properties.dialogDivId);
        },


        /**
        Clears the state of things...
        **/
        clearState: function()
        {
            $('#componentEasySetupDiv').remove();

            setupEmailAddress = null;
        },


        /**
         * Close the dialog and remove the div
         *
         */
        closeDialog: function()
        {
            $('#componentEasySetupDiv').dialog("close");
        },


        /**
        Set the internal client value
        **/
        setCurrentClient: function(theClient)
        {
            currentClient = theClient;
            return true;
        },


        /**
        Get the internal currentClient value
        **/
        getCurrentClient: function()
        {
            return currentClient;
        },



        /**
        Set the internal setupEmailAddress value
        **/
        setSetupEmailAddress: function(emailAddress)
        {
            setupEmailAddress = emailAddress;
            return true;
        },


        /**
        Get the internal setupEmailAddress value
        **/
        getSetupEmailAddress: function()
        {
            return setupEmailAddress;
        },


        /**
        Helper for the iPhone auto setup
        **/
        showOrHideEmailAddress: function()
        {
            var smsCarrier = $('#componentEasySetupMobileAutolIphoneSmsCarrier').val();

            if (smsCarrier == 'Other')
            {
                $('#componentEasySetupMobileAutolIphoneSmsEmailAddress').css('visibility', 'visible');
                $('#componentEasySetupMobileAutolIphoneSmsEmailAddressValue').css('visibility', 'visible');

                WCC.components.easySetup.buildEmailAddress();
            }
            else
            {
                WCC.components.easySetup.buildEmailAddress();
                $('#componentEasySetupMobileAutolIphoneSmsEmailAddress').css('visibility', 'hidden');
                $('#componentEasySetupMobileAutolIphoneSmsEmailAddressValue').css('visibility', 'hidden');
            }
        },


        /**
        Build the SMS address for the iPhone auto setup
        **/
        buildEmailAddress: function()
        {
            var smsCarrier = $('#componentEasySetupMobileAutolIphoneSmsCarrier');
            var smsEmail = $('#componentEasySetupMobileAutolIphoneSmsEmail');
            var smsNumber = $('#componentEasySetupMobileAutolIphoneSmsNumber');

            if (smsCarrier.val() == '')
            {
                smsEmail.val('');

                $('#componentEasySetupDiv #componentEasySetupMobileAutolIphoneOk').attr('disabled', 'disabled');
                return false;
            }

            if (smsNumber.val() == '' && smsCarrier.val() != 'Other')
            {
                smsEmail.val('');

                $('#componentEasySetupDiv #componentEasySetupMobileAutolIphoneOk').attr('disabled', 'disabled');
                return false;
            }

            if (smsCarrier.val() != 'Other')
            {
                var phoneNumber = smsNumber.val().replace(/[^0-9]/g, '');

                var phoneEmailAddress = smsCarrier.val().replace('###', phoneNumber );
                smsEmail.val(phoneEmailAddress);
            }
            else
            {
                 var phoneNumber = smsNumber.val().replace(/[^0-9]/g, '');
                 if (phoneNumber == '')
                 {
                     phoneNumber = 5551212;
                 }
                 smsEmail.val(phoneNumber + '@YourCarrier.com');
            }

            $('#componentEasySetupDiv #componentEasySetupMobileAutolIphoneOk').attr('disabled', false);
        },


        fixHeaderHeight: function()
        {
            if ($('#componentEasySetupDiv h3').html().length > 51)
            {
                $('#componentEasySetupDiv h3').parent().height(60);
            }
            else
            {
                $('#componentEasySetupDiv h3').parent().height(30);
            }
        },

        fixDialogHeight: function()
        {
            /**
            $('#componentEasySetupDiv').parent().height(400);
            $('#componentEasySetupDiv').parent().css('overflow-y', 'scroll')
            **/

            $('#componentEasySetupDiv').addClass('componentEasySetupDivSized');

            $('#componentEasySetupDiv').dialog( 'option', 'position', 'center' );
        },


        printContents: function()
        {
            var newDiv = document.createElement('div');
            newDiv.id = 'tmpPrint';
            $(document.body).append(newDiv);

            $('#tmpPrint').html( $('.componentEasySetupHeader').html()  + $('.componentEasySetupLongContent').html() );
            $('#tmpPrint .easySetupButtons').remove();
            $('#tmpPrint').jqprint();
            $('#tmpPrint').remove();
        },

        emailSetupInstructions: function(title)
        {

            //var renderedOutput =  $('#componentEasySetupDesktopOther').tmpl(data);
            //$('#componentEasySetupDiv').html(renderedOutput);

              var newDiv = document.createElement('div');
            newDiv.id = 'tmpPrint';
            $(document.body).append(newDiv);

            $('#tmpPrint').html( $('.componentEasySetupHeader').html()  + $('.componentEasySetupLongContent').html() );
            $('#tmpPrint .easySetupButtons').remove();

            $('#tmpPrint .componentEasySetup').removeClass('componentEasySetup').addClass('componentEasySetupMail');

            var contents = $('#tmpPrint').html();


            $('#tmpPrint').remove();

            var theDialog = $('#componentEasySetupDiv');

            if ( $('#componentCreateAccountHider').length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = 'componentCreateAccountHider';
                theDialog.append(newDiv);
            }

            var createOffset = theDialog.offset();

            $('#componentCreateAccountHider')
                .css('position', 'absolute')
                .width(theDialog.width() + 35)
                .height(theDialog.height() + 35)
                .css('top', '32px')
                .css('left', '0px')
                .css('z-index', 13013)
                .css('background', "white")
                .css('-moz-opacity', '0.90')
                .css('filter', 'alpha(opacity=90)')
                .css('opacity', '.70');


            var mailDiv = $('#componentEasySetupMailDiv');
            // create the dialog box div... if it's not there
            if ( mailDiv.length == 0)
            {
                var newDiv = document.createElement('div');
                newDiv.id = 'componentEasySetupMailDiv';
                $('#componentEasySetupDiv').append(newDiv);
            }

            $('#componentEasySetupMailDiv').addClass('easySetupMail');

            if (WCC.utils.isMac() == false)
            {
                $('#componentEasySetupMailDiv').height($('#componentEasySetupMailDiv').height() + 20);
            }

            var renderedOutput =  $('#componentEasySetupSendInstructions').tmpl({'title' : title});
            $('#componentEasySetupMailDiv').html(renderedOutput);



           $('#componentEasySetupSendInstructionsContents').html(contents);

           $('#componentEasySetupMailDiv #componentEasySetupSendInstructionsMailShowCC').click(function(){
                $('#componentEasySetupMailDiv #componentEasySetupSendInstructionsMailCCHolder').show();
                $('#componentEasySetupMailDiv #componentEasySetupSendInstructionsMailBCCHolder').show();

                $('#componentEasySetupMailDiv #componentEasySetupSendInstructionsMailShowBccHolder').hide();

                $('#componentEasySetupMailDiv').height($('#componentEasySetupMailDiv').height() + 55);
            });


           $('#componentEasySetupDiv #componentEasySetupMailCancel').click(function(){
                $('#componentEasySetupMailDiv').remove();
                $('#componentCreateAccountHider').remove();
            });

           $('#componentEasySetupDiv #componentEasySetupMailSend').click(function(){
                WCC.components.easySetup.sendSetupInstructions();
            });
        },

        /**
         * Send Setup instructions
         *
         */
        sendSetupInstructions: function()
        {
            $.ajax({
                type: "POST",
                url: 'ajaxemail/sendsetupinstructions/',
                data: {
                    'sendTo' : $('#componentEasySetupMailDiv #componentEasySetupSendInstructionsMailTo').val(),
                    'sendCC' : $('#componentEasySetupMailDiv #componentEasySetupSendInstructionsMailCC').val(),
                    'sendBCC' : $('#componentEasySetupMailDiv #componentEasySetupSendInstructionsMailBCC').val(),
                    'sendSubject' : $('#componentEasySetupMailDiv #componentEasySetupSendInstructionsMailSubject').val(),
                    'html': $("#componentEasySetupSendInstructionsContents").html(),
                    'postToken':Globals.POST_TOKEN
                },
                dataType : 'json',
                success: function(data) {WCC.components.easySetup.sendSetupInstructionsSuccess(data)},
                error: WCC.utils.handleError
            });

            return true;
        },

        sendSetupInstructionsSuccess: function(data)
        {

            if (data.mailStatus == true)
            {
                WCC.components.componentConfirmation.open('Send Successful', 'Your message has been sent', null, null, 'Ok', '');
                $('#componentEasySetupMailDiv').remove();
                $('#componentCreateAccountHider').remove();
            }
            else
            {
                WCC.components.componentConfirmation.open('Send Failed', 'Your message could not be sent. Please check the address', null, null, 'Ok', '');
            }
        },


        getStuff: function() {
        	return stuff;
        },

        attachToolTipsForMailAndPrint: function()
        {
            require(["starfield/sf.tipper"], function () {
                stuff = $("#componentEasySetupDiv .sf-tip").sfTipper({
                	wireup: true

                });

                var adjustCss = function() {
                	var left = parseInt($('body > .sf-qt:first').css('left') ) - 9 ;
                	$('body > .sf-qt:first').css('width', '45px');
                	$('body > .sf-qt:first').css('left', left);
                	$('body> .sf-qt:first .sf-qt-arrow-wrap').css('left', 15);
                };

                $("#componentEasySetupDiv .sf-tip").mouseover( function() {adjustCss();} );

            });

        }

    };


}());



/*! http://mths.be/punycode v1.2.3 by @mathias */

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports;
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /\x2E|\u3002|\uFF0E|\uFF61/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		while (length--) {
			array[length] = fn(array[length]);
		}
		return array;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings.
	 * @private
	 * @param {String} domain The domain name.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		return map(string.split(regexSeparators), fn).join('.');
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <http://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    length,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols to a Punycode string of ASCII-only
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name to Unicode. Only the
	 * Punycoded parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it on a string that has already been converted to
	 * Unicode.
	 * @memberOf punycode
	 * @param {String} domain The Punycode domain name to convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(domain) {
		return mapDomain(domain, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name to Punycode. Only the
	 * non-ASCII parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it with a domain that's already in ASCII.
	 * @memberOf punycode
	 * @param {String} domain The domain name to convert, as a Unicode string.
	 * @returns {String} The Punycode representation of the given domain name.
	 */
	function toASCII(domain) {
		return mapDomain(domain, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.2.3',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <http://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define(function() {
			return punycode;
		});
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

